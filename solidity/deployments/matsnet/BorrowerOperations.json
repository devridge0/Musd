{
  "address": "0x7eb61149dFB8856C4a7A4806641058FFe3bfFfEf",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_activePoolAddress",
          "type": "address"
        }
      ],
      "name": "ActivePoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "BorrowingFeePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_collSurplusPoolAddress",
          "type": "address"
        }
      ],
      "name": "CollSurplusPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newCollateralAddress",
          "type": "address"
        }
      ],
      "name": "CollateralAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_defaultPoolAddress",
          "type": "address"
        }
      ],
      "name": "DefaultPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_gasPoolAddress",
          "type": "address"
        }
      ],
      "name": "GasPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_musdTokenAddress",
          "type": "address"
        }
      ],
      "name": "MUSDTokenAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pcvAddress",
          "type": "address"
        }
      ],
      "name": "PCVAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newPriceFeedAddress",
          "type": "address"
        }
      ],
      "name": "PriceFeedAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "RefinancingFeePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sortedTrovesAddress",
          "type": "address"
        }
      ],
      "name": "SortedTrovesAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_stabilityPoolAddress",
          "type": "address"
        }
      ],
      "name": "StabilityPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "arrayIndex",
          "type": "uint256"
        }
      ],
      "name": "TroveCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newTroveManagerAddress",
          "type": "address"
        }
      ],
      "name": "TroveManagerAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_principal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_interest",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_coll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "operation",
          "type": "uint8"
        }
      ],
      "name": "TroveUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BORROWING_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DECIMAL_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_NET_DEBT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MUSD_GAS_COMPENSATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_100pct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activePool",
      "outputs": [
        {
          "internalType": "contract IActivePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assetAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "addColl",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collWithdrawal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debtChange",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isDebtIncrease",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_assetAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "adjustTrove",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_musdToBurn",
          "type": "uint256"
        }
      ],
      "name": "burnDebtFromPCV",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeTrove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collSurplusPool",
      "outputs": [
        {
          "internalType": "contract ICollSurplusPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultPool",
      "outputs": [
        {
          "internalType": "contract IDefaultPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        }
      ],
      "name": "getCompositeDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntireSystemColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemColl",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntireSystemDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRateManager",
      "outputs": [
        {
          "internalType": "contract IInterestRateManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_musdToMint",
          "type": "uint256"
        }
      ],
      "name": "mintBootstrapLoanFromPCV",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_assetAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "moveCollateralGainToTrove",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "musd",
      "outputs": [
        {
          "internalType": "contract IMUSD",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debtAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_assetAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "openTrove",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pcv",
      "outputs": [
        {
          "internalType": "contract IPCV",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pcvAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "refinance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refinancingFeePercentage",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "repayMUSD",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_activePoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collSurplusPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_defaultPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gasPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_interestRateManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_musdTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pcvAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stabilityPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sortedTrovesAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_troveManagerAddress",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_refinanceFeePercentage",
          "type": "uint8"
        }
      ],
      "name": "setRefinancingFeePercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTroves",
      "outputs": [
        {
          "internalType": "contract ISortedTroves",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "troveManager",
      "outputs": [
        {
          "internalType": "contract ITroveManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "withdrawColl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "withdrawMUSD",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbbdb81f4c659dff9cbc33ac1eb53be8f94864e934785c3819f11c12077211f7d",
  "receipt": {
    "to": null,
    "from": "0x6e80164ea60673D64d5d6228beb684a1274Bb017",
    "contractAddress": "0x7eb61149dFB8856C4a7A4806641058FFe3bfFfEf",
    "transactionIndex": 0,
    "gasUsed": "4569230",
    "logsBloom": "0x
    "blockHash": "0x2dcd41764674f7a7cad659ab7642189063b8542c231106ccc1ae5e84fedc8dbd",
    "transactionHash": "0xbbdb81f4c659dff9cbc33ac1eb53be8f94864e934785c3819f11c12077211f7d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1126078,
        "transactionHash": "0xbbdb81f4c659dff9cbc33ac1eb53be8f94864e934785c3819f11c12077211f7d",
        "address": "0x7eb61149dFB8856C4a7A4806641058FFe3bfFfEf",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006e80164ea60673d64d5d6228beb684a1274bb017"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2dcd41764674f7a7cad659ab7642189063b8542c231106ccc1ae5e84fedc8dbd"
      }
    ],
    "blockNumber": 1126078,
    "cumulativeGasUsed": "4569230",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4bf27f276f32f200c02c307a6797ac39",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"}],\"name\":\"ActivePoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"BorrowingFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collSurplusPoolAddress\",\"type\":\"address\"}],\"name\":\"CollSurplusPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newCollateralAddress\",\"type\":\"address\"}],\"name\":\"CollateralAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_defaultPoolAddress\",\"type\":\"address\"}],\"name\":\"DefaultPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_gasPoolAddress\",\"type\":\"address\"}],\"name\":\"GasPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_musdTokenAddress\",\"type\":\"address\"}],\"name\":\"MUSDTokenAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pcvAddress\",\"type\":\"address\"}],\"name\":\"PCVAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newPriceFeedAddress\",\"type\":\"address\"}],\"name\":\"PriceFeedAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"RefinancingFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"}],\"name\":\"SortedTrovesAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"}],\"name\":\"StabilityPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"arrayIndex\",\"type\":\"uint256\"}],\"name\":\"TroveCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newTroveManagerAddress\",\"type\":\"address\"}],\"name\":\"TroveManagerAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_interest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"TroveUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BORROWING_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_NET_DEBT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MUSD_GAS_COMPENSATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_100pct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePool\",\"outputs\":[{\"internalType\":\"contract IActivePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"addColl\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debtChange\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isDebtIncrease\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"adjustTrove\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_musdToBurn\",\"type\":\"uint256\"}],\"name\":\"burnDebtFromPCV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collSurplusPool\",\"outputs\":[{\"internalType\":\"contract ICollSurplusPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPool\",\"outputs\":[{\"internalType\":\"contract IDefaultPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"}],\"name\":\"getCompositeDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemColl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateManager\",\"outputs\":[{\"internalType\":\"contract IInterestRateManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_musdToMint\",\"type\":\"uint256\"}],\"name\":\"mintBootstrapLoanFromPCV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"moveCollateralGainToTrove\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"musd\",\"outputs\":[{\"internalType\":\"contract IMUSD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"openTrove\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pcv\",\"outputs\":[{\"internalType\":\"contract IPCV\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pcvAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"}],\"name\":\"refinance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refinancingFeePercentage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"repayMUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collSurplusPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gasPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_interestRateManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_musdTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pcvAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_refinanceFeePercentage\",\"type\":\"uint8\"}],\"name\":\"setRefinancingFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTroves\",\"outputs\":[{\"internalType\":\"contract ISortedTroves\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveManager\",\"outputs\":[{\"internalType\":\"contract ITroveManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"withdrawColl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"withdrawMUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BorrowerOperations.sol\":\"BorrowerOperations\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/BorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./dependencies/CheckContract.sol\\\";\\nimport \\\"./dependencies/LiquityBase.sol\\\";\\nimport \\\"./dependencies/SendCollateral.sol\\\";\\nimport \\\"./interfaces/IBorrowerOperations.sol\\\";\\nimport \\\"./interfaces/ICollSurplusPool.sol\\\";\\nimport \\\"./interfaces/IInterestRateManager.sol\\\";\\nimport \\\"./interfaces/IPCV.sol\\\";\\nimport \\\"./interfaces/ISortedTroves.sol\\\";\\nimport \\\"./interfaces/ITroveManager.sol\\\";\\nimport \\\"./token/IMUSD.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract BorrowerOperations is\\n    LiquityBase,\\n    Ownable,\\n    CheckContract,\\n    SendCollateral,\\n    IBorrowerOperations\\n{\\n    /* --- Variable container structs  ---\\n\\n    Used to hold, return and assign variables inside a function, in order to avoid the error:\\n    \\\"CompilerError: Stack too deep\\\". */\\n\\n    struct LocalVariables_adjustTrove {\\n        uint256 price;\\n        uint256 collChange;\\n        uint256 netDebtChange;\\n        bool isCollIncrease;\\n        uint256 debt;\\n        uint256 coll;\\n        uint256 oldICR;\\n        uint256 newICR;\\n        uint256 newTCR;\\n        uint256 fee;\\n        uint256 newColl;\\n        uint256 newPrincipal;\\n        uint256 newInterest;\\n        uint256 stake;\\n        uint256 interestOwed;\\n        uint256 principalAdjustment;\\n        uint256 interestAdjustment;\\n        bool isRecoveryMode;\\n    }\\n\\n    struct LocalVariables_openTrove {\\n        uint256 price;\\n        uint256 fee;\\n        uint256 netDebt;\\n        uint256 compositeDebt;\\n        uint256 ICR;\\n        uint256 NICR;\\n        uint256 stake;\\n        uint256 arrayIndex;\\n    }\\n\\n    struct ContractsCache {\\n        ITroveManager troveManager;\\n        IActivePool activePool;\\n        IMUSD musd;\\n        IInterestRateManager interestRateManager;\\n    }\\n\\n    enum BorrowerOperation {\\n        openTrove,\\n        closeTrove,\\n        adjustTrove\\n    }\\n\\n    string public constant name = \\\"BorrowerOperations\\\";\\n\\n    // refinancing fee is always a percentage of the borrowing (issuance) fee\\n    uint8 public refinancingFeePercentage = 20;\\n\\n    // --- Connected contract declarations ---\\n\\n    ITroveManager public troveManager;\\n\\n    address public collateralAddress;\\n    address public gasPoolAddress;\\n    address public pcvAddress;\\n    address public stabilityPoolAddress;\\n\\n    ICollSurplusPool public collSurplusPool;\\n\\n    IMUSD public musd;\\n    IPCV public pcv;\\n    IInterestRateManager public interestRateManager;\\n\\n    // A doubly linked list of Troves, sorted by their collateral ratios\\n    ISortedTroves public sortedTroves;\\n\\n    modifier onlyGovernance() {\\n        require(\\n            msg.sender == pcv.council() || msg.sender == pcv.treasury(),\\n            \\\"BorrowerOps: Only governance can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    // Calls on PCV behalf\\n    function mintBootstrapLoanFromPCV(uint256 _musdToMint) external {\\n        require(\\n            msg.sender == pcvAddress,\\n            \\\"BorrowerOperations: caller must be PCV\\\"\\n        );\\n        musd.mint(pcvAddress, _musdToMint);\\n    }\\n\\n    function burnDebtFromPCV(uint256 _musdToBurn) external {\\n        require(\\n            msg.sender == pcvAddress,\\n            \\\"BorrowerOperations: caller must be PCV\\\"\\n        );\\n        musd.burn(pcvAddress, _musdToBurn);\\n    }\\n\\n    // --- Borrower Trove Operations ---\\n    function openTrove(\\n        uint256 _maxFeePercentage,\\n        uint256 _debtAmount,\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable override {\\n        ContractsCache memory contractsCache = ContractsCache(\\n            troveManager,\\n            activePool,\\n            musd,\\n            interestRateManager\\n        );\\n        // slither-disable-next-line uninitialized-local\\n        LocalVariables_openTrove memory vars;\\n\\n        vars.price = priceFeed.fetchPrice();\\n        bool isRecoveryMode = _checkRecoveryMode(vars.price);\\n\\n        _requireValidMaxFeePercentage(_maxFeePercentage, isRecoveryMode);\\n        _requireTroveisNotActive(contractsCache.troveManager, msg.sender);\\n\\n        vars.fee;\\n        vars.netDebt = _debtAmount;\\n\\n        if (!isRecoveryMode) {\\n            vars.fee = _triggerBorrowingFee(\\n                contractsCache.troveManager,\\n                contractsCache.musd,\\n                _debtAmount,\\n                _maxFeePercentage\\n            );\\n            vars.netDebt += vars.fee;\\n        }\\n\\n        _requireAtLeastMinNetDebt(vars.netDebt);\\n\\n        // ICR is based on the composite debt, i.e. the requested amount + borrowing fee + gas comp.\\n        vars.compositeDebt = _getCompositeDebt(vars.netDebt);\\n        assert(vars.compositeDebt > 0);\\n\\n        // if BTC overwrite the asset value\\n        _assetAmount = getAssetAmount(_assetAmount);\\n        vars.ICR = LiquityMath._computeCR(\\n            _assetAmount,\\n            vars.compositeDebt,\\n            vars.price\\n        );\\n        vars.NICR = LiquityMath._computeNominalCR(\\n            _assetAmount,\\n            vars.compositeDebt\\n        );\\n\\n        if (isRecoveryMode) {\\n            _requireICRisAboveCCR(vars.ICR);\\n        } else {\\n            _requireICRisAboveMCR(vars.ICR);\\n            uint256 newTCR = _getNewTCRFromTroveChange(\\n                _assetAmount,\\n                true,\\n                vars.compositeDebt,\\n                true,\\n                vars.price\\n            ); // bools: coll increase, debt increase\\n            _requireNewTCRisAboveCCR(newTCR);\\n        }\\n\\n        contractsCache.troveManager.setTroveInterestRate(\\n            msg.sender,\\n            contractsCache.interestRateManager.interestRate()\\n        );\\n\\n        // Set the trove struct's properties\\n        contractsCache.troveManager.setTroveStatus(\\n            msg.sender,\\n            ITroveManager.Status.active\\n        );\\n        // slither-disable-next-line unused-return\\n        contractsCache.troveManager.increaseTroveColl(msg.sender, _assetAmount);\\n        // slither-disable-next-line unused-return\\n        contractsCache.troveManager.increaseTroveDebt(\\n            msg.sender,\\n            vars.compositeDebt\\n        );\\n\\n        // solhint-disable not-rely-on-time\\n        contractsCache.troveManager.setTroveLastInterestUpdateTime(\\n            msg.sender,\\n            block.timestamp\\n        );\\n        // solhint-enable not-rely-on-time\\n\\n        // Set trove's max borrowing capacity to the amount that would put it at 110% ICR\\n        uint256 maxBorrowingCapacity = _calculateMaxBorrowingCapacity(\\n            _assetAmount,\\n            vars.price\\n        );\\n        contractsCache.troveManager.setTroveMaxBorrowingCapacity(\\n            msg.sender,\\n            maxBorrowingCapacity\\n        );\\n\\n        contractsCache.troveManager.updateTroveRewardSnapshots(msg.sender);\\n        vars.stake = contractsCache.troveManager.updateStakeAndTotalStakes(\\n            msg.sender\\n        );\\n\\n        sortedTroves.insert(msg.sender, vars.NICR, _upperHint, _lowerHint);\\n        vars.arrayIndex = contractsCache.troveManager.addTroveOwnerToArray(\\n            msg.sender\\n        );\\n        // slither-disable-next-line reentrancy-events\\n        emit TroveCreated(msg.sender, vars.arrayIndex);\\n\\n        /*\\n         * Move the collateral to the Active Pool, and mint the amount to the borrower\\n         * If the user has insuffient tokens to do the transfer to the Active Pool an error will cause the transaction to revert.\\n         */\\n        _activePoolAddColl(contractsCache.activePool, _assetAmount);\\n        _withdrawMUSD(\\n            contractsCache.activePool,\\n            contractsCache.musd,\\n            msg.sender,\\n            _debtAmount,\\n            vars.netDebt\\n        );\\n        // Move the mUSD gas compensation to the Gas Pool\\n        _withdrawMUSD(\\n            contractsCache.activePool,\\n            contractsCache.musd,\\n            gasPoolAddress,\\n            MUSD_GAS_COMPENSATION,\\n            MUSD_GAS_COMPENSATION\\n        );\\n\\n        emit TroveUpdated(\\n            msg.sender,\\n            vars.compositeDebt,\\n            0,\\n            _assetAmount,\\n            vars.stake,\\n            uint8(BorrowerOperation.openTrove)\\n        );\\n        emit BorrowingFeePaid(msg.sender, vars.fee);\\n    }\\n\\n    // Send collateral to a trove\\n    function addColl(\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable override {\\n        _assetAmount = getAssetAmount(_assetAmount);\\n        _adjustTrove(\\n            msg.sender,\\n            0,\\n            0,\\n            false,\\n            _assetAmount,\\n            _upperHint,\\n            _lowerHint,\\n            0\\n        );\\n    }\\n\\n    // Send collateral to a trove. Called by only the Stability Pool.\\n    function moveCollateralGainToTrove(\\n        address _borrower,\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable override {\\n        _requireCallerIsStabilityPool();\\n        _assetAmount = getAssetAmount(_assetAmount);\\n        _adjustTrove(\\n            _borrower,\\n            0,\\n            0,\\n            false,\\n            _assetAmount,\\n            _upperHint,\\n            _lowerHint,\\n            0\\n        );\\n    }\\n\\n    // Withdraw collateral from a trove\\n    function withdrawColl(\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external override {\\n        _adjustTrove(\\n            msg.sender,\\n            _amount,\\n            0,\\n            false,\\n            0,\\n            _upperHint,\\n            _lowerHint,\\n            0\\n        );\\n    }\\n\\n    // Withdraw mUSD tokens from a trove: mint new mUSD tokens to the owner, and increase the trove's principal accordingly\\n    function withdrawMUSD(\\n        uint256 _maxFeePercentage,\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external override {\\n        _adjustTrove(\\n            msg.sender,\\n            0,\\n            _amount,\\n            true,\\n            0,\\n            _upperHint,\\n            _lowerHint,\\n            _maxFeePercentage\\n        );\\n    }\\n\\n    // Repay mUSD tokens to a Trove: Burn the repaid mUSD tokens, and reduce the trove's debt accordingly\\n    function repayMUSD(\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external override {\\n        _adjustTrove(\\n            msg.sender,\\n            0,\\n            _amount,\\n            false,\\n            0,\\n            _upperHint,\\n            _lowerHint,\\n            0\\n        );\\n    }\\n\\n    function closeTrove() external override {\\n        ITroveManager troveManagerCached = troveManager;\\n        IActivePool activePoolCached = activePool;\\n        IMUSD musdTokenCached = musd;\\n        bool canMint = musdTokenCached.mintList(address(this));\\n\\n        troveManagerCached.updateSystemAndTroveInterest(msg.sender);\\n\\n        _requireTroveisActive(troveManagerCached, msg.sender);\\n        uint256 price = priceFeed.fetchPrice();\\n        if (canMint) {\\n            _requireNotInRecoveryMode(price);\\n        }\\n\\n        troveManagerCached.applyPendingRewards(msg.sender);\\n\\n        uint256 coll = troveManagerCached.getTroveColl(msg.sender);\\n        uint256 debt = troveManagerCached.getTroveDebt(msg.sender);\\n        uint256 interestOwed = troveManagerCached.getTroveInterestOwed(\\n            msg.sender\\n        );\\n\\n        _requireSufficientMUSDBalance(\\n            musdTokenCached,\\n            msg.sender,\\n            debt - MUSD_GAS_COMPENSATION\\n        );\\n        if (canMint) {\\n            uint256 newTCR = _getNewTCRFromTroveChange(\\n                coll,\\n                false,\\n                debt,\\n                false,\\n                price\\n            );\\n            _requireNewTCRisAboveCCR(newTCR);\\n        }\\n\\n        troveManagerCached.removeStake(msg.sender);\\n        troveManagerCached.closeTrove(msg.sender);\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit TroveUpdated(\\n            msg.sender,\\n            0,\\n            0,\\n            0,\\n            0,\\n            uint8(BorrowerOperation.closeTrove)\\n        );\\n\\n        // Decrease the active pool debt by the principal (subtracting interestOwed from the total debt)\\n        activePoolCached.decreaseDebt(\\n            debt - MUSD_GAS_COMPENSATION - interestOwed,\\n            interestOwed\\n        );\\n\\n        // Burn the repaid mUSD from the user's balance\\n        musdTokenCached.burn(msg.sender, debt - MUSD_GAS_COMPENSATION);\\n\\n        // Burn the gas compensation from the gas pool\\n        _repayMUSD(\\n            activePoolCached,\\n            musdTokenCached,\\n            gasPoolAddress,\\n            MUSD_GAS_COMPENSATION,\\n            0\\n        );\\n\\n        // Send the collateral back to the user\\n        activePoolCached.sendCollateral(msg.sender, coll);\\n    }\\n\\n    function refinance(uint256 _maxFeePercentage) external override {\\n        ITroveManager troveManagerCached = troveManager;\\n        IInterestRateManager interestRateManagerCached = interestRateManager;\\n        _requireTroveisActive(troveManagerCached, msg.sender);\\n        troveManagerCached.updateSystemAndTroveInterest(msg.sender);\\n\\n        uint16 oldRate = troveManagerCached.getTroveInterestRate(msg.sender);\\n        uint256 oldInterest = troveManagerCached.getTroveInterestOwed(\\n            msg.sender\\n        );\\n        uint256 oldDebt = troveManagerCached.getTroveDebt(msg.sender);\\n        uint256 amount = (refinancingFeePercentage * oldDebt) / 100;\\n        uint256 fee = _triggerBorrowingFee(\\n            troveManagerCached,\\n            musd,\\n            amount,\\n            _maxFeePercentage\\n        );\\n        // slither-disable-next-line unused-return\\n        troveManagerCached.increaseTroveDebt(msg.sender, fee);\\n\\n        uint256 oldPrincipal = troveManagerCached.getTrovePrincipal(msg.sender);\\n\\n        interestRateManagerCached.removeInterestFromRate(oldRate, oldInterest);\\n        interestRateManagerCached.removePrincipalFromRate(\\n            oldRate,\\n            oldPrincipal\\n        );\\n        uint16 newRate = interestRateManagerCached.interestRate();\\n        interestRateManagerCached.addInterestToRate(newRate, oldInterest);\\n        interestRateManagerCached.addPrincipalToRate(newRate, oldPrincipal);\\n\\n        troveManagerCached.setTroveInterestRate(\\n            msg.sender,\\n            interestRateManagerCached.interestRate()\\n        );\\n\\n        uint256 maxBorrowingCapacity = _calculateMaxBorrowingCapacity(\\n            troveManagerCached.getTroveColl(msg.sender),\\n            priceFeed.fetchPrice()\\n        );\\n        troveManagerCached.setTroveMaxBorrowingCapacity(\\n            msg.sender,\\n            maxBorrowingCapacity\\n        );\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit RefinancingFeePaid(msg.sender, fee);\\n    }\\n\\n    function adjustTrove(\\n        uint256 _maxFeePercentage,\\n        uint256 _collWithdrawal,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease,\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable override {\\n        _assetAmount = getAssetAmount(_assetAmount);\\n        _adjustTrove(\\n            msg.sender,\\n            _collWithdrawal,\\n            _debtChange,\\n            _isDebtIncrease,\\n            _assetAmount,\\n            _upperHint,\\n            _lowerHint,\\n            _maxFeePercentage\\n        );\\n    }\\n\\n    // Claim remaining collateral from a redemption or from a liquidation with ICR > MCR in Recovery Mode\\n    function claimCollateral() external override {\\n        // send collateral from CollSurplus Pool to owner\\n        collSurplusPool.claimColl(msg.sender);\\n    }\\n\\n    function setAddresses(\\n        address _activePoolAddress,\\n        address _collateralAddress,\\n        address _collSurplusPoolAddress,\\n        address _defaultPoolAddress,\\n        address _gasPoolAddress,\\n        address _interestRateManagerAddress,\\n        address _musdTokenAddress,\\n        address _pcvAddress,\\n        address _priceFeedAddress,\\n        address _stabilityPoolAddress,\\n        address _sortedTrovesAddress,\\n        address _troveManagerAddress\\n    ) external override onlyOwner {\\n        // This makes impossible to open a trove with zero withdrawn mUSD\\n        assert(MIN_NET_DEBT > 0);\\n\\n        checkContract(_activePoolAddress);\\n        if (_collateralAddress != address(0)) {\\n            checkContract(_collateralAddress);\\n        }\\n        checkContract(_collSurplusPoolAddress);\\n        checkContract(_defaultPoolAddress);\\n        checkContract(_gasPoolAddress);\\n        checkContract(_musdTokenAddress);\\n        checkContract(_pcvAddress);\\n        checkContract(_priceFeedAddress);\\n        checkContract(_stabilityPoolAddress);\\n        checkContract(_sortedTrovesAddress);\\n        checkContract(_troveManagerAddress);\\n        checkContract(_interestRateManagerAddress);\\n\\n        troveManager = ITroveManager(_troveManagerAddress);\\n        activePool = IActivePool(_activePoolAddress);\\n        defaultPool = IDefaultPool(_defaultPoolAddress);\\n        // slither-disable-next-line missing-zero-check\\n        stabilityPoolAddress = _stabilityPoolAddress;\\n        // slither-disable-next-line missing-zero-check\\n        gasPoolAddress = _gasPoolAddress;\\n        collSurplusPool = ICollSurplusPool(_collSurplusPoolAddress);\\n        priceFeed = IPriceFeed(_priceFeedAddress);\\n        sortedTroves = ISortedTroves(_sortedTrovesAddress);\\n        musd = IMUSD(_musdTokenAddress);\\n        pcv = IPCV(_pcvAddress);\\n        // slither-disable-next-line missing-zero-check\\n        pcvAddress = _pcvAddress;\\n        // slither-disable-next-line missing-zero-check\\n        collateralAddress = _collateralAddress;\\n        interestRateManager = IInterestRateManager(_interestRateManagerAddress);\\n\\n        require(\\n            (Ownable(_defaultPoolAddress).owner() != address(0) ||\\n                defaultPool.collateralAddress() == _collateralAddress) &&\\n                (Ownable(_activePoolAddress).owner() != address(0) ||\\n                    activePool.collateralAddress() == _collateralAddress) &&\\n                (Ownable(_stabilityPoolAddress).owner() != address(0) ||\\n                    IStabilityPool(stabilityPoolAddress).collateralAddress() ==\\n                    _collateralAddress) &&\\n                (Ownable(_collSurplusPoolAddress).owner() != address(0) ||\\n                    collSurplusPool.collateralAddress() ==\\n                    _collateralAddress) &&\\n                (address(IPCV(pcvAddress).musd()) == address(0) ||\\n                    address(IPCV(pcvAddress).collateralERC20()) ==\\n                    _collateralAddress),\\n            \\\"The same collateral address must be used for the entire set of contracts\\\"\\n        );\\n\\n        emit TroveManagerAddressChanged(_troveManagerAddress);\\n        emit ActivePoolAddressChanged(_activePoolAddress);\\n        emit DefaultPoolAddressChanged(_defaultPoolAddress);\\n        emit StabilityPoolAddressChanged(_stabilityPoolAddress);\\n        emit GasPoolAddressChanged(_gasPoolAddress);\\n        emit CollSurplusPoolAddressChanged(_collSurplusPoolAddress);\\n        emit PriceFeedAddressChanged(_priceFeedAddress);\\n        emit SortedTrovesAddressChanged(_sortedTrovesAddress);\\n        emit MUSDTokenAddressChanged(_musdTokenAddress);\\n        emit PCVAddressChanged(_pcvAddress);\\n        emit CollateralAddressChanged(_collateralAddress);\\n\\n        renounceOwnership();\\n    }\\n\\n    function setRefinancingFeePercentage(\\n        uint8 _refinanceFeePercentage\\n    ) external override onlyGovernance {\\n        require(\\n            _refinanceFeePercentage <= 100,\\n            \\\"BorrowerOps: Refinancing fee percentage must be <= 100\\\"\\n        );\\n        refinancingFeePercentage = _refinanceFeePercentage;\\n    }\\n\\n    function getCompositeDebt(\\n        uint256 _debt\\n    ) external pure override returns (uint) {\\n        return _getCompositeDebt(_debt);\\n    }\\n\\n    /*\\n     * _adjustTrove(): Alongside a debt change, this function can perform either a collateral top-up or a collateral withdrawal.\\n     *\\n     * It therefore expects either a positive msg.value, or a positive _collWithdrawal argument.\\n     *\\n     * If both are positive, it will revert.\\n     */\\n    function _adjustTrove(\\n        address _borrower,\\n        uint256 _collWithdrawal,\\n        uint256 _mUSDChange,\\n        bool _isDebtIncrease,\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint,\\n        uint256 _maxFeePercentage\\n    ) internal {\\n        ContractsCache memory contractsCache = ContractsCache(\\n            troveManager,\\n            activePool,\\n            musd,\\n            interestRateManager\\n        );\\n\\n        contractsCache.troveManager.updateSystemAndTroveInterest(_borrower);\\n\\n        // slither-disable-next-line uninitialized-local\\n        LocalVariables_adjustTrove memory vars;\\n\\n        // Snapshot interest and principal before repayment so we can correctly adjust the active pool\\n        vars.interestOwed = contractsCache.troveManager.getTroveInterestOwed(\\n            _borrower\\n        );\\n\\n        (vars.principalAdjustment, vars.interestAdjustment) = contractsCache\\n            .interestRateManager\\n            .calculateDebtAdjustment(vars.interestOwed, _mUSDChange);\\n\\n        vars.price = priceFeed.fetchPrice();\\n        vars.isRecoveryMode = _checkRecoveryMode(vars.price);\\n\\n        if (_isDebtIncrease) {\\n            _requireValidMaxFeePercentage(\\n                _maxFeePercentage,\\n                vars.isRecoveryMode\\n            );\\n            _requireNonZeroDebtChange(_mUSDChange);\\n        }\\n        _requireSingularCollChange(_collWithdrawal, _assetAmount);\\n        _requireNonZeroAdjustment(_collWithdrawal, _mUSDChange, _assetAmount);\\n        _requireTroveisActive(contractsCache.troveManager, _borrower);\\n\\n        // Confirm the operation is either a borrower adjusting their own trove, or a pure collateral transfer from the Stability Pool to a trove\\n        assert(\\n            msg.sender == _borrower ||\\n                (msg.sender == stabilityPoolAddress &&\\n                    _assetAmount > 0 &&\\n                    _mUSDChange == 0)\\n        );\\n\\n        contractsCache.troveManager.applyPendingRewards(_borrower);\\n\\n        // Get the collChange based on whether or not collateral was sent in the transaction\\n        (vars.collChange, vars.isCollIncrease) = _getCollChange(\\n            _assetAmount,\\n            _collWithdrawal\\n        );\\n\\n        vars.netDebtChange = _mUSDChange;\\n\\n        // If the adjustment incorporates a principal increase and system is in Normal Mode, then trigger a borrowing fee\\n        if (_isDebtIncrease && !vars.isRecoveryMode) {\\n            vars.fee = _triggerBorrowingFee(\\n                contractsCache.troveManager,\\n                contractsCache.musd,\\n                _mUSDChange,\\n                _maxFeePercentage\\n            );\\n            vars.netDebtChange += vars.fee; // The raw debt change includes the fee\\n        }\\n\\n        vars.debt = contractsCache.troveManager.getTroveDebt(_borrower);\\n        vars.coll = contractsCache.troveManager.getTroveColl(_borrower);\\n\\n        // Get the trove's old ICR before the adjustment, and what its new ICR will be after the adjustment\\n        vars.oldICR = LiquityMath._computeCR(vars.coll, vars.debt, vars.price);\\n        vars.newICR = _getNewICRFromTroveChange(\\n            vars.coll,\\n            vars.debt,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            vars.netDebtChange,\\n            _isDebtIncrease,\\n            vars.price\\n        );\\n        assert(_collWithdrawal <= vars.coll);\\n\\n        // Check the adjustment satisfies all conditions for the current system mode\\n        _requireValidAdjustmentInCurrentMode(\\n            vars.isRecoveryMode,\\n            _collWithdrawal,\\n            _isDebtIncrease,\\n            vars\\n        );\\n\\n        // When the adjustment is a debt repayment, check it's a valid amount and that the caller has enough mUSD\\n        if (!_isDebtIncrease && _mUSDChange > 0) {\\n            _requireAtLeastMinNetDebt(\\n                _getNetDebt(vars.debt) - vars.netDebtChange\\n            );\\n            _requireValidMUSDRepayment(vars.debt, vars.netDebtChange);\\n            _requireSufficientMUSDBalance(\\n                contractsCache.musd,\\n                _borrower,\\n                vars.netDebtChange\\n            );\\n        }\\n\\n        (\\n            vars.newColl,\\n            vars.newPrincipal,\\n            vars.newInterest\\n        ) = _updateTroveFromAdjustment(\\n            contractsCache.troveManager,\\n            _borrower,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            vars.netDebtChange,\\n            _isDebtIncrease\\n        );\\n        vars.stake = contractsCache.troveManager.updateStakeAndTotalStakes(\\n            _borrower\\n        );\\n\\n        // Re-insert trove in to the sorted list\\n        uint256 newNICR = _getNewNominalICRFromTroveChange(\\n            vars.coll,\\n            vars.debt,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            vars.netDebtChange,\\n            _isDebtIncrease\\n        );\\n        sortedTroves.reInsert(_borrower, newNICR, _upperHint, _lowerHint);\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit TroveUpdated(\\n            _borrower,\\n            vars.newPrincipal,\\n            vars.newInterest,\\n            vars.newColl,\\n            vars.stake,\\n            uint8(BorrowerOperation.adjustTrove)\\n        );\\n        // slither-disable-next-line reentrancy-events\\n        emit BorrowingFeePaid(msg.sender, vars.fee);\\n\\n        // Use the unmodified _mUSDChange here, as we don't send the fee to the user\\n        _moveTokensAndCollateralfromAdjustment(\\n            contractsCache.activePool,\\n            contractsCache.musd,\\n            msg.sender,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            _isDebtIncrease ? _mUSDChange : vars.principalAdjustment,\\n            vars.interestAdjustment,\\n            _isDebtIncrease,\\n            vars.netDebtChange\\n        );\\n    }\\n\\n    // Issue the specified amount of mUSD to _account and increases the total active debt (_netDebtIncrease potentially includes a MUSDFee)\\n    function _withdrawMUSD(\\n        IActivePool _activePool,\\n        IMUSD _musd,\\n        address _account,\\n        uint256 _debtAmount,\\n        uint256 _netDebtIncrease\\n    ) internal {\\n        _activePool.increaseDebt(_netDebtIncrease, 0);\\n        _musd.mint(_account, _debtAmount);\\n    }\\n\\n    // Burn the specified amount of MUSD from _account and decreases the total active debt\\n    function _repayMUSD(\\n        IActivePool _activePool,\\n        IMUSD _musd,\\n        address _account,\\n        uint256 _principal,\\n        uint256 _interest\\n    ) internal {\\n        _activePool.decreaseDebt(_principal, _interest);\\n        _musd.burn(_account, _principal + _interest);\\n    }\\n\\n    function _moveTokensAndCollateralfromAdjustment(\\n        IActivePool _activePool,\\n        IMUSD _musd,\\n        address _borrower,\\n        uint256 _collChange,\\n        bool _isCollIncrease,\\n        uint256 _principalChange,\\n        uint256 _interestChange,\\n        bool _isDebtIncrease,\\n        uint256 _netDebtChange\\n    ) internal {\\n        if (_isDebtIncrease) {\\n            _withdrawMUSD(\\n                _activePool,\\n                _musd,\\n                _borrower,\\n                _principalChange,\\n                _netDebtChange\\n            );\\n        } else {\\n            _repayMUSD(\\n                _activePool,\\n                _musd,\\n                _borrower,\\n                _principalChange,\\n                _interestChange\\n            );\\n        }\\n\\n        if (_isCollIncrease) {\\n            _activePoolAddColl(_activePool, _collChange);\\n        } else {\\n            _activePool.sendCollateral(_borrower, _collChange);\\n        }\\n    }\\n\\n    // Send collateral to Active Pool and increase its recorded collateral balance\\n    function _activePoolAddColl(\\n        IActivePool _activePool,\\n        uint256 _amount\\n    ) internal {\\n        sendCollateralFrom(\\n            IERC20(collateralAddress),\\n            msg.sender,\\n            address(_activePool),\\n            _amount\\n        );\\n    }\\n\\n    // Update trove's coll and debt based on whether they increase or decrease\\n    function _updateTroveFromAdjustment(\\n        ITroveManager _troveManager,\\n        address _borrower,\\n        uint256 _collChange,\\n        bool _isCollIncrease,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease\\n    )\\n        internal\\n        returns (uint256 newColl, uint256 newPrincipal, uint256 newInterest)\\n    {\\n        newColl = (_isCollIncrease)\\n            ? _troveManager.increaseTroveColl(_borrower, _collChange)\\n            : _troveManager.decreaseTroveColl(_borrower, _collChange);\\n\\n        if (_isDebtIncrease) {\\n            newPrincipal = _troveManager.increaseTroveDebt(\\n                _borrower,\\n                _debtChange\\n            );\\n        } else {\\n            (newPrincipal, newInterest) = _troveManager.decreaseTroveDebt(\\n                _borrower,\\n                _debtChange\\n            );\\n        }\\n    }\\n\\n    // --- Helper functions ---\\n\\n    function _triggerBorrowingFee(\\n        ITroveManager _troveManager,\\n        IMUSD _musd,\\n        uint256 _amount,\\n        uint256 _maxFeePercentage\\n    ) internal returns (uint) {\\n        _troveManager.decayBaseRateFromBorrowing(); // decay the baseRate state variable\\n        uint256 fee = _troveManager.getBorrowingFee(_amount);\\n\\n        _requireUserAcceptsFee(fee, _amount, _maxFeePercentage);\\n\\n        // Send fee to PCV contract\\n        _musd.mint(pcvAddress, fee);\\n        return fee;\\n    }\\n\\n    function getAssetAmount(\\n        uint256 _assetAmount\\n    ) internal view returns (uint256) {\\n        if (collateralAddress == address(0)) {\\n            return msg.value;\\n        }\\n\\n        require(\\n            msg.value == 0,\\n            \\\"BorrowerOperations: ERC20 collateral needed, not BTC\\\"\\n        );\\n        return _assetAmount;\\n    }\\n\\n    function _requireNotInRecoveryMode(uint256 _price) internal view {\\n        require(\\n            !_checkRecoveryMode(_price),\\n            \\\"BorrowerOps: Operation not permitted during Recovery Mode\\\"\\n        );\\n    }\\n\\n    function _requireTroveisNotActive(\\n        ITroveManager _troveManager,\\n        address _borrower\\n    ) internal view {\\n        ITroveManager.Status status = _troveManager.getTroveStatus(_borrower);\\n        require(\\n            status != ITroveManager.Status.active,\\n            \\\"BorrowerOps: Trove is active\\\"\\n        );\\n    }\\n\\n    function _getNewTCRFromTroveChange(\\n        uint256 _collChange,\\n        bool _isCollIncrease,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease,\\n        uint256 _price\\n    ) internal view returns (uint) {\\n        uint256 totalColl = getEntireSystemColl();\\n        uint256 totalDebt = getEntireSystemDebt();\\n\\n        totalColl = _isCollIncrease\\n            ? totalColl + _collChange\\n            : totalColl - _collChange;\\n        totalDebt = _isDebtIncrease\\n            ? totalDebt + _debtChange\\n            : totalDebt - _debtChange;\\n\\n        uint256 newTCR = LiquityMath._computeCR(totalColl, totalDebt, _price);\\n        return newTCR;\\n    }\\n\\n    function _requireCallerIsStabilityPool() internal view {\\n        require(\\n            msg.sender == stabilityPoolAddress,\\n            \\\"BorrowerOps: Caller is not Stability Pool\\\"\\n        );\\n    }\\n\\n    function _requireTroveisActive(\\n        ITroveManager _troveManager,\\n        address _borrower\\n    ) internal view {\\n        ITroveManager.Status status = _troveManager.getTroveStatus(_borrower);\\n\\n        require(\\n            status == ITroveManager.Status.active,\\n            \\\"BorrowerOps: Trove does not exist or is closed\\\"\\n        );\\n    }\\n\\n    /*\\n     * In Normal Mode, ensure:\\n     *\\n     * - The new ICR is above MCR\\n     * - The adjustment won't pull the TCR below CCR\\n     */\\n    function _requireValidAdjustmentInNormalMode(\\n        bool _isDebtIncrease,\\n        LocalVariables_adjustTrove memory _vars\\n    ) internal view {\\n        _requireICRisAboveMCR(_vars.newICR);\\n        _vars.newTCR = _getNewTCRFromTroveChange(\\n            _vars.collChange,\\n            _vars.isCollIncrease,\\n            _vars.netDebtChange,\\n            _isDebtIncrease,\\n            _vars.price\\n        );\\n        _requireNewTCRisAboveCCR(_vars.newTCR);\\n    }\\n\\n    function _requireValidAdjustmentInCurrentMode(\\n        bool _isRecoveryMode,\\n        uint256 _collWithdrawal,\\n        bool _isDebtIncrease,\\n        LocalVariables_adjustTrove memory _vars\\n    ) internal view {\\n        if (_isRecoveryMode) {\\n            _requireValidAdjustmentInRecoveryMode(\\n                _collWithdrawal,\\n                _isDebtIncrease,\\n                _vars\\n            );\\n        } else {\\n            _requireValidAdjustmentInNormalMode(_isDebtIncrease, _vars);\\n        }\\n    }\\n\\n    function _requireSufficientMUSDBalance(\\n        IMUSD _musd,\\n        address _borrower,\\n        uint256 _debtRepayment\\n    ) internal view {\\n        require(\\n            _musd.balanceOf(_borrower) >= _debtRepayment,\\n            \\\"BorrowerOps: Caller doesnt have enough mUSD to make repayment\\\"\\n        );\\n    }\\n\\n    /*\\n     * In Recovery Mode, only allow:\\n     *\\n     * - Pure collateral top-up\\n     * - Pure debt repayment\\n     * - Collateral top-up with debt repayment\\n     * - A debt increase combined with a collateral top-up which makes the ICR\\n     * >= 150% and improves the ICR (and by extension improves the TCR).\\n     */\\n    function _requireValidAdjustmentInRecoveryMode(\\n        uint256 _collWithdrawal,\\n        bool _isDebtIncrease,\\n        LocalVariables_adjustTrove memory _vars\\n    ) internal pure {\\n        _requireNoCollWithdrawal(_collWithdrawal);\\n        if (_isDebtIncrease) {\\n            _requireICRisAboveCCR(_vars.newICR);\\n            _requireNewICRisAboveOldICR(_vars.newICR, _vars.oldICR);\\n        }\\n    }\\n\\n    function _getCollChange(\\n        uint256 _collReceived,\\n        uint256 _requestedCollWithdrawal\\n    ) internal pure returns (uint256 collChange, bool isCollIncrease) {\\n        if (_collReceived != 0) {\\n            collChange = _collReceived;\\n            isCollIncrease = true;\\n        } else {\\n            collChange = _requestedCollWithdrawal;\\n        }\\n    }\\n\\n    // Compute the new collateral ratio, considering the change in coll and debt. Assumes 0 pending rewards.\\n    function _getNewICRFromTroveChange(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint256 _collChange,\\n        bool _isCollIncrease,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease,\\n        uint256 _price\\n    ) internal pure returns (uint) {\\n        (uint256 newColl, uint256 newDebt) = _getNewTroveAmounts(\\n            _coll,\\n            _debt,\\n            _collChange,\\n            _isCollIncrease,\\n            _debtChange,\\n            _isDebtIncrease\\n        );\\n        uint256 newICR = LiquityMath._computeCR(newColl, newDebt, _price);\\n        return newICR;\\n    }\\n\\n    function _getNewTroveAmounts(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint256 _collChange,\\n        bool _isCollIncrease,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease\\n    ) internal pure returns (uint newColl, uint newDebt) {\\n        newColl = _isCollIncrease ? _coll + _collChange : _coll - _collChange;\\n        newDebt = _isDebtIncrease ? _debt + _debtChange : _debt - _debtChange;\\n    }\\n\\n    // Compute the new collateral ratio, considering the change in coll and debt. Assumes 0 pending rewards.\\n    function _getNewNominalICRFromTroveChange(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint256 _collChange,\\n        bool _isCollIncrease,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease\\n    ) internal pure returns (uint) {\\n        (uint256 newColl, uint256 newDebt) = _getNewTroveAmounts(\\n            _coll,\\n            _debt,\\n            _collChange,\\n            _isCollIncrease,\\n            _debtChange,\\n            _isDebtIncrease\\n        );\\n\\n        return LiquityMath._computeNominalCR(newColl, newDebt);\\n    }\\n\\n    function _calculateMaxBorrowingCapacity(\\n        uint256 _coll,\\n        uint256 _price\\n    ) internal pure returns (uint) {\\n        return (_coll * _price) / (110 * 1e16);\\n    }\\n\\n    function _requireValidMaxFeePercentage(\\n        uint256 _maxFeePercentage,\\n        bool _isRecoveryMode\\n    ) internal pure {\\n        if (_isRecoveryMode) {\\n            require(\\n                _maxFeePercentage <= DECIMAL_PRECISION,\\n                \\\"Max fee percentage must be less than or equal to 100%\\\"\\n            );\\n        } else {\\n            require(\\n                _maxFeePercentage >= BORROWING_FEE_FLOOR &&\\n                    _maxFeePercentage <= DECIMAL_PRECISION,\\n                \\\"Max fee percentage must be between 0.5% and 100%\\\"\\n            );\\n        }\\n    }\\n\\n    function _requireAtLeastMinNetDebt(uint256 _netDebt) internal pure {\\n        require(\\n            _netDebt >= MIN_NET_DEBT,\\n            \\\"BorrowerOps: Trove's net debt must be greater than minimum\\\"\\n        );\\n    }\\n\\n    function _requireICRisAboveMCR(uint256 _newICR) internal pure {\\n        require(\\n            _newICR >= MCR,\\n            \\\"BorrowerOps: An operation that would result in ICR < MCR is not permitted\\\"\\n        );\\n    }\\n\\n    function _requireICRisAboveCCR(uint256 _newICR) internal pure {\\n        require(\\n            _newICR >= CCR,\\n            \\\"BorrowerOps: Operation must leave trove with ICR >= CCR\\\"\\n        );\\n    }\\n\\n    function _requireNewTCRisAboveCCR(uint256 _newTCR) internal pure {\\n        require(\\n            _newTCR >= CCR,\\n            \\\"BorrowerOps: An operation that would result in TCR < CCR is not permitted\\\"\\n        );\\n    }\\n\\n    function _requireNonZeroDebtChange(uint256 _debtChange) internal pure {\\n        require(\\n            _debtChange > 0,\\n            \\\"BorrowerOps: Debt increase requires non-zero debtChange\\\"\\n        );\\n    }\\n\\n    function _requireSingularCollChange(\\n        uint256 _collWithdrawal,\\n        uint256 _assetAmount\\n    ) internal pure {\\n        require(\\n            _assetAmount == 0 || _collWithdrawal == 0,\\n            \\\"BorrowerOperations: Cannot withdraw and add coll\\\"\\n        );\\n    }\\n\\n    function _requireNonZeroAdjustment(\\n        uint256 _collWithdrawal,\\n        uint256 _debtChange,\\n        uint256 _assetAmount\\n    ) internal pure {\\n        require(\\n            _assetAmount != 0 || _collWithdrawal != 0 || _debtChange != 0,\\n            \\\"BorrowerOps: There must be either a collateral change or a debt change\\\"\\n        );\\n    }\\n\\n    function _requireNoCollWithdrawal(uint256 _collWithdrawal) internal pure {\\n        require(\\n            _collWithdrawal == 0,\\n            \\\"BorrowerOps: Collateral withdrawal not permitted Recovery Mode\\\"\\n        );\\n    }\\n\\n    function _requireNewICRisAboveOldICR(\\n        uint256 _newICR,\\n        uint256 _oldICR\\n    ) internal pure {\\n        require(\\n            _newICR >= _oldICR,\\n            \\\"BorrowerOps: Cannot decrease your Trove's ICR in Recovery Mode\\\"\\n        );\\n    }\\n\\n    function _requireValidMUSDRepayment(\\n        uint256 _currentDebt,\\n        uint256 _debtRepayment\\n    ) internal pure {\\n        require(\\n            _debtRepayment <= _currentDebt - MUSD_GAS_COMPENSATION,\\n            \\\"BorrowerOps: Amount repaid must not be larger than the Trove's debt\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xdea53c26346713b5e8b84a2077d19f2cc1795dfda6a42b48e2bb45423da1a07f\",\"license\":\"MIT\"},\"contracts/dependencies/BaseMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract BaseMath {\\n    uint256 public constant DECIMAL_PRECISION = 1e18;\\n}\\n\",\"keccak256\":\"0x54fab55b6128e51d2ffa3d2b726ce6f08fe5447b41a4880d195bfc7fcd66429f\",\"license\":\"MIT\"},\"contracts/dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\ncontract CheckContract {\\n    /**\\n     * Check that the account is an already deployed non-destroyed contract.\\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n     */\\n    function checkContract(address _account) internal view {\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(_account)\\n        }\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xab260c88c1d2f0ffbbd5d43c4a1df5e48132678e67fc24b65fa2d823f97cbc32\",\"license\":\"MIT\"},\"contracts/dependencies/LiquityBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./BaseMath.sol\\\";\\nimport \\\"./LiquityMath.sol\\\";\\nimport \\\"../interfaces/IActivePool.sol\\\";\\nimport \\\"../interfaces/IDefaultPool.sol\\\";\\nimport \\\"../interfaces/IPriceFeed.sol\\\";\\nimport \\\"../interfaces/ILiquityBase.sol\\\";\\n\\n/*\\n * Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\n * common functions.\\n */\\nabstract contract LiquityBase is BaseMath, ILiquityBase {\\n    uint256 public constant _100pct = 1e18; // 1e18 == 100%\\n\\n    // Minimum collateral ratio for individual troves\\n    uint256 public constant MCR = 1.1e18; // 110%\\n\\n    // Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n    uint256 public constant CCR = 1.5e18; // 150%\\n\\n    // Amount of mUSD to be locked in gas pool on opening troves\\n    uint256 public constant MUSD_GAS_COMPENSATION = 200e18;\\n\\n    // Minimum amount of net mUSD debt a trove must have\\n    uint256 public constant MIN_NET_DEBT = 1800e18;\\n    // uint256 constant public MIN_NET_DEBT = 0;\\n\\n    uint256 public constant PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\n\\n    uint256 public constant BORROWING_FEE_FLOOR = ((DECIMAL_PRECISION * 5) /\\n        1000); // 0.5%\\n\\n    // slither-disable-next-line all\\n    IActivePool public activePool;\\n\\n    // slither-disable-next-line all\\n    IDefaultPool public defaultPool;\\n\\n    // slither-disable-next-line all\\n    IPriceFeed public override priceFeed;\\n\\n    // --- Gas compensation functions ---\\n\\n    function getEntireSystemColl()\\n        public\\n        view\\n        returns (uint256 entireSystemColl)\\n    {\\n        uint256 activeColl = activePool.getCollateralBalance();\\n        uint256 liquidatedColl = defaultPool.getCollateralBalance();\\n\\n        return activeColl + liquidatedColl;\\n    }\\n\\n    function getEntireSystemDebt()\\n        public\\n        view\\n        returns (uint256 entireSystemDebt)\\n    {\\n        uint256 activeDebt = activePool.getDebt();\\n        uint256 closedDebt = defaultPool.getDebt();\\n\\n        return activeDebt + closedDebt;\\n    }\\n\\n    function _getTCR(uint256 _price) internal view returns (uint256 TCR) {\\n        uint256 entireSystemColl = getEntireSystemColl();\\n        uint256 entireSystemDebt = getEntireSystemDebt();\\n\\n        TCR = LiquityMath._computeCR(\\n            entireSystemColl,\\n            entireSystemDebt,\\n            _price\\n        );\\n        return TCR;\\n    }\\n\\n    function _checkRecoveryMode(uint256 _price) internal view returns (bool) {\\n        uint256 TCR = _getTCR(_price);\\n        return TCR < CCR;\\n    }\\n\\n    function _requireUserAcceptsFee(\\n        uint256 _fee,\\n        uint256 _amount,\\n        uint256 _maxFeePercentage\\n    ) internal pure {\\n        uint256 feePercentage = (_fee * DECIMAL_PRECISION) / _amount;\\n        require(\\n            feePercentage <= _maxFeePercentage,\\n            \\\"Fee exceeded provided maximum\\\"\\n        );\\n    }\\n\\n    // Returns the composite debt (drawn debt + gas compensation) of a trove, for the purpose of ICR calculation\\n    function _getCompositeDebt(uint256 _debt) internal pure returns (uint) {\\n        return _debt + MUSD_GAS_COMPENSATION;\\n    }\\n\\n    function _getNetDebt(uint256 _debt) internal pure returns (uint) {\\n        return _debt - MUSD_GAS_COMPENSATION;\\n    }\\n\\n    // Return the amount of collateral to be drawn from a trove's collateral and sent as gas compensation.\\n    function _getCollGasCompensation(\\n        uint256 _entireColl\\n    ) internal pure returns (uint) {\\n        return _entireColl / PERCENT_DIVISOR;\\n    }\\n}\\n\",\"keccak256\":\"0xa9a78271bc378fe4b2d4a0cf412ca95dfebb9be10ea22411ac72901c93decf7e\",\"license\":\"MIT\"},\"contracts/dependencies/LiquityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nlibrary LiquityMath {\\n    uint256 internal constant DECIMAL_PRECISION = 1e18;\\n\\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\\n     *\\n     * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n     * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division.\\n     *\\n     * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 BTC,\\n     * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n     *\\n     */\\n    uint256 internal constant NICR_PRECISION = 1e20;\\n\\n    function _min(uint256 _a, uint256 _b) internal pure returns (uint) {\\n        return (_a < _b) ? _a : _b;\\n    }\\n\\n    /*\\n     * Multiply two decimal numbers and use normal rounding rules:\\n     * -round product up if 19'th mantissa digit >= 5\\n     * -round product down if 19'th mantissa digit < 5\\n     *\\n     * Used only inside the exponentiation, _decPow().\\n     */\\n    function decMul(\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256 decProd) {\\n        uint256 prod_xy = x * y;\\n\\n        decProd = (prod_xy + (DECIMAL_PRECISION / 2)) / DECIMAL_PRECISION;\\n    }\\n\\n    /*\\n     * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n     *\\n     * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n     *\\n     * Called by one function that represent time in units of minutes:\\n     * 1) TroveManager._calcDecayedBaseRate\\n     *\\n     * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n     * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n     *\\n     * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n     * negligibly different from just passing the cap, since:\\n     *\\n     * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n     * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n     */\\n    function _decPow(\\n        uint256 _base,\\n        uint256 _minutes\\n    ) internal pure returns (uint) {\\n        if (_minutes > 5.256e8) {\\n            _minutes = 5.256e8;\\n        } // cap to avoid overflow\\n\\n        if (_minutes == 0) {\\n            return DECIMAL_PRECISION;\\n        }\\n\\n        uint256 y = DECIMAL_PRECISION;\\n        uint256 x = _base;\\n        uint256 n = _minutes;\\n\\n        // Exponentiation-by-squaring\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                x = decMul(x, x);\\n                n = n / 2;\\n            } else {\\n                // if (n % 2 != 0)\\n                y = decMul(x, y);\\n                x = decMul(x, x);\\n                n = (n - 1) / 2;\\n            }\\n        }\\n\\n        return decMul(x, y);\\n    }\\n\\n    function _getAbsoluteDifference(\\n        uint256 _a,\\n        uint256 _b\\n    ) internal pure returns (uint) {\\n        return (_a >= _b) ? _a - _b : _b - _a;\\n    }\\n\\n    function _computeNominalCR(\\n        uint256 _coll,\\n        uint256 _debt\\n    ) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            return (_coll * NICR_PRECISION) / _debt;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else {\\n            // if (_debt == 0)\\n            return type(uint256).max;\\n        }\\n    }\\n\\n    function _computeCR(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint256 _price\\n    ) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            uint256 newCollRatio = (_coll * _price) / _debt;\\n\\n            return newCollRatio;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else {\\n            // if (_debt == 0)\\n            return type(uint256).max;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf0ce4e213ff9da167613bc96f87dab11816081a14f39284bc6bb3ad47a2f0bae\",\"license\":\"MIT\"},\"contracts/dependencies/SendCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract SendCollateral {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * Sends collateral to recipient\\n     */\\n    function sendCollateral(\\n        IERC20 _collateralERC20,\\n        address _recipient,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_collateralERC20) == address(0)) {\\n            // BTC\\n            // slither-disable-next-line low-level-calls\\n            (bool success, ) = _recipient.call{value: _amount}(\\\"\\\"); // re-entry is fine here\\n            require(success, \\\"Sending BTC failed\\\");\\n        } else {\\n            // ERC20\\n            _collateralERC20.safeTransfer(_recipient, _amount);\\n        }\\n    }\\n\\n    /**\\n     * Sends collateral to recipient\\n     */\\n    function sendCollateralFrom(\\n        IERC20 _collateralERC20,\\n        address _from,\\n        address _recipient,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_collateralERC20) == address(0)) {\\n            // BTC\\n            // slither-disable-next-line low-level-calls\\n            (bool success, ) = _recipient.call{value: _amount}(\\\"\\\"); // re-entry is fine here\\n            require(success, \\\"Sending BTC failed\\\");\\n        } else {\\n            // ERC20\\n            // slither-disable-next-line arbitrary-send-erc20\\n            _collateralERC20.safeTransferFrom(_from, _recipient, _amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9e921fc2b3babcb115a4e033f85b36f61b974e7a559f577a9fe8e1f9a354c4e0\",\"license\":\"MIT\"},\"contracts/interfaces/IActivePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IActivePool is IPool {\\n    // --- Events ---\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event CollSurplusPoolAddressChanged(address _newCollSurplusPoolAddress);\\n    event CollateralAddressChanged(address _newCollateralAddress);\\n    event InterestRateManagerAddressChanged(\\n        address _interestRateManagerAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n\\n    event ActivePoolDebtUpdated(uint256 _principal, uint256 _interest);\\n    event ActivePoolCollateralBalanceUpdated(uint256 _collateral);\\n\\n    // --- Functions ---\\n    function sendCollateral(address _account, uint256 _amount) external;\\n\\n    function collateralAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc3b69d722701967b3556cdd3e5d4f14b133411e320780b2501cf8549af6cd949\",\"license\":\"MIT\"},\"contracts/interfaces/IBorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\n// Common interface for the Trove Manager.\\ninterface IBorrowerOperations {\\n    // --- Events ---\\n\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event MUSDTokenAddressChanged(address _musdTokenAddress);\\n    event PCVAddressChanged(address _pcvAddress);\\n    event CollateralAddressChanged(address _newCollateralAddress);\\n\\n    event TroveCreated(address indexed _borrower, uint256 arrayIndex);\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint256 _principal,\\n        uint256 _interest,\\n        uint256 _coll,\\n        uint256 stake,\\n        uint8 operation\\n    );\\n    event BorrowingFeePaid(address indexed _borrower, uint256 _fee);\\n    event RefinancingFeePaid(address indexed _borrower, uint256 _fee);\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _activePoolAddress,\\n        address _collateralAddress,\\n        address _collSurplusPoolAddress,\\n        address _defaultPoolAddress,\\n        address _gasPoolAddress,\\n        address _interestRateManagerAddress,\\n        address _musdTokenAddress,\\n        address _pcvAddress,\\n        address _priceFeedAddress,\\n        address _stabilityPoolAddress,\\n        address _sortedTrovesAddress,\\n        address _troveManagerAddress\\n    ) external;\\n\\n    function setRefinancingFeePercentage(\\n        uint8 _refinanceFeePercentage\\n    ) external;\\n\\n    function openTrove(\\n        uint256 _maxFeePercentage,\\n        uint256 _debtAmount,\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    function addColl(\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    function moveCollateralGainToTrove(\\n        address _borrower,\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    function withdrawColl(\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function withdrawMUSD(\\n        uint256 _maxFeePercentage,\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function repayMUSD(\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function closeTrove() external;\\n\\n    function refinance(uint256 _maxFeePercentage) external;\\n\\n    function adjustTrove(\\n        uint256 _maxFeePercentage,\\n        uint256 _collWithdrawal,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease,\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    function claimCollateral() external;\\n\\n    function collateralAddress() external view returns (address);\\n\\n    function getCompositeDebt(uint256 _debt) external pure returns (uint);\\n}\\n\",\"keccak256\":\"0xd52b2e73557f53796cbb3081425e236ee015e4c8e868bdd8a51d7d4dc89aa19b\",\"license\":\"MIT\"},\"contracts/interfaces/ICollSurplusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\ninterface ICollSurplusPool {\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event CollateralAddressChanged(address _newCollateralAddress);\\n\\n    event CollBalanceUpdated(address indexed _account, uint256 _newBalance);\\n    event CollateralSent(address _to, uint256 _amount);\\n\\n    // --- Contract setters ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _collateralAddress\\n    ) external;\\n\\n    function accountSurplus(address _account, uint256 _amount) external;\\n\\n    function claimColl(address _account) external;\\n\\n    function collateralAddress() external view returns (address);\\n\\n    function getCollateralBalance() external view returns (uint);\\n\\n    function getCollateral(address _account) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x88876632aec941cf5a26379e33a299c04ddfa36ae3b28df14961e1ebbbb2c7a0\",\"license\":\"MIT\"},\"contracts/interfaces/IDefaultPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IDefaultPool is IPool {\\n    // --- Events ---\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event DefaultPoolDebtUpdated(uint256 _principal, uint256 _interest);\\n    event DefaultPoolCollateralBalanceUpdated(uint256 _collateral);\\n    event CollateralAddressChanged(address _newCollateralAddress);\\n\\n    // --- Functions ---\\n    function sendCollateralToActivePool(uint256 _amount) external;\\n\\n    function collateralAddress() external view returns (address);\\n\\n    function getLastInterestUpdatedTime() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x764439d379b9f63c8c326327a8287d3e071f3c37b8907034c36e236b7f739c6a\",\"license\":\"MIT\"},\"contracts/interfaces/IInterestRateManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.24;\\n\\ninterface IInterestRateManager {\\n    struct InterestRateInfo {\\n        uint256 principal;\\n        uint256 interest;\\n        uint256 lastUpdatedTime;\\n    }\\n\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\n    event MUSDTokenAddressChanged(address _musdTokenAddress);\\n    event PCVAddressChanged(address _pcvAddress);\\n    event TroveManagerAddressChanged(address _troveManagerAddress);\\n\\n    event InterestRateProposed(uint16 proposedRate, uint256 proposalTime);\\n    event InterestRateUpdated(uint16 newInterestRate);\\n    event MaxInterestRateUpdated(uint16 newMaxInterestRate);\\n\\n    function setAddresses(\\n        address _activePoolAddress,\\n        address _borrowerOperationsAddress,\\n        address _musdTokenAddress,\\n        address _pcvAddress,\\n        address _troveManagerAddress\\n    ) external;\\n\\n    function proposeInterestRate(uint16 _newProposedInterestRate) external;\\n\\n    function approveInterestRate() external;\\n\\n    function setMaxInterestRate(uint16 _newMaxInterestRate) external;\\n\\n    function addPrincipalToRate(uint16 _rate, uint256 _principal) external;\\n\\n    function addInterestToRate(uint16 _rate, uint256 _interest) external;\\n\\n    function removePrincipalFromRate(uint16 _rate, uint256 _principal) external;\\n\\n    function removeInterestFromRate(uint16 _rate, uint256 _interest) external;\\n\\n    function updateSystemInterest(uint16 _rate) external;\\n\\n    function updateTroveDebt(\\n        uint256 _interestOwed,\\n        uint256 _payment,\\n        uint16 _rate\\n    )\\n        external\\n        returns (uint256 principalAdjustment, uint256 interestAdjustment);\\n\\n    function interestRate() external view returns (uint16);\\n\\n    function getInterestRateData(\\n        uint16 _rate\\n    ) external view returns (InterestRateInfo memory);\\n\\n    function calculateDebtAdjustment(\\n        uint256 _interestOwed,\\n        uint256 _payment\\n    )\\n        external\\n        pure\\n        returns (uint256 principalAdjustment, uint256 interestAdjustment);\\n\\n    function calculateInterestOwed(\\n        uint256 _principal,\\n        uint16 _interestRate,\\n        uint256 startTime,\\n        uint256 endTime\\n    ) external pure returns (uint256);\\n}\\n\",\"keccak256\":\"0xa863eb64bbc36b0a8e93af56c4cea86d78a6594db7d59a2321d9105e771e7dcd\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILiquityBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./IPriceFeed.sol\\\";\\n\\ninterface ILiquityBase {\\n    function priceFeed() external view returns (IPriceFeed);\\n}\\n\",\"keccak256\":\"0x3487979ac84a3324c2e7e7d3a0a5e565a75afa0e464f74f338a9ea2ef212ce23\",\"license\":\"MIT\"},\"contracts/interfaces/IPCV.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/IMUSD.sol\\\";\\n\\ninterface IPCV {\\n    // --- Events --\\n    event MUSDTokenAddressSet(address _musdTokenAddress);\\n    event BorrowerOperationsAddressSet(address _borrowerOperationsAddress);\\n    event CollateralAddressSet(address _collateralAddress);\\n    event RolesSet(address _council, address _treasury);\\n    event MUSDWithdraw(address _recipient, uint256 _amount);\\n    event CollateralWithdraw(address _recipient, uint256 _collateralAmount);\\n    event PCVDebtPaid(uint256 _paidDebt);\\n    event RecipientAdded(address _recipient);\\n    event RecipientRemoved(address _recipient);\\n    event PCVFeePaid(address _recipient, uint256 _amount);\\n\\n    // --- Functions ---\\n\\n    function debtToPay() external returns (uint256);\\n\\n    function payDebt(uint256 _musdToBurn) external;\\n\\n    function setAddresses(\\n        address _musdTokenAddress,\\n        address _borrowerOperations,\\n        address _collateralERC20\\n    ) external;\\n\\n    function initialize() external;\\n\\n    function setFeeRecipient(address _feeRecipient) external;\\n\\n    function setFeeSplit(uint8 _feeSplitPercentage) external;\\n\\n    function withdrawMUSD(address _recipient, uint256 _musdAmount) external;\\n\\n    function withdrawCollateral(\\n        address _recipient,\\n        uint256 _collateralAmount\\n    ) external;\\n\\n    function addRecipientToWhitelist(address _recipient) external;\\n\\n    function addRecipientsToWhitelist(address[] calldata _recipients) external;\\n\\n    function removeRecipientFromWhitelist(address _recipient) external;\\n\\n    function removeRecipientsFromWhitelist(\\n        address[] calldata _recipients\\n    ) external;\\n\\n    function startChangingRoles(address _council, address _treasury) external;\\n\\n    function cancelChangingRoles() external;\\n\\n    function finalizeChangingRoles() external;\\n\\n    function collateralERC20() external view returns (IERC20);\\n\\n    function musd() external view returns (IMUSD);\\n\\n    function council() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf2e5f6afa185a4e8fd73539a29a3d266048ab17fa52e56c4b0bbde0cc88540d5\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\n// Common interface for the Pools.\\ninterface IPool {\\n    // --- Events ---\\n\\n    event CollateralBalanceUpdated(uint256 _newBalance);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event CollateralSent(address _to, uint256 _amount);\\n\\n    // --- Functions ---\\n\\n    function increaseDebt(uint256 _principal, uint256 _interest) external;\\n\\n    function decreaseDebt(uint256 _principal, uint256 _interest) external;\\n\\n    function getCollateralBalance() external view returns (uint);\\n\\n    function getDebt() external view returns (uint);\\n\\n    function getPrincipal() external view returns (uint);\\n\\n    function getInterest() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xfdb6fcad4c0965cf8617ce3db22d9db8661929ec8a1466672397f20fedb68550\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\ninterface IPriceFeed {\\n    // --- Events ---\\n    event LastGoodPriceUpdated(uint256 _lastGoodPrice);\\n\\n    event NewOracleRegistered(address _oracle);\\n\\n    // --- Function ---\\n    function fetchPrice() external returns (uint);\\n\\n    function setOracle(address _oracle) external;\\n}\\n\",\"keccak256\":\"0x2c0d4f671d023fd09105eaccdc68d34db8ec0aac71fdb15a23a279d1d56d9f28\",\"license\":\"MIT\"},\"contracts/interfaces/ISortedTroves.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\n// Common interface for the SortedTroves Doubly Linked List.\\ninterface ISortedTroves {\\n    // --- Events ---\\n\\n    event SortedTrovesAddressChanged(address _sortedDoublyLLAddress);\\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\n    event NodeAdded(address _id, uint256 _NICR);\\n    event NodeRemoved(address _id);\\n\\n    // --- Functions ---\\n\\n    function setParams(\\n        uint256 _size,\\n        address _TroveManagerAddress,\\n        address _borrowerOperationsAddress\\n    ) external;\\n\\n    function insert(\\n        address _id,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    function remove(address _id) external;\\n\\n    function reInsert(\\n        address _id,\\n        uint256 _newNICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    function contains(address _id) external view returns (bool);\\n\\n    function isFull() external view returns (bool);\\n\\n    function isEmpty() external view returns (bool);\\n\\n    function getSize() external view returns (uint256);\\n\\n    function getMaxSize() external view returns (uint256);\\n\\n    function getFirst() external view returns (address);\\n\\n    function getLast() external view returns (address);\\n\\n    function getNext(address _id) external view returns (address);\\n\\n    function getPrev(address _id) external view returns (address);\\n\\n    function validInsertPosition(\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (bool);\\n\\n    function findInsertPosition(\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (address, address);\\n}\\n\",\"keccak256\":\"0xfcc79b16288d5ba5b7001d5dfdac2ad415212d74dddd442d2af7b89f2fd1d5f9\",\"license\":\"MIT\"},\"contracts/interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\n/*\\n * The Stability Pool holds mUSD tokens deposited by Stability Pool depositors.\\n *\\n * When a trove is liquidated, then depending on system conditions, some of its debt gets offset with\\n * mUSD in the Stability Pool: that is, the offset debt evaporates, and an equal amount of mUSD tokens in the Stability Pool are burned.\\n *\\n * Thus, a liquidation causes each depositor to receive a mUSD loss in proportion to their deposit as a share of total deposits.\\n * They also receive an collateral gain, as the collateral of the liquidated trove is distributed among Stability depositors\\n * in the same proportion.\\n *\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\n * of the total mUSD in the Stability Pool, depletes 40% of each deposit.\\n *\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\n * multiplying it by some factor in range ]0,1[\\n *\\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / collateral gain derivations:\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\n *\\n */\\ninterface IStabilityPool {\\n    // --- Events ---\\n\\n    event StabilityPoolCollateralBalanceUpdated(uint256 _newBalance);\\n    event StabilityPoolMUSDBalanceUpdated(uint256 _newBalance);\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event MUSDTokenAddressChanged(address _newMUSDTokenAddress);\\n    event SortedTrovesAddressChanged(address _newSortedTrovesAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event CollateralAddressChanged(address _newCollateralAddress);\\n\\n    event PUpdated(uint256 _P);\\n    event SUpdated(uint256 _S, uint128 _epoch, uint128 _scale);\\n    event EpochUpdated(uint128 _currentEpoch);\\n    event ScaleUpdated(uint128 _currentScale);\\n\\n    event DepositSnapshotUpdated(\\n        address indexed _depositor,\\n        uint256 _P,\\n        uint256 _S\\n    );\\n    event UserDepositChanged(address indexed _depositor, uint256 _newDeposit);\\n\\n    event CollateralGainWithdrawn(\\n        address indexed _depositor,\\n        uint256 _collateral,\\n        uint256 _MUSDLoss\\n    );\\n    event CollateralSent(address _to, uint256 _amount);\\n\\n    // --- Functions ---\\n\\n    /*\\n     * Called only once on init, to set addresses of other Liquity contracts\\n     * Callable only by owner, renounces ownership at the end\\n     */\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _musdTokenAddress,\\n        address _sortedTrovesAddress,\\n        address _priceFeedAddress,\\n        address _collateralAddress\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is not zero\\n     * ---\\n     * - Sends depositor's accumulated gains (collateral) to depositor\\n     */\\n    function provideToSP(uint256 _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is zero or there are no under collateralized troves left in the system\\n     * - User has a non zero deposit\\n     * ---\\n     * - Sends all depositor's accumulated gains (collateral) to depositor\\n     * - Decreases deposit stake, and takes new snapshot.\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(uint256 _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - User has a non zero deposit\\n     * - User has an open trove\\n     * - User has some collateral gain\\n     * ---\\n     * - Transfers the depositor's entire collateral gain from the Stability Pool to the caller's trove\\n     * - Leaves their compounded deposit in the Stability Pool\\n     * - Updates snapshots for deposit\\n     */\\n    function withdrawCollateralGainToTrove(\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Caller is TroveManager\\n     * ---\\n     * Cancels out the specified debt against the mUSD contained in the Stability Pool (as far as possible)\\n     * and transfers the Trove's collateral from ActivePool to StabilityPool.\\n     * Only called by liquidation functions in the TroveManager.\\n     */\\n    function offset(uint256 _debt, uint256 _coll) external;\\n\\n    /*\\n     * Returns the total amount of collateral held by the pool, accounted in an internal variable instead of `balance`,\\n     * to exclude edge cases like collateral received from a self-destruct.\\n     */\\n    function getCollateralBalance() external view returns (uint);\\n\\n    /*\\n     * Returns mUSD held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\n     */\\n    function getTotalMUSDDeposits() external view returns (uint);\\n\\n    /*\\n     * Calculates the collateral gain earned by the deposit since its last snapshots were taken.\\n     */\\n    function getDepositorCollateralGain(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Return the user's compounded deposit.\\n     */\\n    function getCompoundedMUSDDeposit(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Fallback function\\n     * Only callable by Active Pool, it just accounts for BTC received\\n     * receive() external payable;\\n     */\\n\\n    function collateralAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa826c8d5909d57d4eb23c7e4a9c5496c8c41ed759fbaf8a574cf39d26779c08f\",\"license\":\"MIT\"},\"contracts/interfaces/ITroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./IStabilityPool.sol\\\";\\nimport \\\"./IPCV.sol\\\";\\n\\n// Common interface for the Trove Manager.\\ninterface ITroveManager {\\n    enum Status {\\n        nonExistent,\\n        active,\\n        closedByOwner,\\n        closedByLiquidation,\\n        closedByRedemption\\n    }\\n\\n    struct InterestRateChange {\\n        uint16 interestRate;\\n        uint256 blockNumber;\\n    }\\n\\n    // --- Events ---\\n\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event InterestRateManagerAddressChanged(\\n        address _interestRateManagerAddress\\n    );\\n    event MUSDTokenAddressChanged(address _newMUSDTokenAddress);\\n    event PCVAddressChanged(address _pcvAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n\\n    event Liquidation(\\n        uint256 _liquidatedPrincipal,\\n        uint256 _liquidatedInterest,\\n        uint256 _liquidatedColl,\\n        uint256 _collGasCompensation,\\n        uint256 _gasCompensation\\n    );\\n    event Redemption(\\n        uint256 _attemptedAmount,\\n        uint256 _actualAmount,\\n        uint256 _collateralSent,\\n        uint256 _collateralFee\\n    );\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint256 _principal,\\n        uint256 _interest,\\n        uint256 _coll,\\n        uint256 stake,\\n        uint8 operation\\n    );\\n    event TroveLiquidated(\\n        address indexed _borrower,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint8 operation\\n    );\\n    event BaseRateUpdated(uint256 _baseRate);\\n    event LastFeeOpTimeUpdated(uint256 _lastFeeOpTime);\\n    event TotalStakesUpdated(uint256 _newTotalStakes);\\n    event SystemSnapshotsUpdated(\\n        uint256 _totalStakesSnapshot,\\n        uint256 _totalCollateralSnapshot\\n    );\\n    event LTermsUpdated(\\n        uint256 _L_Collateral,\\n        uint256 _L_Principal,\\n        uint256 _L_Interest\\n    );\\n    event TroveSnapshotsUpdated(\\n        uint256 _L_Collateral,\\n        uint256 _L_Principal,\\n        uint256 _L_Interest\\n    );\\n    event TroveIndexUpdated(address _borrower, uint256 _newIndex);\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _activePoolAddress,\\n        address _borrowerOperationsAddress,\\n        address _collSurplusPoolAddress,\\n        address _defaultPoolAddress,\\n        address _gasPoolAddress,\\n        address _interestRateManagerAddress,\\n        address _musdTokenAddress,\\n        address _pcvAddress,\\n        address _priceFeedAddress,\\n        address _sortedTrovesAddress,\\n        address _stabilityPoolAddress\\n    ) external;\\n\\n    function liquidate(address _borrower) external;\\n\\n    function batchLiquidateTroves(address[] calldata _troveArray) external;\\n\\n    function redeemCollateral(\\n        uint256 _amount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint256 _partialRedemptionHintNICR,\\n        uint256 _maxIterations,\\n        uint256 _maxFeePercentage\\n    ) external;\\n\\n    function updateStakeAndTotalStakes(\\n        address _borrower\\n    ) external returns (uint);\\n\\n    function updateTroveRewardSnapshots(address _borrower) external;\\n\\n    function addTroveOwnerToArray(\\n        address _borrower\\n    ) external returns (uint256 index);\\n\\n    function applyPendingRewards(address _borrower) external;\\n\\n    function closeTrove(address _borrower) external;\\n\\n    function removeStake(address _borrower) external;\\n\\n    function decayBaseRateFromBorrowing() external;\\n\\n    function setTroveStatus(address _borrower, Status _status) external;\\n\\n    function setTroveMaxBorrowingCapacity(\\n        address _borrower,\\n        uint256 _maxBorrowingCapacity\\n    ) external;\\n\\n    function updateDefaultPoolInterest() external;\\n\\n    function updateSystemAndTroveInterest(address _borrower) external;\\n\\n    function increaseTroveColl(\\n        address _borrower,\\n        uint256 _collIncrease\\n    ) external returns (uint);\\n\\n    function decreaseTroveColl(\\n        address _borrower,\\n        uint256 _collDecrease\\n    ) external returns (uint);\\n\\n    function increaseTroveDebt(\\n        address _borrower,\\n        uint256 _debtIncrease\\n    ) external returns (uint256);\\n\\n    function decreaseTroveDebt(\\n        address _borrower,\\n        uint256 _debtDecrease\\n    ) external returns (uint256, uint256);\\n\\n    function setTroveInterestRate(address _borrower, uint16 _rate) external;\\n\\n    function setTroveLastInterestUpdateTime(\\n        address _borrower,\\n        uint256 _timestamp\\n    ) external;\\n\\n    function stabilityPool() external view returns (IStabilityPool);\\n\\n    function pcv() external view returns (IPCV);\\n\\n    function getTroveOwnersCount() external view returns (uint);\\n\\n    function getTroveFromTroveOwnersArray(\\n        uint256 _index\\n    ) external view returns (address);\\n\\n    function getTroveInterestOwed(\\n        address _borrower\\n    ) external view returns (uint256);\\n\\n    function getTrovePrincipal(address _borrower) external view returns (uint);\\n\\n    function getNominalICR(address _borrower) external view returns (uint);\\n\\n    function getCurrentICR(\\n        address _borrower,\\n        uint256 _price\\n    ) external view returns (uint);\\n\\n    function getPendingCollateral(\\n        address _borrower\\n    ) external view returns (uint);\\n\\n    function getPendingDebt(\\n        address _borrower\\n    ) external view returns (uint256, uint256);\\n\\n    function hasPendingRewards(address _borrower) external view returns (bool);\\n\\n    function getEntireDebtAndColl(\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 coll,\\n            uint256 principal,\\n            uint256 interest,\\n            uint256 pendingCollateral,\\n            uint256 pendingPrincipal,\\n            uint256 pendingInterest\\n        );\\n\\n    function getRedemptionRate() external view returns (uint);\\n\\n    function getRedemptionRateWithDecay() external view returns (uint);\\n\\n    function getRedemptionFeeWithDecay(\\n        uint256 _collateralDrawn\\n    ) external view returns (uint);\\n\\n    function getBorrowingRate() external view returns (uint);\\n\\n    function getBorrowingRateWithDecay() external view returns (uint);\\n\\n    function getBorrowingFee(uint256 _debt) external view returns (uint);\\n\\n    function getBorrowingFeeWithDecay(\\n        uint256 _debt\\n    ) external view returns (uint);\\n\\n    function getTroveStatus(address _borrower) external view returns (Status);\\n\\n    function getTroveStake(address _borrower) external view returns (uint);\\n\\n    function getTroveDebt(address _borrower) external view returns (uint);\\n\\n    function getTroveInterestRate(\\n        address _borrower\\n    ) external view returns (uint16);\\n\\n    function getTroveLastInterestUpdateTime(\\n        address _borrower\\n    ) external view returns (uint);\\n\\n    function getTroveColl(address _borrower) external view returns (uint);\\n\\n    function getTCR(uint256 _price) external view returns (uint);\\n\\n    function checkRecoveryMode(uint256 _price) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x14774fba145999c49d0fff49dc484ff673e677796dbd55784014bd82ff0c405c\",\"license\":\"MIT\"},\"contracts/token/IMUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\n\\ninterface IMUSD is IERC20Metadata, IERC20Permit {\\n    // --- Events ---\\n    event BorrowerOperationsAddressAdded(address _newBorrowerOperationsAddress);\\n    event BalanceUpdated(address _user, uint256 _amount);\\n    event InterestRateManagerAddressAdded(address _interestRateManagerAddress);\\n    event StabilityPoolAddressAdded(address _newStabilityPoolAddress);\\n    event TroveManagerAddressAdded(address _troveManagerAddress);\\n\\n    // --- Governance Functions ---\\n    function cancelAddContracts() external;\\n\\n    function cancelAddMintList() external;\\n\\n    function cancelRevokeBurnList() external;\\n\\n    function cancelRevokeMintList() external;\\n\\n    function startAddContracts(\\n        address _troveManagerAddress,\\n        address _stabilityPoolAddress,\\n        address _borrowerOperationsAddress,\\n        address _interestRateManagerAddress\\n    ) external;\\n\\n    function startAddMintList(address _account) external;\\n\\n    function startRevokeBurnList(address _account) external;\\n\\n    function startRevokeMintList(address _account) external;\\n\\n    function finalizeAddContracts() external;\\n\\n    function finalizeAddMintList() external;\\n\\n    function finalizeRevokeBurnList() external;\\n\\n    function finalizeRevokeMintList() external;\\n\\n    // --- External Functions ---\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burnList(address contractAddress) external view returns (bool);\\n\\n    function mintList(address contractAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x87733ae6378e124af9fffbba7334f5f2330a1786c601d2da70dd800ee95500b6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526003805460ff60a01b1916600560a21b1790553480156200002457600080fd5b5033806200004c57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b62000057816200005e565b50620000b0565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61513780620000c06000396000f3fe60806040526004361061025c5760003560e01c8063741bef1a11610144578063ae918754116100b6578063d56d6bbe1161007a578063d56d6bbe146106c8578063dc283bb3146106db578063eb1207eb146106fb578063f2fde38b1461071b578063f92d34331461073b578063fe9d03231461075057600080fd5b8063ae91875414610628578063ae9d445c14610648578063b064b0b714610668578063cab666d014610688578063cda775f9146106a857600080fd5b8063887105d311610108578063887105d3146105bc5780638da5cb5b146105d15780638e54c119146105ef5780638f09162b14610602578063a20baee6146104f2578063abfad25d1461061557600080fd5b8063741bef1a1461052e578063794e57241461054e578063795d26c31461056a5780637af110ba1461057f5780637f7dde4a1461059c57600080fd5b80634ff81443116101dd5780636246d497116101a15780636246d497146104755780636c2f041b146104a85780636f0b0c1c146104c8578063715018a6146104dd57806372fe25aa146104f2578063734f622d1461050e57600080fd5b80634ff81443146103d95780635530273c146103f95780635733d58f146104195780635b9fb3cd146104355780635f705f691461045557600080fd5b80633d83908a116102245780633d83908a146103445780633db008c7146103645780634597f6ed146103845780634870dd9a146103a457806348d399e7146103b957600080fd5b806306fdde03146102615780630b622ab2146102b55780630e704d50146102e25780631bf43555146102f95780633cc7422514610324575b600080fd5b34801561026d57600080fd5b5061029f60405180604001604052806012815260200171426f72726f7765724f7065726174696f6e7360701b81525081565b6040516102ac9190614b36565b60405180910390f35b3480156102c157600080fd5b506008546102d5906001600160a01b031681565b6040516102ac9190614b69565b3480156102ee57600080fd5b506102f7610770565b005b34801561030557600080fd5b50610316686194049f30f720000081565b6040519081526020016102ac565b34801561033057600080fd5b506001546102d5906001600160a01b031681565b34801561035057600080fd5b506004546102d5906001600160a01b031681565b34801561037057600080fd5b506007546102d5906001600160a01b031681565b34801561039057600080fd5b50600b546102d5906001600160a01b031681565b3480156103b057600080fd5b5061031660c881565b3480156103c557600080fd5b506005546102d5906001600160a01b031681565b3480156103e557600080fd5b506103166103f4366004614b7d565b610d47565b34801561040557600080fd5b506102f7610414366004614bbb565b610d58565b34801561042557600080fd5b506103166714d1120d7b16000081565b34801561044157600080fd5b50600c546102d5906001600160a01b031681565b34801561046157600080fd5b506102f7610470366004614bfd565b610d70565b34801561048157600080fd5b5060035461049690600160a01b900460ff1681565b60405160ff90911681526020016102ac565b3480156104b457600080fd5b506102f76104c3366004614b7d565b610d89565b3480156104d457600080fd5b506102f76114e8565b3480156104e957600080fd5b506102f7611546565b3480156104fe57600080fd5b50610316670de0b6b3a764000081565b34801561051a57600080fd5b506102f7610529366004614c47565b61155a565b34801561053a57600080fd5b506002546102d5906001600160a01b031681565b34801561055a57600080fd5b50610316670f43fc2c04ee000081565b34801561057657600080fd5b50610316611fb8565b34801561058b57600080fd5b50610316680ad78ebc5ac620000081565b3480156105a857600080fd5b506000546102d5906001600160a01b031681565b3480156105c857600080fd5b506103166120b4565b3480156105dd57600080fd5b506003546001600160a01b03166102d5565b6102f76105fd366004614d3d565b612179565b6102f7610610366004614daf565b61219d565b6102f7610623366004614e05565b612954565b34801561063457600080fd5b50600d546102d5906001600160a01b031681565b34801561065457600080fd5b506102f7610663366004614b7d565b61297a565b34801561067457600080fd5b506102f7610683366004614b7d565b612a0f565b34801561069457600080fd5b50600a546102d5906001600160a01b031681565b3480156106b457600080fd5b506009546102d5906001600160a01b031681565b6102f76106d6366004614bbb565b612a6f565b3480156106e757600080fd5b506102f76106f6366004614bbb565b612a8d565b34801561070757600080fd5b506102f7610716366004614e3d565b612aa0565b34801561072757600080fd5b506102f7610736366004614e60565b612cb8565b34801561074757600080fd5b50610316612cf6565b34801561075c57600080fd5b506006546102d5906001600160a01b031681565b6004805460008054600a54604051635f7a196360e11b81526001600160a01b0394851695928516949091169291839163bef432c6916107b191309101614b69565b602060405180830381865afa1580156107ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f29190614e7d565b604051636328fec360e11b81529091506001600160a01b0385169063c651fd8690610821903390600401614b69565b600060405180830381600087803b15801561083b57600080fd5b505af115801561084f573d6000803e3d6000fd5b5050505061085d8433612d19565b60025460408051630fdb11cf60e01b815290516000926001600160a01b031691630fdb11cf916004808301926020929190829003018187875af11580156108a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cc9190614e9a565b905081156108dd576108dd81612e03565b604051630b07655760e01b81526001600160a01b03861690630b07655790610909903390600401614b69565b600060405180830381600087803b15801561092357600080fd5b505af1158015610937573d6000803e3d6000fd5b50506040516309019aaf60e31b8152600092506001600160a01b038816915063480cd5789061096a903390600401614b69565b602060405180830381865afa158015610987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ab9190614e9a565b90506000866001600160a01b031663d66a2553336040518263ffffffff1660e01b81526004016109db9190614b69565b602060405180830381865afa1580156109f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1c9190614e9a565b90506000876001600160a01b03166385a43ca8336040518263ffffffff1660e01b8152600401610a4c9190614b69565b602060405180830381865afa158015610a69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8d9190614e9a565b9050610aac8633610aa7680ad78ebc5ac620000086614ec9565b612e7b565b8415610ad0576000610ac384600085600089612f5e565b9050610ace81612fd1565b505b604051631fc5750960e31b81526001600160a01b0389169063fe2ba84890610afc903390600401614b69565b600060405180830381600087803b158015610b1657600080fd5b505af1158015610b2a573d6000803e3d6000fd5b50506040516365e89c5760e11b81526001600160a01b038b16925063cbd138ae9150610b5a903390600401614b69565b600060405180830381600087803b158015610b7457600080fd5b505af1158015610b88573d6000803e3d6000fd5b50506040513392506000805160206150e28339815191529150610bb690600090819081908190600190614ef2565b60405180910390a26001600160a01b03871663ab11fadd82610be1680ad78ebc5ac620000086614ec9565b610beb9190614ec9565b836040518363ffffffff1660e01b8152600401610c12929190918252602082015260400190565b600060405180830381600087803b158015610c2c57600080fd5b505af1158015610c40573d6000803e3d6000fd5b50505050856001600160a01b0316639dc29fac33680ad78ebc5ac620000085610c699190614ec9565b6040518363ffffffff1660e01b8152600401610c86929190614f18565b600060405180830381600087803b158015610ca057600080fd5b505af1158015610cb4573d6000803e3d6000fd5b5050600654610cdd925089915088906001600160a01b0316680ad78ebc5ac62000006000613061565b604051636250216960e01b81526001600160a01b03881690636250216990610d0b9033908790600401614f18565b600060405180830381600087803b158015610d2557600080fd5b505af1158015610d39573d6000803e3d6000fd5b505050505050505050505050565b6000610d5282613134565b92915050565b610d6b3384600080600087876000613149565b505050565b610d83336000856001600087878b613149565b50505050565b600454600c546001600160a01b039182169116610da68233612d19565b604051636328fec360e11b81526001600160a01b0383169063c651fd8690610dd2903390600401614b69565b600060405180830381600087803b158015610dec57600080fd5b505af1158015610e00573d6000803e3d6000fd5b50506040516392b7659b60e01b8152600092506001600160a01b03851691506392b7659b90610e33903390600401614b69565b602060405180830381865afa158015610e50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e749190614f31565b90506000836001600160a01b03166385a43ca8336040518263ffffffff1660e01b8152600401610ea49190614b69565b602060405180830381865afa158015610ec1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee59190614e9a565b90506000846001600160a01b031663d66a2553336040518263ffffffff1660e01b8152600401610f159190614b69565b602060405180830381865afa158015610f32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f569190614e9a565b600354909150600090606490610f77908490600160a01b900460ff16614f55565b610f819190614f6c565b600a54909150600090610fa09088906001600160a01b0316848b6138f5565b604051639976cf4560e01b81529091506001600160a01b03881690639976cf4590610fd19033908590600401614f18565b6020604051808303816000875af1158015610ff0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110149190614e9a565b506040516339b3e85d60e21b81526000906001600160a01b0389169063e6cfa17490611044903390600401614b69565b602060405180830381865afa158015611061573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110859190614e9a565b6040516323cc9ed960e21b815261ffff88166004820152602481018790529091506001600160a01b03881690638f327b6490604401600060405180830381600087803b1580156110d457600080fd5b505af11580156110e8573d6000803e3d6000fd5b5050604051635c30639760e11b815261ffff89166004820152602481018490526001600160a01b038a16925063b860c72e9150604401600060405180830381600087803b15801561113857600080fd5b505af115801561114c573d6000803e3d6000fd5b505050506000876001600160a01b0316637c3a00fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611190573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b49190614f31565b604051635b5e7c1960e11b815261ffff82166004820152602481018890529091506001600160a01b0389169063b6bcf83290604401600060405180830381600087803b15801561120357600080fd5b505af1158015611217573d6000803e3d6000fd5b50506040516379b381e360e01b815261ffff84166004820152602481018590526001600160a01b038b1692506379b381e39150604401600060405180830381600087803b15801561126757600080fd5b505af115801561127b573d6000803e3d6000fd5b50505050886001600160a01b0316637412e008338a6001600160a01b0316637c3a00fd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f19190614f31565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015261ffff166024820152604401600060405180830381600087803b15801561133b57600080fd5b505af115801561134f573d6000803e3d6000fd5b5050505060006114438a6001600160a01b031663480cd578336040518263ffffffff1660e01b81526004016113849190614b69565b602060405180830381865afa1580156113a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c59190614e9a565b600260009054906101000a90046001600160a01b03166001600160a01b0316630fdb11cf6040518163ffffffff1660e01b81526004016020604051808303816000875af115801561141a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143e9190614e9a565b613a33565b604051632f8a426f60e21b81529091506001600160a01b038b169063be2909bc906114749033908590600401614f18565b600060405180830381600087803b15801561148e57600080fd5b505af11580156114a2573d6000803e3d6000fd5b50506040518681523392507fde81352e4f17b151de0a2f2a30a50eeb111a437414e8f241248158063302a551915060200160405180910390a25050505050505050505050565b60095460405163b32beb5b60e01b81526001600160a01b039091169063b32beb5b90611518903390600401614b69565b600060405180830381600087803b15801561153257600080fd5b505af1158015610d83573d6000803e3d6000fd5b61154e613a59565b6115586000613a86565b565b611562613a59565b61156b8c613ad8565b6001600160a01b038b1615611583576115838b613ad8565b61158c8a613ad8565b61159589613ad8565b61159e88613ad8565b6115a786613ad8565b6115b085613ad8565b6115b984613ad8565b6115c283613ad8565b6115cb82613ad8565b6115d481613ad8565b6115dd87613ad8565b80600460006101000a8154816001600160a01b0302191690836001600160a01b031602179055508b6000806101000a8154816001600160a01b0302191690836001600160a01b0316021790555088600160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555082600860006101000a8154816001600160a01b0302191690836001600160a01b0316021790555087600660006101000a8154816001600160a01b0302191690836001600160a01b0316021790555089600960006101000a8154816001600160a01b0302191690836001600160a01b0316021790555083600260006101000a8154816001600160a01b0302191690836001600160a01b0316021790555081600d60006101000a8154816001600160a01b0302191690836001600160a01b0316021790555085600a60006101000a8154816001600160a01b0302191690836001600160a01b0316021790555084600b60006101000a8154816001600160a01b0302191690836001600160a01b0316021790555084600760006101000a8154816001600160a01b0302191690836001600160a01b031602179055508a600560006101000a8154816001600160a01b0302191690836001600160a01b0316021790555086600c60006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060006001600160a01b0316896001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611820573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118449190614fa4565b6001600160a01b03161415806118cf5750600154604080516348d399e760e01b815290516001600160a01b03808f169316916348d399e79160048083019260209291908290030181865afa1580156118a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c49190614fa4565b6001600160a01b0316145b80156119ce575060006001600160a01b03168c6001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561191f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119439190614fa4565b6001600160a01b03161415806119ce5750600054604080516348d399e760e01b815290516001600160a01b03808f169316916348d399e79160048083019260209291908290030181865afa15801561199f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c39190614fa4565b6001600160a01b0316145b8015611acd575060006001600160a01b0316836001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a429190614fa4565b6001600160a01b0316141580611acd5750600854604080516348d399e760e01b815290516001600160a01b03808f169316916348d399e79160048083019260209291908290030181865afa158015611a9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac29190614fa4565b6001600160a01b0316145b8015611bcc575060006001600160a01b03168a6001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b419190614fa4565b6001600160a01b0316141580611bcc5750600954604080516348d399e760e01b815290516001600160a01b03808f169316916348d399e79160048083019260209291908290030181865afa158015611b9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc19190614fa4565b6001600160a01b0316145b8015611ccb575060075460408051630cab666d60e41b815290516000926001600160a01b03169163cab666d09160048083019260209291908290030181865afa158015611c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c419190614fa4565b6001600160a01b03161480611ccb57506007546040805163724d374560e01b815290516001600160a01b03808f1693169163724d37459160048083019260209291908290030181865afa158015611c9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc09190614fa4565b6001600160a01b0316145b611d535760405162461bcd60e51b815260206004820152604860248201527f5468652073616d6520636f6c6c61746572616c2061646472657373206d75737460448201527f206265207573656420666f722074686520656e7469726520736574206f6620636064820152676f6e74726163747360c01b608482015260a4015b60405180910390fd5b7f143219c9e69b09e07e095fcc889b43d8f46ca892bba65f08dc3a0050869a567881604051611d829190614b69565b60405180910390a17f78f058b189175430c48dc02699e3a0031ea4ff781536dc2fab847de4babdd8828c604051611db99190614b69565b60405180910390a17f5ee0cae2f063ed938bb55046f6a932fb6ae792bf43624806bb90abe68a50be9b89604051611df09190614b69565b60405180910390a17f82966d27eea39b038ee0fa30cd16532bb24f6e65d31cb58fb227aa5766cdcc7f83604051611e279190614b69565b60405180910390a17fcfb07d791fcafc032b35837b50eb84b74df518cf4cc287e8084f47630fa70fa088604051611e5e9190614b69565b60405180910390a17fe67f36a6e961157d6eff83b91f3af5a62131ceb6f04954ef74f51c1c05e7f88d8a604051611e959190614b69565b60405180910390a17f8c537274438aa850a330284665d81a85dd38267d09e4050d416bfc94142db26484604051611ecc9190614b69565b60405180910390a17f65f4cf077bc01e4742eb5ad98326f6e95b63548ea24b17f8d5e823111fe7880082604051611f039190614b69565b60405180910390a17f547e9055f019d1e165f0ca2133494723cb248f8536192c218254285fc43c566886604051611f3a9190614b69565b60405180910390a17f38335c64466e2376ab931166337e19127650d842036ebe01da1ba3e5c1255ebb85604051611f719190614b69565b60405180910390a17ffba7421f3d1a98e80d72491a6e0523133444a5842cc7310951d8b82d075a7dff8b604051611fa89190614b69565b60405180910390a1610d39611546565b60008054604080516314a6bf0f60e01b8152905183926001600160a01b0316916314a6bf0f9160048083019260209291908290030181865afa158015612002573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120269190614e9a565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166314a6bf0f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561207d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a19190614e9a565b90506120ad8183614fc1565b9250505090565b6000805460408051631529a63960e01b8152905183926001600160a01b031691631529a6399160048083019260209291908290030181865afa1580156120fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121229190614e9a565b90506000600160009054906101000a90046001600160a01b03166001600160a01b0316631529a6396040518163ffffffff1660e01b8152600401602060405180830381865afa15801561207d573d6000803e3d6000fd5b61218283613b81565b9250612194338787878787878e613149565b50505050505050565b6040805160808082018352600480546001600160a01b039081168452600080548216602080870191909152600a54831686880152600c54831660608088019190915287516101008101895283815280830184905280890184905290810183905294850182905260a0850182905260c0850182905260e085018290526002548751630fdb11cf60e01b8152975196979596931694630fdb11cf948181019492939183900301908290875af1158015612258573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227c9190614e9a565b80825260009061228b90613c0a565b90506122978882613c27565b82516122a39033613d3f565b60408201879052806122df576122c383600001518460400151898b6138f5565b602083018190526040830180516122db908390614fc1565b9052505b6122ec8260400151613e12565b6122f98260400151613134565b6060830181905261230c5761230c614f8e565b61231586613b81565b955061232a8683606001518460000151613e91565b6080830152606082015161233f908790613ec4565b60a0830152801561235c576123578260800151613efa565b61238f565b6123698260800151613f72565b6000612382876001856060015160018760000151612f5e565b905061238d81612fd1565b505b82600001516001600160a01b0316637412e0083385606001516001600160a01b0316637c3a00fd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124099190614f31565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015261ffff166024820152604401600060405180830381600087803b15801561245357600080fd5b505af1158015612467573d6000803e3d6000fd5b5050845160405163953f0bb160e01b81526001600160a01b03909116925063953f0bb1915061249d903390600190600401614fd4565b600060405180830381600087803b1580156124b757600080fd5b505af11580156124cb573d6000803e3d6000fd5b505084516040516372423c1760e01b81526001600160a01b0390911692506372423c1791506125009033908a90600401614f18565b6020604051808303816000875af115801561251f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125439190614e9a565b5082516060830151604051639976cf4560e01b81526001600160a01b0390921691639976cf459161257991339190600401614f18565b6020604051808303816000875af1158015612598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125bc9190614e9a565b508251604051630459b7eb60e51b81526001600160a01b0390911690638b36fd60906125ee9033904290600401614f18565b600060405180830381600087803b15801561260857600080fd5b505af115801561261c573d6000803e3d6000fd5b505050506000612630878460000151613a33565b8451604051632f8a426f60e21b81529192506001600160a01b03169063be2909bc906126629033908590600401614f18565b600060405180830381600087803b15801561267c57600080fd5b505af1158015612690573d6000803e3d6000fd5b505085516040516382fe3eb960e01b81526001600160a01b0390911692506382fe3eb991506126c3903390600401614b69565b600060405180830381600087803b1580156126dd57600080fd5b505af11580156126f1573d6000803e3d6000fd5b50508551604051630c7940bd60e11b81526001600160a01b0390911692506318f2817a9150612724903390600401614b69565b6020604051808303816000875af1158015612743573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127679190614e9a565b60c0840152600d5460a08401516040516346f7cf8760e01b81526001600160a01b03909216916346f7cf87916127a6913391908b908b9060040161500f565b600060405180830381600087803b1580156127c057600080fd5b505af11580156127d4573d6000803e3d6000fd5b505085516040516315d549f160e01b81526001600160a01b0390911692506315d549f19150612807903390600401614b69565b6020604051808303816000875af1158015612826573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284a9190614e9a565b60e0840181905260405190815233907f59cfd0cd754bc5748b6770e94a4ffa5f678d885cb899dcfadc5734edb97c67ab9060200160405180910390a2612894846020015188614002565b6128ad84602001518560400151338b876040015161401a565b602084015160408501516006546128d99291906001600160a01b0316680ad78ebc5ac62000008061401a565b606083015160c084015160405133926000805160206150e283398151915292612908926000918d918390614ef2565b60405180910390a260208084015160405190815233917f5d032cf8244d18503d44f7171954f352ff41fa2df69660eb897f4db36efe808e910160405180910390a2505050505050505050565b61295c6140a9565b61296583613b81565b9250610d838460008060008787876000613149565b6007546001600160a01b031633146129a45760405162461bcd60e51b8152600401611d4a9061503a565b600a54600754604051632770a7eb60e21b81526001600160a01b0392831692639dc29fac926129da929116908590600401614f18565b600060405180830381600087803b1580156129f457600080fd5b505af1158015612a08573d6000803e3d6000fd5b5050505050565b6007546001600160a01b03163314612a395760405162461bcd60e51b8152600401611d4a9061503a565b600a546007546040516340c10f1960e01b81526001600160a01b03928316926340c10f19926129da929116908590600401614f18565b612a7883613b81565b9250610d6b3360008060008787876000613149565b610d6b3360008560008087876000613149565b600b60009054906101000a90046001600160a01b03166001600160a01b031663e2c6d41c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612af3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b179190614fa4565b6001600160a01b0316336001600160a01b03161480612bbd5750600b60009054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba89190614fa4565b6001600160a01b0316336001600160a01b0316145b612c255760405162461bcd60e51b815260206004820152603360248201527f426f72726f7765724f70733a204f6e6c7920676f7665726e616e63652063616e6044820152721031b0b636103a3434b990333ab731ba34b7b760691b6064820152608401611d4a565b60648160ff161115612c985760405162461bcd60e51b815260206004820152603660248201527f426f72726f7765724f70733a20526566696e616e63696e672066656520706572604482015275063656e74616765206d757374206265203c3d203130360541b6064820152608401611d4a565b6003805460ff909216600160a01b0260ff60a01b19909216919091179055565b612cc0613a59565b6001600160a01b038116612cea576000604051631e4fbdf760e01b8152600401611d4a9190614b69565b612cf381613a86565b50565b6103e8612d0c670de0b6b3a76400006005614f55565b612d169190614f6c565b81565b6040516321e3780160e01b81526000906001600160a01b038416906321e3780190612d48908590600401614b69565b602060405180830381865afa158015612d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d899190615080565b90506001816004811115612d9f57612d9f614edc565b14610d6b5760405162461bcd60e51b815260206004820152602e60248201527f426f72726f7765724f70733a2054726f766520646f6573206e6f74206578697360448201526d1d081bdc881a5cc818db1bdcd95960921b6064820152608401611d4a565b612e0c81613c0a565b15612cf35760405162461bcd60e51b815260206004820152603960248201527f426f72726f7765724f70733a204f7065726174696f6e206e6f74207065726d696044820152787474656420647572696e67205265636f76657279204d6f646560381b6064820152608401611d4a565b6040516370a0823160e01b815281906001600160a01b038516906370a0823190612ea9908690600401614b69565b602060405180830381865afa158015612ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eea9190614e9a565b1015610d6b5760405162461bcd60e51b815260206004820152603d60248201527f426f72726f7765724f70733a2043616c6c657220646f65736e7420686176652060448201527f656e6f756768206d55534420746f206d616b652072657061796d656e740000006064820152608401611d4a565b600080612f696120b4565b90506000612f75611fb8565b905086612f8b57612f868883614ec9565b612f95565b612f958883614fc1565b915084612fab57612fa68682614ec9565b612fb5565b612fb58682614fc1565b90506000612fc4838387613e91565b9998505050505050505050565b6714d1120d7b160000811015612cf35760405162461bcd60e51b815260206004820152604960248201527f426f72726f7765724f70733a20416e206f7065726174696f6e2074686174207760448201527f6f756c6420726573756c7420696e20544352203c20434352206973206e6f74206064820152681c195c9b5a5d1d195960ba1b608482015260a401611d4a565b60405163ab11fadd60e01b815260048101839052602481018290526001600160a01b0386169063ab11fadd90604401600060405180830381600087803b1580156130aa57600080fd5b505af11580156130be573d6000803e3d6000fd5b50505050836001600160a01b0316639dc29fac8483856130de9190614fc1565b6040518363ffffffff1660e01b81526004016130fb929190614f18565b600060405180830381600087803b15801561311557600080fd5b505af1158015613129573d6000803e3d6000fd5b505050505050505050565b6000610d52680ad78ebc5ac620000083614fc1565b60408051608081018252600480546001600160a01b0390811680845260005482166020850152600a54821684860152600c5490911660608401529251636328fec360e11b815291929163c651fd86916131a4918d9101614b69565b600060405180830381600087803b1580156131be57600080fd5b505af11580156131d2573d6000803e3d6000fd5b50505050613268604051806102400160405280600081526020016000815260200160008152602001600015158152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b81516040516310b4879560e31b81526001600160a01b03909116906385a43ca890613297908d90600401614b69565b602060405180830381865afa1580156132b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132d89190614e9a565b6101c0820181905260608301516040516321ddc20f60e01b81526004810192909252602482018a90526001600160a01b0316906321ddc20f906044016040805180830381865afa158015613330573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061335491906150a1565b6102008301526101e082015260025460408051630fdb11cf60e01b815290516001600160a01b0390921691630fdb11cf9160048082019260209290919082900301816000875af11580156133ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133d09190614e9a565b8082526133dc90613c0a565b15156102208201528615613402576133f983826102200151613c27565b61340288614115565b61340c8987614185565b6134178989886141f5565b8151613423908b612d19565b336001600160a01b038b16148061345957506008546001600160a01b03163314801561344f5750600086115b8015613459575087155b61346557613465614f8e565b8151604051630b07655760e01b81526001600160a01b0390911690630b07655790613494908d90600401614b69565b600060405180830381600087803b1580156134ae57600080fd5b505af11580156134c2573d6000803e3d6000fd5b505050506134d0868a61428d565b151560608301526020820152604081018890528680156134f35750806102200151155b156135295761350c826000015183604001518a866138f5565b6101208201819052604082018051613525908390614fc1565b9052505b815160405163d66a255360e01b81526001600160a01b039091169063d66a255390613558908d90600401614b69565b602060405180830381865afa158015613575573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135999190614e9a565b608082015281516040516309019aaf60e31b81526001600160a01b039091169063480cd578906135cd908d90600401614b69565b602060405180830381865afa1580156135ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061360e9190614e9a565b60a0820181905260808201518251613627929190613e91565b8160c00181815250506136578160a0015182608001518360200151846060015185604001518c87600001516142ac565b60e082015260a081015189111561367057613670614f8e565b6136818161022001518a89846142df565b8615801561368f5750600088115b156136dd576136b881604001516136a983608001516142ff565b6136b39190614ec9565b613e12565b6136ca81608001518260400151614314565b6136dd82604001518b8360400151612e7b565b6136fb82600001518b8360200151846060015185604001518c6143a8565b6101808401526101608301526101408201528151604051630c7940bd60e11b81526001600160a01b03909116906318f2817a9061373c908d90600401614b69565b6020604051808303816000875af115801561375b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061377f9190614e9a565b816101a001818152505060006137ad8260a0015183608001518460200151856060015186604001518d61459b565b600d5460405163015f109360e51b81529192506001600160a01b031690632be21260906137e4908e9085908b908b9060040161500f565b600060405180830381600087803b1580156137fe57600080fd5b505af1158015613812573d6000803e3d6000fd5b505050508a6001600160a01b03166000805160206150e2833981519152836101600151846101800151856101400151866101a0015160028081111561385957613859614edc565b60405161386a959493929190614ef2565b60405180910390a261012082015160405190815233907f5d032cf8244d18503d44f7171954f352ff41fa2df69660eb897f4db36efe808e9060200160405180910390a26138e88360200151846040015133856020015186606001518d6138d557876101e001516138d7565b8e5b8861020001518f8a604001516145bc565b5050505050505050505050565b6000846001600160a01b0316635dba4c4a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561393257600080fd5b505af1158015613946573d6000803e3d6000fd5b5050604051630631203b60e41b815260048101869052600092506001600160a01b038816915063631203b090602401602060405180830381865afa158015613992573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139b69190614e9a565b90506139c3818585614661565b6007546040516340c10f1960e01b81526001600160a01b03878116926340c10f19926139f792909116908590600401614f18565b600060405180830381600087803b158015613a1157600080fd5b505af1158015613a25573d6000803e3d6000fd5b509298975050505050505050565b6000670f43fc2c04ee0000613a488385614f55565b613a529190614f6c565b9392505050565b6003546001600160a01b03163314611558573360405163118cdaa760e01b8152600401611d4a9190614b69565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038116613b2e5760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f206164647265737300006044820152606401611d4a565b803b80613b7d5760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f6044820152606401611d4a565b5050565b6005546000906001600160a01b0316613b9b575034919050565b3415613c065760405162461bcd60e51b815260206004820152603460248201527f426f72726f7765724f7065726174696f6e733a20455243323020636f6c6c61746044820152736572616c206e65656465642c206e6f742042544360601b6064820152608401611d4a565b5090565b600080613c16836146d2565b6714d1120d7b160000119392505050565b8015613ca357670de0b6b3a7640000821115613b7d5760405162461bcd60e51b815260206004820152603560248201527f4d6178206665652070657263656e74616765206d757374206265206c657373206044820152747468616e206f7220657175616c20746f203130302560581b6064820152608401611d4a565b6103e8613cb9670de0b6b3a76400006005614f55565b613cc39190614f6c565b8210158015613cda5750670de0b6b3a76400008211155b613b7d5760405162461bcd60e51b815260206004820152603060248201527f4d6178206665652070657263656e74616765206d75737420626520626574776560448201526f656e20302e352520616e64203130302560801b6064820152608401611d4a565b6040516321e3780160e01b81526000906001600160a01b038416906321e3780190613d6e908590600401614b69565b602060405180830381865afa158015613d8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613daf9190615080565b90506001816004811115613dc557613dc5614edc565b03610d6b5760405162461bcd60e51b815260206004820152601c60248201527f426f72726f7765724f70733a2054726f766520697320616374697665000000006044820152606401611d4a565b686194049f30f7200000811015612cf35760405162461bcd60e51b815260206004820152603a60248201527f426f72726f7765724f70733a2054726f76652773206e65742064656274206d7560448201527f73742062652067726561746572207468616e206d696e696d756d0000000000006064820152608401611d4a565b60008215613eb957600083613ea68487614f55565b613eb09190614f6c565b9150613a529050565b506000199392505050565b60008115613ef15781613ee068056bc75e2d6310000085614f55565b613eea9190614f6c565b9050610d52565b50600019610d52565b6714d1120d7b160000811015612cf35760405162461bcd60e51b815260206004820152603760248201527f426f72726f7765724f70733a204f7065726174696f6e206d757374206c65617660448201527632903a3937bb32903bb4ba341024a1a9101f1e9021a1a960491b6064820152608401611d4a565b670f43fc2c04ee0000811015612cf35760405162461bcd60e51b815260206004820152604960248201527f426f72726f7765724f70733a20416e206f7065726174696f6e2074686174207760448201527f6f756c6420726573756c7420696e20494352203c204d4352206973206e6f74206064820152681c195c9b5a5d1d195960ba1b608482015260a401611d4a565b600554613b7d906001600160a01b03163384846146fe565b6040516354c4666160e01b815260048101829052600060248201526001600160a01b038616906354c4666190604401600060405180830381600087803b15801561406357600080fd5b505af1158015614077573d6000803e3d6000fd5b50506040516340c10f1960e01b81526001600160a01b03871692506340c10f1991506130fb9086908690600401614f18565b6008546001600160a01b031633146115585760405162461bcd60e51b815260206004820152602960248201527f426f72726f7765724f70733a2043616c6c6572206973206e6f742053746162696044820152681b1a5d1e48141bdbdb60ba1b6064820152608401611d4a565b60008111612cf35760405162461bcd60e51b815260206004820152603760248201527f426f72726f7765724f70733a204465627420696e637265617365207265717569604482015276726573206e6f6e2d7a65726f20646562744368616e676560481b6064820152608401611d4a565b801580614190575081155b613b7d5760405162461bcd60e51b815260206004820152603060248201527f426f72726f7765724f7065726174696f6e733a2043616e6e6f7420776974686460448201526f1c985dc8185b99081859190818dbdb1b60821b6064820152608401611d4a565b8015158061420257508215155b8061420c57508115155b610d6b5760405162461bcd60e51b815260206004820152604660248201527f426f72726f7765724f70733a205468657265206d75737420626520656974686560448201527f72206120636f6c6c61746572616c206368616e6765206f7220612064656274206064820152656368616e676560d01b608482015260a401611d4a565b60008083156142a1575082905060016142a5565b8291505b9250929050565b60008060006142bf8a8a8a8a8a8a6147bf565b9150915060006142d0838387613e91565b9b9a5050505050505050505050565b83156142f5576142f083838361480d565b610d83565b610d83828261483b565b6000610d52680ad78ebc5ac620000083614ec9565b614327680ad78ebc5ac620000083614ec9565b811115613b7d5760405162461bcd60e51b815260206004820152604360248201527f426f72726f7765724f70733a20416d6f756e7420726570616964206d7573742060448201527f6e6f74206265206c6172676572207468616e207468652054726f76652773206460648201526219589d60ea1b608482015260a401611d4a565b6000806000856144285760405163d3d6f84360e01b81526001600160a01b038a169063d3d6f843906143e0908b908b90600401614f18565b6020604051808303816000875af11580156143ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144239190614e9a565b614499565b6040516372423c1760e01b81526001600160a01b038a16906372423c1790614456908b908b90600401614f18565b6020604051808303816000875af1158015614475573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144999190614e9a565b9250831561451957604051639976cf4560e01b81526001600160a01b038a1690639976cf45906144cf908b908990600401614f18565b6020604051808303816000875af11580156144ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145129190614e9a565b915061458f565b604051630930874960e11b81526001600160a01b038a16906312610e9290614547908b908990600401614f18565b60408051808303816000875af1158015614565573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061458991906150a1565b90925090505b96509650969350505050565b60008060006145ae8989898989896147bf565b91509150612fc48282613ec4565b81156145d4576145cf898989878561401a565b6145e1565b6145e18989898787613061565b84156145f6576145f18987614002565b613129565b604051636250216960e01b81526001600160a01b038a1690636250216990614624908a908a90600401614f18565b600060405180830381600087803b15801561463e57600080fd5b505af1158015614652573d6000803e3d6000fd5b50505050505050505050505050565b600082614676670de0b6b3a764000086614f55565b6146809190614f6c565b905081811115610d835760405162461bcd60e51b815260206004820152601d60248201527f4665652065786365656465642070726f7669646564206d6178696d756d0000006044820152606401611d4a565b6000806146dd6120b4565b905060006146e9611fb8565b90506146f6828286613e91565b949350505050565b6001600160a01b0384166147aa576000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114614759576040519150601f19603f3d011682016040523d82523d6000602084013e61475e565b606091505b50509050806147a45760405162461bcd60e51b815260206004820152601260248201527114d95b991a5b99c8109510c819985a5b195960721b6044820152606401611d4a565b50610d83565b610d836001600160a01b038516848484614876565b600080846147d6576147d18689614ec9565b6147e0565b6147e08689614fc1565b9150826147f6576147f18488614ec9565b614800565b6148008488614fc1565b9050965096945050505050565b614816836148d0565b8115610d6b576148298160e00151613efa565b610d6b8160e001518260c00151614944565b6148488160e00151613f72565b614865816020015182606001518360400151858560000151612f5e565b6101008201819052613b7d90612fd1565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610d839085906149ba565b8015612cf35760405162461bcd60e51b815260206004820152603e60248201527f426f72726f7765724f70733a20436f6c6c61746572616c20776974686472617760448201527f616c206e6f74207065726d6974746564205265636f76657279204d6f646500006064820152608401611d4a565b80821015613b7d5760405162461bcd60e51b815260206004820152603e60248201527f426f72726f7765724f70733a2043616e6e6f7420646563726561736520796f7560448201527f722054726f766527732049435220696e205265636f76657279204d6f646500006064820152608401611d4a565b60006149cf6001600160a01b03841683614a14565b905080516000141580156149f45750808060200190518101906149f29190614e7d565b155b15610d6b5782604051635274afe760e01b8152600401611d4a9190614b69565b6060613a528383600084600080856001600160a01b03168486604051614a3a91906150c5565b60006040518083038185875af1925050503d8060008114614a77576040519150601f19603f3d011682016040523d82523d6000602084013e614a7c565b606091505b5091509150614a8c868383614a96565b9695505050505050565b606082614aab57614aa682614ae9565b613a52565b8151158015614ac257506001600160a01b0384163b155b15614ae25783604051639996b31560e01b8152600401611d4a9190614b69565b5080613a52565b805115614af95780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60005b83811015614b2d578181015183820152602001614b15565b50506000910152565b6020815260008251806020840152614b55816040850160208701614b12565b601f01601f19169190910160400192915050565b6001600160a01b0391909116815260200190565b600060208284031215614b8f57600080fd5b5035919050565b6001600160a01b0381168114612cf357600080fd5b8035614bb681614b96565b919050565b600080600060608486031215614bd057600080fd5b833592506020840135614be281614b96565b91506040840135614bf281614b96565b809150509250925092565b60008060008060808587031215614c1357600080fd5b84359350602085013592506040850135614c2c81614b96565b91506060850135614c3c81614b96565b939692955090935050565b6000806000806000806000806000806000806101808d8f031215614c6a57600080fd5b8c35614c7581614b96565b9b5060208d0135614c8581614b96565b9a5060408d0135614c9581614b96565b995060608d0135614ca581614b96565b985060808d0135614cb581614b96565b975060a08d0135614cc581614b96565b9650614cd360c08e01614bab565b9550614ce160e08e01614bab565b9450614cf06101008e01614bab565b9350614cff6101208e01614bab565b9250614d0e6101408e01614bab565b9150614d1d6101608e01614bab565b90509295989b509295989b509295989b565b8015158114612cf357600080fd5b600080600080600080600060e0888a031215614d5857600080fd5b8735965060208801359550604088013594506060880135614d7881614d2f565b93506080880135925060a0880135614d8f81614b96565b915060c0880135614d9f81614b96565b8091505092959891949750929550565b600080600080600060a08688031215614dc757600080fd5b8535945060208601359350604086013592506060860135614de781614b96565b91506080860135614df781614b96565b809150509295509295909350565b60008060008060808587031215614e1b57600080fd5b8435614e2681614b96565b9350602085013592506040850135614c2c81614b96565b600060208284031215614e4f57600080fd5b813560ff81168114613a5257600080fd5b600060208284031215614e7257600080fd5b8135613a5281614b96565b600060208284031215614e8f57600080fd5b8151613a5281614d2f565b600060208284031215614eac57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610d5257610d52614eb3565b634e487b7160e01b600052602160045260246000fd5b94855260208501939093526040840191909152606083015260ff16608082015260a00190565b6001600160a01b03929092168252602082015260400190565b600060208284031215614f4357600080fd5b815161ffff81168114613a5257600080fd5b8082028115828204841417610d5257610d52614eb3565b600082614f8957634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052600160045260246000fd5b600060208284031215614fb657600080fd5b8151613a5281614b96565b80820180821115610d5257610d52614eb3565b6001600160a01b0383168152604081016005831061500257634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b6001600160a01b03948516815260208101939093529083166040830152909116606082015260800190565b60208082526026908201527f426f72726f7765724f7065726174696f6e733a2063616c6c6572206d757374206040820152653132902821ab60d11b606082015260800190565b60006020828403121561509257600080fd5b815160058110613a5257600080fd5b600080604083850312156150b457600080fd5b505080516020909101519092909150565b600082516150d7818460208701614b12565b919091019291505056fef575eb5cdee005607f56587351e18943ddacd11756b9d37980ec251797ff136ca2646970667358221220d3da50ac1b361c1a2ed43b5f9ded6c44f40a2e93c6d39cea466b71e3123a243a64736f6c63430008180033",
  "deployedBytecode": "0x60806040526004361061025c5760003560e01c8063741bef1a11610144578063ae918754116100b6578063d56d6bbe1161007a578063d56d6bbe146106c8578063dc283bb3146106db578063eb1207eb146106fb578063f2fde38b1461071b578063f92d34331461073b578063fe9d03231461075057600080fd5b8063ae91875414610628578063ae9d445c14610648578063b064b0b714610668578063cab666d014610688578063cda775f9146106a857600080fd5b8063887105d311610108578063887105d3146105bc5780638da5cb5b146105d15780638e54c119146105ef5780638f09162b14610602578063a20baee6146104f2578063abfad25d1461061557600080fd5b8063741bef1a1461052e578063794e57241461054e578063795d26c31461056a5780637af110ba1461057f5780637f7dde4a1461059c57600080fd5b80634ff81443116101dd5780636246d497116101a15780636246d497146104755780636c2f041b146104a85780636f0b0c1c146104c8578063715018a6146104dd57806372fe25aa146104f2578063734f622d1461050e57600080fd5b80634ff81443146103d95780635530273c146103f95780635733d58f146104195780635b9fb3cd146104355780635f705f691461045557600080fd5b80633d83908a116102245780633d83908a146103445780633db008c7146103645780634597f6ed146103845780634870dd9a146103a457806348d399e7146103b957600080fd5b806306fdde03146102615780630b622ab2146102b55780630e704d50146102e25780631bf43555146102f95780633cc7422514610324575b600080fd5b34801561026d57600080fd5b5061029f60405180604001604052806012815260200171426f72726f7765724f7065726174696f6e7360701b81525081565b6040516102ac9190614b36565b60405180910390f35b3480156102c157600080fd5b506008546102d5906001600160a01b031681565b6040516102ac9190614b69565b3480156102ee57600080fd5b506102f7610770565b005b34801561030557600080fd5b50610316686194049f30f720000081565b6040519081526020016102ac565b34801561033057600080fd5b506001546102d5906001600160a01b031681565b34801561035057600080fd5b506004546102d5906001600160a01b031681565b34801561037057600080fd5b506007546102d5906001600160a01b031681565b34801561039057600080fd5b50600b546102d5906001600160a01b031681565b3480156103b057600080fd5b5061031660c881565b3480156103c557600080fd5b506005546102d5906001600160a01b031681565b3480156103e557600080fd5b506103166103f4366004614b7d565b610d47565b34801561040557600080fd5b506102f7610414366004614bbb565b610d58565b34801561042557600080fd5b506103166714d1120d7b16000081565b34801561044157600080fd5b50600c546102d5906001600160a01b031681565b34801561046157600080fd5b506102f7610470366004614bfd565b610d70565b34801561048157600080fd5b5060035461049690600160a01b900460ff1681565b60405160ff90911681526020016102ac565b3480156104b457600080fd5b506102f76104c3366004614b7d565b610d89565b3480156104d457600080fd5b506102f76114e8565b3480156104e957600080fd5b506102f7611546565b3480156104fe57600080fd5b50610316670de0b6b3a764000081565b34801561051a57600080fd5b506102f7610529366004614c47565b61155a565b34801561053a57600080fd5b506002546102d5906001600160a01b031681565b34801561055a57600080fd5b50610316670f43fc2c04ee000081565b34801561057657600080fd5b50610316611fb8565b34801561058b57600080fd5b50610316680ad78ebc5ac620000081565b3480156105a857600080fd5b506000546102d5906001600160a01b031681565b3480156105c857600080fd5b506103166120b4565b3480156105dd57600080fd5b506003546001600160a01b03166102d5565b6102f76105fd366004614d3d565b612179565b6102f7610610366004614daf565b61219d565b6102f7610623366004614e05565b612954565b34801561063457600080fd5b50600d546102d5906001600160a01b031681565b34801561065457600080fd5b506102f7610663366004614b7d565b61297a565b34801561067457600080fd5b506102f7610683366004614b7d565b612a0f565b34801561069457600080fd5b50600a546102d5906001600160a01b031681565b3480156106b457600080fd5b506009546102d5906001600160a01b031681565b6102f76106d6366004614bbb565b612a6f565b3480156106e757600080fd5b506102f76106f6366004614bbb565b612a8d565b34801561070757600080fd5b506102f7610716366004614e3d565b612aa0565b34801561072757600080fd5b506102f7610736366004614e60565b612cb8565b34801561074757600080fd5b50610316612cf6565b34801561075c57600080fd5b506006546102d5906001600160a01b031681565b6004805460008054600a54604051635f7a196360e11b81526001600160a01b0394851695928516949091169291839163bef432c6916107b191309101614b69565b602060405180830381865afa1580156107ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f29190614e7d565b604051636328fec360e11b81529091506001600160a01b0385169063c651fd8690610821903390600401614b69565b600060405180830381600087803b15801561083b57600080fd5b505af115801561084f573d6000803e3d6000fd5b5050505061085d8433612d19565b60025460408051630fdb11cf60e01b815290516000926001600160a01b031691630fdb11cf916004808301926020929190829003018187875af11580156108a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cc9190614e9a565b905081156108dd576108dd81612e03565b604051630b07655760e01b81526001600160a01b03861690630b07655790610909903390600401614b69565b600060405180830381600087803b15801561092357600080fd5b505af1158015610937573d6000803e3d6000fd5b50506040516309019aaf60e31b8152600092506001600160a01b038816915063480cd5789061096a903390600401614b69565b602060405180830381865afa158015610987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ab9190614e9a565b90506000866001600160a01b031663d66a2553336040518263ffffffff1660e01b81526004016109db9190614b69565b602060405180830381865afa1580156109f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1c9190614e9a565b90506000876001600160a01b03166385a43ca8336040518263ffffffff1660e01b8152600401610a4c9190614b69565b602060405180830381865afa158015610a69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8d9190614e9a565b9050610aac8633610aa7680ad78ebc5ac620000086614ec9565b612e7b565b8415610ad0576000610ac384600085600089612f5e565b9050610ace81612fd1565b505b604051631fc5750960e31b81526001600160a01b0389169063fe2ba84890610afc903390600401614b69565b600060405180830381600087803b158015610b1657600080fd5b505af1158015610b2a573d6000803e3d6000fd5b50506040516365e89c5760e11b81526001600160a01b038b16925063cbd138ae9150610b5a903390600401614b69565b600060405180830381600087803b158015610b7457600080fd5b505af1158015610b88573d6000803e3d6000fd5b50506040513392506000805160206150e28339815191529150610bb690600090819081908190600190614ef2565b60405180910390a26001600160a01b03871663ab11fadd82610be1680ad78ebc5ac620000086614ec9565b610beb9190614ec9565b836040518363ffffffff1660e01b8152600401610c12929190918252602082015260400190565b600060405180830381600087803b158015610c2c57600080fd5b505af1158015610c40573d6000803e3d6000fd5b50505050856001600160a01b0316639dc29fac33680ad78ebc5ac620000085610c699190614ec9565b6040518363ffffffff1660e01b8152600401610c86929190614f18565b600060405180830381600087803b158015610ca057600080fd5b505af1158015610cb4573d6000803e3d6000fd5b5050600654610cdd925089915088906001600160a01b0316680ad78ebc5ac62000006000613061565b604051636250216960e01b81526001600160a01b03881690636250216990610d0b9033908790600401614f18565b600060405180830381600087803b158015610d2557600080fd5b505af1158015610d39573d6000803e3d6000fd5b505050505050505050505050565b6000610d5282613134565b92915050565b610d6b3384600080600087876000613149565b505050565b610d83336000856001600087878b613149565b50505050565b600454600c546001600160a01b039182169116610da68233612d19565b604051636328fec360e11b81526001600160a01b0383169063c651fd8690610dd2903390600401614b69565b600060405180830381600087803b158015610dec57600080fd5b505af1158015610e00573d6000803e3d6000fd5b50506040516392b7659b60e01b8152600092506001600160a01b03851691506392b7659b90610e33903390600401614b69565b602060405180830381865afa158015610e50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e749190614f31565b90506000836001600160a01b03166385a43ca8336040518263ffffffff1660e01b8152600401610ea49190614b69565b602060405180830381865afa158015610ec1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee59190614e9a565b90506000846001600160a01b031663d66a2553336040518263ffffffff1660e01b8152600401610f159190614b69565b602060405180830381865afa158015610f32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f569190614e9a565b600354909150600090606490610f77908490600160a01b900460ff16614f55565b610f819190614f6c565b600a54909150600090610fa09088906001600160a01b0316848b6138f5565b604051639976cf4560e01b81529091506001600160a01b03881690639976cf4590610fd19033908590600401614f18565b6020604051808303816000875af1158015610ff0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110149190614e9a565b506040516339b3e85d60e21b81526000906001600160a01b0389169063e6cfa17490611044903390600401614b69565b602060405180830381865afa158015611061573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110859190614e9a565b6040516323cc9ed960e21b815261ffff88166004820152602481018790529091506001600160a01b03881690638f327b6490604401600060405180830381600087803b1580156110d457600080fd5b505af11580156110e8573d6000803e3d6000fd5b5050604051635c30639760e11b815261ffff89166004820152602481018490526001600160a01b038a16925063b860c72e9150604401600060405180830381600087803b15801561113857600080fd5b505af115801561114c573d6000803e3d6000fd5b505050506000876001600160a01b0316637c3a00fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611190573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b49190614f31565b604051635b5e7c1960e11b815261ffff82166004820152602481018890529091506001600160a01b0389169063b6bcf83290604401600060405180830381600087803b15801561120357600080fd5b505af1158015611217573d6000803e3d6000fd5b50506040516379b381e360e01b815261ffff84166004820152602481018590526001600160a01b038b1692506379b381e39150604401600060405180830381600087803b15801561126757600080fd5b505af115801561127b573d6000803e3d6000fd5b50505050886001600160a01b0316637412e008338a6001600160a01b0316637c3a00fd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f19190614f31565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015261ffff166024820152604401600060405180830381600087803b15801561133b57600080fd5b505af115801561134f573d6000803e3d6000fd5b5050505060006114438a6001600160a01b031663480cd578336040518263ffffffff1660e01b81526004016113849190614b69565b602060405180830381865afa1580156113a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c59190614e9a565b600260009054906101000a90046001600160a01b03166001600160a01b0316630fdb11cf6040518163ffffffff1660e01b81526004016020604051808303816000875af115801561141a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143e9190614e9a565b613a33565b604051632f8a426f60e21b81529091506001600160a01b038b169063be2909bc906114749033908590600401614f18565b600060405180830381600087803b15801561148e57600080fd5b505af11580156114a2573d6000803e3d6000fd5b50506040518681523392507fde81352e4f17b151de0a2f2a30a50eeb111a437414e8f241248158063302a551915060200160405180910390a25050505050505050505050565b60095460405163b32beb5b60e01b81526001600160a01b039091169063b32beb5b90611518903390600401614b69565b600060405180830381600087803b15801561153257600080fd5b505af1158015610d83573d6000803e3d6000fd5b61154e613a59565b6115586000613a86565b565b611562613a59565b61156b8c613ad8565b6001600160a01b038b1615611583576115838b613ad8565b61158c8a613ad8565b61159589613ad8565b61159e88613ad8565b6115a786613ad8565b6115b085613ad8565b6115b984613ad8565b6115c283613ad8565b6115cb82613ad8565b6115d481613ad8565b6115dd87613ad8565b80600460006101000a8154816001600160a01b0302191690836001600160a01b031602179055508b6000806101000a8154816001600160a01b0302191690836001600160a01b0316021790555088600160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555082600860006101000a8154816001600160a01b0302191690836001600160a01b0316021790555087600660006101000a8154816001600160a01b0302191690836001600160a01b0316021790555089600960006101000a8154816001600160a01b0302191690836001600160a01b0316021790555083600260006101000a8154816001600160a01b0302191690836001600160a01b0316021790555081600d60006101000a8154816001600160a01b0302191690836001600160a01b0316021790555085600a60006101000a8154816001600160a01b0302191690836001600160a01b0316021790555084600b60006101000a8154816001600160a01b0302191690836001600160a01b0316021790555084600760006101000a8154816001600160a01b0302191690836001600160a01b031602179055508a600560006101000a8154816001600160a01b0302191690836001600160a01b0316021790555086600c60006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060006001600160a01b0316896001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611820573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118449190614fa4565b6001600160a01b03161415806118cf5750600154604080516348d399e760e01b815290516001600160a01b03808f169316916348d399e79160048083019260209291908290030181865afa1580156118a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c49190614fa4565b6001600160a01b0316145b80156119ce575060006001600160a01b03168c6001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561191f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119439190614fa4565b6001600160a01b03161415806119ce5750600054604080516348d399e760e01b815290516001600160a01b03808f169316916348d399e79160048083019260209291908290030181865afa15801561199f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c39190614fa4565b6001600160a01b0316145b8015611acd575060006001600160a01b0316836001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a429190614fa4565b6001600160a01b0316141580611acd5750600854604080516348d399e760e01b815290516001600160a01b03808f169316916348d399e79160048083019260209291908290030181865afa158015611a9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac29190614fa4565b6001600160a01b0316145b8015611bcc575060006001600160a01b03168a6001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b419190614fa4565b6001600160a01b0316141580611bcc5750600954604080516348d399e760e01b815290516001600160a01b03808f169316916348d399e79160048083019260209291908290030181865afa158015611b9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc19190614fa4565b6001600160a01b0316145b8015611ccb575060075460408051630cab666d60e41b815290516000926001600160a01b03169163cab666d09160048083019260209291908290030181865afa158015611c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c419190614fa4565b6001600160a01b03161480611ccb57506007546040805163724d374560e01b815290516001600160a01b03808f1693169163724d37459160048083019260209291908290030181865afa158015611c9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc09190614fa4565b6001600160a01b0316145b611d535760405162461bcd60e51b815260206004820152604860248201527f5468652073616d6520636f6c6c61746572616c2061646472657373206d75737460448201527f206265207573656420666f722074686520656e7469726520736574206f6620636064820152676f6e74726163747360c01b608482015260a4015b60405180910390fd5b7f143219c9e69b09e07e095fcc889b43d8f46ca892bba65f08dc3a0050869a567881604051611d829190614b69565b60405180910390a17f78f058b189175430c48dc02699e3a0031ea4ff781536dc2fab847de4babdd8828c604051611db99190614b69565b60405180910390a17f5ee0cae2f063ed938bb55046f6a932fb6ae792bf43624806bb90abe68a50be9b89604051611df09190614b69565b60405180910390a17f82966d27eea39b038ee0fa30cd16532bb24f6e65d31cb58fb227aa5766cdcc7f83604051611e279190614b69565b60405180910390a17fcfb07d791fcafc032b35837b50eb84b74df518cf4cc287e8084f47630fa70fa088604051611e5e9190614b69565b60405180910390a17fe67f36a6e961157d6eff83b91f3af5a62131ceb6f04954ef74f51c1c05e7f88d8a604051611e959190614b69565b60405180910390a17f8c537274438aa850a330284665d81a85dd38267d09e4050d416bfc94142db26484604051611ecc9190614b69565b60405180910390a17f65f4cf077bc01e4742eb5ad98326f6e95b63548ea24b17f8d5e823111fe7880082604051611f039190614b69565b60405180910390a17f547e9055f019d1e165f0ca2133494723cb248f8536192c218254285fc43c566886604051611f3a9190614b69565b60405180910390a17f38335c64466e2376ab931166337e19127650d842036ebe01da1ba3e5c1255ebb85604051611f719190614b69565b60405180910390a17ffba7421f3d1a98e80d72491a6e0523133444a5842cc7310951d8b82d075a7dff8b604051611fa89190614b69565b60405180910390a1610d39611546565b60008054604080516314a6bf0f60e01b8152905183926001600160a01b0316916314a6bf0f9160048083019260209291908290030181865afa158015612002573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120269190614e9a565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166314a6bf0f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561207d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a19190614e9a565b90506120ad8183614fc1565b9250505090565b6000805460408051631529a63960e01b8152905183926001600160a01b031691631529a6399160048083019260209291908290030181865afa1580156120fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121229190614e9a565b90506000600160009054906101000a90046001600160a01b03166001600160a01b0316631529a6396040518163ffffffff1660e01b8152600401602060405180830381865afa15801561207d573d6000803e3d6000fd5b61218283613b81565b9250612194338787878787878e613149565b50505050505050565b6040805160808082018352600480546001600160a01b039081168452600080548216602080870191909152600a54831686880152600c54831660608088019190915287516101008101895283815280830184905280890184905290810183905294850182905260a0850182905260c0850182905260e085018290526002548751630fdb11cf60e01b8152975196979596931694630fdb11cf948181019492939183900301908290875af1158015612258573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227c9190614e9a565b80825260009061228b90613c0a565b90506122978882613c27565b82516122a39033613d3f565b60408201879052806122df576122c383600001518460400151898b6138f5565b602083018190526040830180516122db908390614fc1565b9052505b6122ec8260400151613e12565b6122f98260400151613134565b6060830181905261230c5761230c614f8e565b61231586613b81565b955061232a8683606001518460000151613e91565b6080830152606082015161233f908790613ec4565b60a0830152801561235c576123578260800151613efa565b61238f565b6123698260800151613f72565b6000612382876001856060015160018760000151612f5e565b905061238d81612fd1565b505b82600001516001600160a01b0316637412e0083385606001516001600160a01b0316637c3a00fd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124099190614f31565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015261ffff166024820152604401600060405180830381600087803b15801561245357600080fd5b505af1158015612467573d6000803e3d6000fd5b5050845160405163953f0bb160e01b81526001600160a01b03909116925063953f0bb1915061249d903390600190600401614fd4565b600060405180830381600087803b1580156124b757600080fd5b505af11580156124cb573d6000803e3d6000fd5b505084516040516372423c1760e01b81526001600160a01b0390911692506372423c1791506125009033908a90600401614f18565b6020604051808303816000875af115801561251f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125439190614e9a565b5082516060830151604051639976cf4560e01b81526001600160a01b0390921691639976cf459161257991339190600401614f18565b6020604051808303816000875af1158015612598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125bc9190614e9a565b508251604051630459b7eb60e51b81526001600160a01b0390911690638b36fd60906125ee9033904290600401614f18565b600060405180830381600087803b15801561260857600080fd5b505af115801561261c573d6000803e3d6000fd5b505050506000612630878460000151613a33565b8451604051632f8a426f60e21b81529192506001600160a01b03169063be2909bc906126629033908590600401614f18565b600060405180830381600087803b15801561267c57600080fd5b505af1158015612690573d6000803e3d6000fd5b505085516040516382fe3eb960e01b81526001600160a01b0390911692506382fe3eb991506126c3903390600401614b69565b600060405180830381600087803b1580156126dd57600080fd5b505af11580156126f1573d6000803e3d6000fd5b50508551604051630c7940bd60e11b81526001600160a01b0390911692506318f2817a9150612724903390600401614b69565b6020604051808303816000875af1158015612743573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127679190614e9a565b60c0840152600d5460a08401516040516346f7cf8760e01b81526001600160a01b03909216916346f7cf87916127a6913391908b908b9060040161500f565b600060405180830381600087803b1580156127c057600080fd5b505af11580156127d4573d6000803e3d6000fd5b505085516040516315d549f160e01b81526001600160a01b0390911692506315d549f19150612807903390600401614b69565b6020604051808303816000875af1158015612826573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284a9190614e9a565b60e0840181905260405190815233907f59cfd0cd754bc5748b6770e94a4ffa5f678d885cb899dcfadc5734edb97c67ab9060200160405180910390a2612894846020015188614002565b6128ad84602001518560400151338b876040015161401a565b602084015160408501516006546128d99291906001600160a01b0316680ad78ebc5ac62000008061401a565b606083015160c084015160405133926000805160206150e283398151915292612908926000918d918390614ef2565b60405180910390a260208084015160405190815233917f5d032cf8244d18503d44f7171954f352ff41fa2df69660eb897f4db36efe808e910160405180910390a2505050505050505050565b61295c6140a9565b61296583613b81565b9250610d838460008060008787876000613149565b6007546001600160a01b031633146129a45760405162461bcd60e51b8152600401611d4a9061503a565b600a54600754604051632770a7eb60e21b81526001600160a01b0392831692639dc29fac926129da929116908590600401614f18565b600060405180830381600087803b1580156129f457600080fd5b505af1158015612a08573d6000803e3d6000fd5b5050505050565b6007546001600160a01b03163314612a395760405162461bcd60e51b8152600401611d4a9061503a565b600a546007546040516340c10f1960e01b81526001600160a01b03928316926340c10f19926129da929116908590600401614f18565b612a7883613b81565b9250610d6b3360008060008787876000613149565b610d6b3360008560008087876000613149565b600b60009054906101000a90046001600160a01b03166001600160a01b031663e2c6d41c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612af3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b179190614fa4565b6001600160a01b0316336001600160a01b03161480612bbd5750600b60009054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba89190614fa4565b6001600160a01b0316336001600160a01b0316145b612c255760405162461bcd60e51b815260206004820152603360248201527f426f72726f7765724f70733a204f6e6c7920676f7665726e616e63652063616e6044820152721031b0b636103a3434b990333ab731ba34b7b760691b6064820152608401611d4a565b60648160ff161115612c985760405162461bcd60e51b815260206004820152603660248201527f426f72726f7765724f70733a20526566696e616e63696e672066656520706572604482015275063656e74616765206d757374206265203c3d203130360541b6064820152608401611d4a565b6003805460ff909216600160a01b0260ff60a01b19909216919091179055565b612cc0613a59565b6001600160a01b038116612cea576000604051631e4fbdf760e01b8152600401611d4a9190614b69565b612cf381613a86565b50565b6103e8612d0c670de0b6b3a76400006005614f55565b612d169190614f6c565b81565b6040516321e3780160e01b81526000906001600160a01b038416906321e3780190612d48908590600401614b69565b602060405180830381865afa158015612d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d899190615080565b90506001816004811115612d9f57612d9f614edc565b14610d6b5760405162461bcd60e51b815260206004820152602e60248201527f426f72726f7765724f70733a2054726f766520646f6573206e6f74206578697360448201526d1d081bdc881a5cc818db1bdcd95960921b6064820152608401611d4a565b612e0c81613c0a565b15612cf35760405162461bcd60e51b815260206004820152603960248201527f426f72726f7765724f70733a204f7065726174696f6e206e6f74207065726d696044820152787474656420647572696e67205265636f76657279204d6f646560381b6064820152608401611d4a565b6040516370a0823160e01b815281906001600160a01b038516906370a0823190612ea9908690600401614b69565b602060405180830381865afa158015612ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eea9190614e9a565b1015610d6b5760405162461bcd60e51b815260206004820152603d60248201527f426f72726f7765724f70733a2043616c6c657220646f65736e7420686176652060448201527f656e6f756768206d55534420746f206d616b652072657061796d656e740000006064820152608401611d4a565b600080612f696120b4565b90506000612f75611fb8565b905086612f8b57612f868883614ec9565b612f95565b612f958883614fc1565b915084612fab57612fa68682614ec9565b612fb5565b612fb58682614fc1565b90506000612fc4838387613e91565b9998505050505050505050565b6714d1120d7b160000811015612cf35760405162461bcd60e51b815260206004820152604960248201527f426f72726f7765724f70733a20416e206f7065726174696f6e2074686174207760448201527f6f756c6420726573756c7420696e20544352203c20434352206973206e6f74206064820152681c195c9b5a5d1d195960ba1b608482015260a401611d4a565b60405163ab11fadd60e01b815260048101839052602481018290526001600160a01b0386169063ab11fadd90604401600060405180830381600087803b1580156130aa57600080fd5b505af11580156130be573d6000803e3d6000fd5b50505050836001600160a01b0316639dc29fac8483856130de9190614fc1565b6040518363ffffffff1660e01b81526004016130fb929190614f18565b600060405180830381600087803b15801561311557600080fd5b505af1158015613129573d6000803e3d6000fd5b505050505050505050565b6000610d52680ad78ebc5ac620000083614fc1565b60408051608081018252600480546001600160a01b0390811680845260005482166020850152600a54821684860152600c5490911660608401529251636328fec360e11b815291929163c651fd86916131a4918d9101614b69565b600060405180830381600087803b1580156131be57600080fd5b505af11580156131d2573d6000803e3d6000fd5b50505050613268604051806102400160405280600081526020016000815260200160008152602001600015158152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b81516040516310b4879560e31b81526001600160a01b03909116906385a43ca890613297908d90600401614b69565b602060405180830381865afa1580156132b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132d89190614e9a565b6101c0820181905260608301516040516321ddc20f60e01b81526004810192909252602482018a90526001600160a01b0316906321ddc20f906044016040805180830381865afa158015613330573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061335491906150a1565b6102008301526101e082015260025460408051630fdb11cf60e01b815290516001600160a01b0390921691630fdb11cf9160048082019260209290919082900301816000875af11580156133ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133d09190614e9a565b8082526133dc90613c0a565b15156102208201528615613402576133f983826102200151613c27565b61340288614115565b61340c8987614185565b6134178989886141f5565b8151613423908b612d19565b336001600160a01b038b16148061345957506008546001600160a01b03163314801561344f5750600086115b8015613459575087155b61346557613465614f8e565b8151604051630b07655760e01b81526001600160a01b0390911690630b07655790613494908d90600401614b69565b600060405180830381600087803b1580156134ae57600080fd5b505af11580156134c2573d6000803e3d6000fd5b505050506134d0868a61428d565b151560608301526020820152604081018890528680156134f35750806102200151155b156135295761350c826000015183604001518a866138f5565b6101208201819052604082018051613525908390614fc1565b9052505b815160405163d66a255360e01b81526001600160a01b039091169063d66a255390613558908d90600401614b69565b602060405180830381865afa158015613575573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135999190614e9a565b608082015281516040516309019aaf60e31b81526001600160a01b039091169063480cd578906135cd908d90600401614b69565b602060405180830381865afa1580156135ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061360e9190614e9a565b60a0820181905260808201518251613627929190613e91565b8160c00181815250506136578160a0015182608001518360200151846060015185604001518c87600001516142ac565b60e082015260a081015189111561367057613670614f8e565b6136818161022001518a89846142df565b8615801561368f5750600088115b156136dd576136b881604001516136a983608001516142ff565b6136b39190614ec9565b613e12565b6136ca81608001518260400151614314565b6136dd82604001518b8360400151612e7b565b6136fb82600001518b8360200151846060015185604001518c6143a8565b6101808401526101608301526101408201528151604051630c7940bd60e11b81526001600160a01b03909116906318f2817a9061373c908d90600401614b69565b6020604051808303816000875af115801561375b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061377f9190614e9a565b816101a001818152505060006137ad8260a0015183608001518460200151856060015186604001518d61459b565b600d5460405163015f109360e51b81529192506001600160a01b031690632be21260906137e4908e9085908b908b9060040161500f565b600060405180830381600087803b1580156137fe57600080fd5b505af1158015613812573d6000803e3d6000fd5b505050508a6001600160a01b03166000805160206150e2833981519152836101600151846101800151856101400151866101a0015160028081111561385957613859614edc565b60405161386a959493929190614ef2565b60405180910390a261012082015160405190815233907f5d032cf8244d18503d44f7171954f352ff41fa2df69660eb897f4db36efe808e9060200160405180910390a26138e88360200151846040015133856020015186606001518d6138d557876101e001516138d7565b8e5b8861020001518f8a604001516145bc565b5050505050505050505050565b6000846001600160a01b0316635dba4c4a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561393257600080fd5b505af1158015613946573d6000803e3d6000fd5b5050604051630631203b60e41b815260048101869052600092506001600160a01b038816915063631203b090602401602060405180830381865afa158015613992573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139b69190614e9a565b90506139c3818585614661565b6007546040516340c10f1960e01b81526001600160a01b03878116926340c10f19926139f792909116908590600401614f18565b600060405180830381600087803b158015613a1157600080fd5b505af1158015613a25573d6000803e3d6000fd5b509298975050505050505050565b6000670f43fc2c04ee0000613a488385614f55565b613a529190614f6c565b9392505050565b6003546001600160a01b03163314611558573360405163118cdaa760e01b8152600401611d4a9190614b69565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038116613b2e5760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f206164647265737300006044820152606401611d4a565b803b80613b7d5760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f6044820152606401611d4a565b5050565b6005546000906001600160a01b0316613b9b575034919050565b3415613c065760405162461bcd60e51b815260206004820152603460248201527f426f72726f7765724f7065726174696f6e733a20455243323020636f6c6c61746044820152736572616c206e65656465642c206e6f742042544360601b6064820152608401611d4a565b5090565b600080613c16836146d2565b6714d1120d7b160000119392505050565b8015613ca357670de0b6b3a7640000821115613b7d5760405162461bcd60e51b815260206004820152603560248201527f4d6178206665652070657263656e74616765206d757374206265206c657373206044820152747468616e206f7220657175616c20746f203130302560581b6064820152608401611d4a565b6103e8613cb9670de0b6b3a76400006005614f55565b613cc39190614f6c565b8210158015613cda5750670de0b6b3a76400008211155b613b7d5760405162461bcd60e51b815260206004820152603060248201527f4d6178206665652070657263656e74616765206d75737420626520626574776560448201526f656e20302e352520616e64203130302560801b6064820152608401611d4a565b6040516321e3780160e01b81526000906001600160a01b038416906321e3780190613d6e908590600401614b69565b602060405180830381865afa158015613d8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613daf9190615080565b90506001816004811115613dc557613dc5614edc565b03610d6b5760405162461bcd60e51b815260206004820152601c60248201527f426f72726f7765724f70733a2054726f766520697320616374697665000000006044820152606401611d4a565b686194049f30f7200000811015612cf35760405162461bcd60e51b815260206004820152603a60248201527f426f72726f7765724f70733a2054726f76652773206e65742064656274206d7560448201527f73742062652067726561746572207468616e206d696e696d756d0000000000006064820152608401611d4a565b60008215613eb957600083613ea68487614f55565b613eb09190614f6c565b9150613a529050565b506000199392505050565b60008115613ef15781613ee068056bc75e2d6310000085614f55565b613eea9190614f6c565b9050610d52565b50600019610d52565b6714d1120d7b160000811015612cf35760405162461bcd60e51b815260206004820152603760248201527f426f72726f7765724f70733a204f7065726174696f6e206d757374206c65617660448201527632903a3937bb32903bb4ba341024a1a9101f1e9021a1a960491b6064820152608401611d4a565b670f43fc2c04ee0000811015612cf35760405162461bcd60e51b815260206004820152604960248201527f426f72726f7765724f70733a20416e206f7065726174696f6e2074686174207760448201527f6f756c6420726573756c7420696e20494352203c204d4352206973206e6f74206064820152681c195c9b5a5d1d195960ba1b608482015260a401611d4a565b600554613b7d906001600160a01b03163384846146fe565b6040516354c4666160e01b815260048101829052600060248201526001600160a01b038616906354c4666190604401600060405180830381600087803b15801561406357600080fd5b505af1158015614077573d6000803e3d6000fd5b50506040516340c10f1960e01b81526001600160a01b03871692506340c10f1991506130fb9086908690600401614f18565b6008546001600160a01b031633146115585760405162461bcd60e51b815260206004820152602960248201527f426f72726f7765724f70733a2043616c6c6572206973206e6f742053746162696044820152681b1a5d1e48141bdbdb60ba1b6064820152608401611d4a565b60008111612cf35760405162461bcd60e51b815260206004820152603760248201527f426f72726f7765724f70733a204465627420696e637265617365207265717569604482015276726573206e6f6e2d7a65726f20646562744368616e676560481b6064820152608401611d4a565b801580614190575081155b613b7d5760405162461bcd60e51b815260206004820152603060248201527f426f72726f7765724f7065726174696f6e733a2043616e6e6f7420776974686460448201526f1c985dc8185b99081859190818dbdb1b60821b6064820152608401611d4a565b8015158061420257508215155b8061420c57508115155b610d6b5760405162461bcd60e51b815260206004820152604660248201527f426f72726f7765724f70733a205468657265206d75737420626520656974686560448201527f72206120636f6c6c61746572616c206368616e6765206f7220612064656274206064820152656368616e676560d01b608482015260a401611d4a565b60008083156142a1575082905060016142a5565b8291505b9250929050565b60008060006142bf8a8a8a8a8a8a6147bf565b9150915060006142d0838387613e91565b9b9a5050505050505050505050565b83156142f5576142f083838361480d565b610d83565b610d83828261483b565b6000610d52680ad78ebc5ac620000083614ec9565b614327680ad78ebc5ac620000083614ec9565b811115613b7d5760405162461bcd60e51b815260206004820152604360248201527f426f72726f7765724f70733a20416d6f756e7420726570616964206d7573742060448201527f6e6f74206265206c6172676572207468616e207468652054726f76652773206460648201526219589d60ea1b608482015260a401611d4a565b6000806000856144285760405163d3d6f84360e01b81526001600160a01b038a169063d3d6f843906143e0908b908b90600401614f18565b6020604051808303816000875af11580156143ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144239190614e9a565b614499565b6040516372423c1760e01b81526001600160a01b038a16906372423c1790614456908b908b90600401614f18565b6020604051808303816000875af1158015614475573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144999190614e9a565b9250831561451957604051639976cf4560e01b81526001600160a01b038a1690639976cf45906144cf908b908990600401614f18565b6020604051808303816000875af11580156144ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145129190614e9a565b915061458f565b604051630930874960e11b81526001600160a01b038a16906312610e9290614547908b908990600401614f18565b60408051808303816000875af1158015614565573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061458991906150a1565b90925090505b96509650969350505050565b60008060006145ae8989898989896147bf565b91509150612fc48282613ec4565b81156145d4576145cf898989878561401a565b6145e1565b6145e18989898787613061565b84156145f6576145f18987614002565b613129565b604051636250216960e01b81526001600160a01b038a1690636250216990614624908a908a90600401614f18565b600060405180830381600087803b15801561463e57600080fd5b505af1158015614652573d6000803e3d6000fd5b50505050505050505050505050565b600082614676670de0b6b3a764000086614f55565b6146809190614f6c565b905081811115610d835760405162461bcd60e51b815260206004820152601d60248201527f4665652065786365656465642070726f7669646564206d6178696d756d0000006044820152606401611d4a565b6000806146dd6120b4565b905060006146e9611fb8565b90506146f6828286613e91565b949350505050565b6001600160a01b0384166147aa576000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114614759576040519150601f19603f3d011682016040523d82523d6000602084013e61475e565b606091505b50509050806147a45760405162461bcd60e51b815260206004820152601260248201527114d95b991a5b99c8109510c819985a5b195960721b6044820152606401611d4a565b50610d83565b610d836001600160a01b038516848484614876565b600080846147d6576147d18689614ec9565b6147e0565b6147e08689614fc1565b9150826147f6576147f18488614ec9565b614800565b6148008488614fc1565b9050965096945050505050565b614816836148d0565b8115610d6b576148298160e00151613efa565b610d6b8160e001518260c00151614944565b6148488160e00151613f72565b614865816020015182606001518360400151858560000151612f5e565b6101008201819052613b7d90612fd1565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610d839085906149ba565b8015612cf35760405162461bcd60e51b815260206004820152603e60248201527f426f72726f7765724f70733a20436f6c6c61746572616c20776974686472617760448201527f616c206e6f74207065726d6974746564205265636f76657279204d6f646500006064820152608401611d4a565b80821015613b7d5760405162461bcd60e51b815260206004820152603e60248201527f426f72726f7765724f70733a2043616e6e6f7420646563726561736520796f7560448201527f722054726f766527732049435220696e205265636f76657279204d6f646500006064820152608401611d4a565b60006149cf6001600160a01b03841683614a14565b905080516000141580156149f45750808060200190518101906149f29190614e7d565b155b15610d6b5782604051635274afe760e01b8152600401611d4a9190614b69565b6060613a528383600084600080856001600160a01b03168486604051614a3a91906150c5565b60006040518083038185875af1925050503d8060008114614a77576040519150601f19603f3d011682016040523d82523d6000602084013e614a7c565b606091505b5091509150614a8c868383614a96565b9695505050505050565b606082614aab57614aa682614ae9565b613a52565b8151158015614ac257506001600160a01b0384163b155b15614ae25783604051639996b31560e01b8152600401611d4a9190614b69565b5080613a52565b805115614af95780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60005b83811015614b2d578181015183820152602001614b15565b50506000910152565b6020815260008251806020840152614b55816040850160208701614b12565b601f01601f19169190910160400192915050565b6001600160a01b0391909116815260200190565b600060208284031215614b8f57600080fd5b5035919050565b6001600160a01b0381168114612cf357600080fd5b8035614bb681614b96565b919050565b600080600060608486031215614bd057600080fd5b833592506020840135614be281614b96565b91506040840135614bf281614b96565b809150509250925092565b60008060008060808587031215614c1357600080fd5b84359350602085013592506040850135614c2c81614b96565b91506060850135614c3c81614b96565b939692955090935050565b6000806000806000806000806000806000806101808d8f031215614c6a57600080fd5b8c35614c7581614b96565b9b5060208d0135614c8581614b96565b9a5060408d0135614c9581614b96565b995060608d0135614ca581614b96565b985060808d0135614cb581614b96565b975060a08d0135614cc581614b96565b9650614cd360c08e01614bab565b9550614ce160e08e01614bab565b9450614cf06101008e01614bab565b9350614cff6101208e01614bab565b9250614d0e6101408e01614bab565b9150614d1d6101608e01614bab565b90509295989b509295989b509295989b565b8015158114612cf357600080fd5b600080600080600080600060e0888a031215614d5857600080fd5b8735965060208801359550604088013594506060880135614d7881614d2f565b93506080880135925060a0880135614d8f81614b96565b915060c0880135614d9f81614b96565b8091505092959891949750929550565b600080600080600060a08688031215614dc757600080fd5b8535945060208601359350604086013592506060860135614de781614b96565b91506080860135614df781614b96565b809150509295509295909350565b60008060008060808587031215614e1b57600080fd5b8435614e2681614b96565b9350602085013592506040850135614c2c81614b96565b600060208284031215614e4f57600080fd5b813560ff81168114613a5257600080fd5b600060208284031215614e7257600080fd5b8135613a5281614b96565b600060208284031215614e8f57600080fd5b8151613a5281614d2f565b600060208284031215614eac57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610d5257610d52614eb3565b634e487b7160e01b600052602160045260246000fd5b94855260208501939093526040840191909152606083015260ff16608082015260a00190565b6001600160a01b03929092168252602082015260400190565b600060208284031215614f4357600080fd5b815161ffff81168114613a5257600080fd5b8082028115828204841417610d5257610d52614eb3565b600082614f8957634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052600160045260246000fd5b600060208284031215614fb657600080fd5b8151613a5281614b96565b80820180821115610d5257610d52614eb3565b6001600160a01b0383168152604081016005831061500257634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b6001600160a01b03948516815260208101939093529083166040830152909116606082015260800190565b60208082526026908201527f426f72726f7765724f7065726174696f6e733a2063616c6c6572206d757374206040820152653132902821ab60d11b606082015260800190565b60006020828403121561509257600080fd5b815160058110613a5257600080fd5b600080604083850312156150b457600080fd5b505080516020909101519092909150565b600082516150d7818460208701614b12565b919091019291505056fef575eb5cdee005607f56587351e18943ddacd11756b9d37980ec251797ff136ca2646970667358221220d3da50ac1b361c1a2ed43b5f9ded6c44f40a2e93c6d39cea466b71e3123a243a64736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 27315,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "activePool",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IActivePool)27880"
      },
      {
        "astId": 27318,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "defaultPool",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IDefaultPool)28219"
      },
      {
        "astId": 27322,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPriceFeed)28636"
      },
      {
        "astId": 8,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4703,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "refinancingFeePercentage",
        "offset": 20,
        "slot": "3",
        "type": "t_uint8"
      },
      {
        "astId": 4706,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "troveManager",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ITroveManager)29448"
      },
      {
        "astId": 4708,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "collateralAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4710,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "gasPoolAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4712,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "pcvAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 4714,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "stabilityPoolAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 4717,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "collSurplusPool",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(ICollSurplusPool)28180"
      },
      {
        "astId": 4720,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "musd",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IMUSD)29929"
      },
      {
        "astId": 4723,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "pcv",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IPCV)28556"
      },
      {
        "astId": 4726,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "interestRateManager",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IInterestRateManager)28390"
      },
      {
        "astId": 4729,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "sortedTroves",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(ISortedTroves)28784"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IActivePool)27880": {
        "encoding": "inplace",
        "label": "contract IActivePool",
        "numberOfBytes": "20"
      },
      "t_contract(ICollSurplusPool)28180": {
        "encoding": "inplace",
        "label": "contract ICollSurplusPool",
        "numberOfBytes": "20"
      },
      "t_contract(IDefaultPool)28219": {
        "encoding": "inplace",
        "label": "contract IDefaultPool",
        "numberOfBytes": "20"
      },
      "t_contract(IInterestRateManager)28390": {
        "encoding": "inplace",
        "label": "contract IInterestRateManager",
        "numberOfBytes": "20"
      },
      "t_contract(IMUSD)29929": {
        "encoding": "inplace",
        "label": "contract IMUSD",
        "numberOfBytes": "20"
      },
      "t_contract(IPCV)28556": {
        "encoding": "inplace",
        "label": "contract IPCV",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)28636": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(ISortedTroves)28784": {
        "encoding": "inplace",
        "label": "contract ISortedTroves",
        "numberOfBytes": "20"
      },
      "t_contract(ITroveManager)29448": {
        "encoding": "inplace",
        "label": "contract ITroveManager",
        "numberOfBytes": "20"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}