{
  "address": "0xebd0b1638f13647b6E655E7565033cf0E522E096",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_governanceTimeDelay",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_borrowerOperationsAddress",
          "type": "address"
        }
      ],
      "name": "BorrowerOperationsAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_collateralAddress",
          "type": "address"
        }
      ],
      "name": "CollateralAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "CollateralWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_musdTokenAddress",
          "type": "address"
        }
      ],
      "name": "MUSDTokenAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "MUSDWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_paidDebt",
          "type": "uint256"
        }
      ],
      "name": "PCVDebtPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "PCVFeePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "RecipientAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "RecipientRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_council",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "RolesSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BOOTSTRAP_LOAN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_SPLIT_MAX",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "addRecipientToWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_recipients",
          "type": "address[]"
        }
      ],
      "name": "addRecipientsToWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperations",
      "outputs": [
        {
          "internalType": "contract BorrowerOperations",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelChangingRoles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "changingRolesInitiated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralERC20",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "council",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtToPay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositToStabilityPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeSplitPercentage",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalizeChangingRoles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governanceTimeDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "musd",
      "outputs": [
        {
          "internalType": "contract IMUSD",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_musdToBurn",
          "type": "uint256"
        }
      ],
      "name": "payDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingCouncilAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingTreasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "recipientsWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "removeRecipientFromWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_recipients",
          "type": "address[]"
        }
      ],
      "name": "removeRecipientsFromWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_musdTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrowerOperations",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralERC20",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "name": "setFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_feeSplitPercentage",
          "type": "uint8"
        }
      ],
      "name": "setFeeSplit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_council",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "startChangingRoles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawMUSD",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2a337a76b397651b6bcb0510d0ff519c32a461cbf08ec905ecfabfcb480962fc",
  "receipt": {
    "to": null,
    "from": "0x6e80164ea60673D64d5d6228beb684a1274Bb017",
    "contractAddress": "0xebd0b1638f13647b6E655E7565033cf0E522E096",
    "transactionIndex": 0,
    "gasUsed": "2092341",
    "logsBloom": "0x
    "blockHash": "0x1b354a9a797edca0097d9dd0f35cdaedf9fc5d253da582eb754278f8a0e4ab92",
    "transactionHash": "0x2a337a76b397651b6bcb0510d0ff519c32a461cbf08ec905ecfabfcb480962fc",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1126106,
        "transactionHash": "0x2a337a76b397651b6bcb0510d0ff519c32a461cbf08ec905ecfabfcb480962fc",
        "address": "0xebd0b1638f13647b6E655E7565033cf0E522E096",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006e80164ea60673d64d5d6228beb684a1274bb017"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1b354a9a797edca0097d9dd0f35cdaedf9fc5d253da582eb754278f8a0e4ab92"
      }
    ],
    "blockNumber": 1126106,
    "cumulativeGasUsed": "2092341",
    "status": 1,
    "byzantium": true
  },
  "args": [
    7200
  ],
  "numDeployments": 1,
  "solcInputHash": "4bf27f276f32f200c02c307a6797ac39",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_governanceTimeDelay\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"}],\"name\":\"BorrowerOperationsAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collateralAddress\",\"type\":\"address\"}],\"name\":\"CollateralAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"}],\"name\":\"CollateralWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_musdTokenAddress\",\"type\":\"address\"}],\"name\":\"MUSDTokenAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"MUSDWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_paidDebt\",\"type\":\"uint256\"}],\"name\":\"PCVDebtPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"PCVFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"RecipientAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"RecipientRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_council\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"RolesSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BOOTSTRAP_LOAN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_SPLIT_MAX\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"addRecipientToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"}],\"name\":\"addRecipientsToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperations\",\"outputs\":[{\"internalType\":\"contract BorrowerOperations\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelChangingRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changingRolesInitiated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralERC20\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"council\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtToPay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToStabilityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSplitPercentage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeChangingRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceTimeDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"musd\",\"outputs\":[{\"internalType\":\"contract IMUSD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_musdToBurn\",\"type\":\"uint256\"}],\"name\":\"payDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingCouncilAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingTreasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"recipientsWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"removeRecipientFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"}],\"name\":\"removeRecipientsFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_musdTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowerOperations\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralERC20\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_feeSplitPercentage\",\"type\":\"uint8\"}],\"name\":\"setFeeSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_council\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"startChangingRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawMUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PCV.sol\":\"PCV\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/BorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./dependencies/CheckContract.sol\\\";\\nimport \\\"./dependencies/LiquityBase.sol\\\";\\nimport \\\"./dependencies/SendCollateral.sol\\\";\\nimport \\\"./interfaces/IBorrowerOperations.sol\\\";\\nimport \\\"./interfaces/ICollSurplusPool.sol\\\";\\nimport \\\"./interfaces/IInterestRateManager.sol\\\";\\nimport \\\"./interfaces/IPCV.sol\\\";\\nimport \\\"./interfaces/ISortedTroves.sol\\\";\\nimport \\\"./interfaces/ITroveManager.sol\\\";\\nimport \\\"./token/IMUSD.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract BorrowerOperations is\\n    LiquityBase,\\n    Ownable,\\n    CheckContract,\\n    SendCollateral,\\n    IBorrowerOperations\\n{\\n    /* --- Variable container structs  ---\\n\\n    Used to hold, return and assign variables inside a function, in order to avoid the error:\\n    \\\"CompilerError: Stack too deep\\\". */\\n\\n    struct LocalVariables_adjustTrove {\\n        uint256 price;\\n        uint256 collChange;\\n        uint256 netDebtChange;\\n        bool isCollIncrease;\\n        uint256 debt;\\n        uint256 coll;\\n        uint256 oldICR;\\n        uint256 newICR;\\n        uint256 newTCR;\\n        uint256 fee;\\n        uint256 newColl;\\n        uint256 newPrincipal;\\n        uint256 newInterest;\\n        uint256 stake;\\n        uint256 interestOwed;\\n        uint256 principalAdjustment;\\n        uint256 interestAdjustment;\\n        bool isRecoveryMode;\\n    }\\n\\n    struct LocalVariables_openTrove {\\n        uint256 price;\\n        uint256 fee;\\n        uint256 netDebt;\\n        uint256 compositeDebt;\\n        uint256 ICR;\\n        uint256 NICR;\\n        uint256 stake;\\n        uint256 arrayIndex;\\n    }\\n\\n    struct ContractsCache {\\n        ITroveManager troveManager;\\n        IActivePool activePool;\\n        IMUSD musd;\\n        IInterestRateManager interestRateManager;\\n    }\\n\\n    enum BorrowerOperation {\\n        openTrove,\\n        closeTrove,\\n        adjustTrove\\n    }\\n\\n    string public constant name = \\\"BorrowerOperations\\\";\\n\\n    // refinancing fee is always a percentage of the borrowing (issuance) fee\\n    uint8 public refinancingFeePercentage = 20;\\n\\n    // --- Connected contract declarations ---\\n\\n    ITroveManager public troveManager;\\n\\n    address public collateralAddress;\\n    address public gasPoolAddress;\\n    address public pcvAddress;\\n    address public stabilityPoolAddress;\\n\\n    ICollSurplusPool public collSurplusPool;\\n\\n    IMUSD public musd;\\n    IPCV public pcv;\\n    IInterestRateManager public interestRateManager;\\n\\n    // A doubly linked list of Troves, sorted by their collateral ratios\\n    ISortedTroves public sortedTroves;\\n\\n    modifier onlyGovernance() {\\n        require(\\n            msg.sender == pcv.council() || msg.sender == pcv.treasury(),\\n            \\\"BorrowerOps: Only governance can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    // Calls on PCV behalf\\n    function mintBootstrapLoanFromPCV(uint256 _musdToMint) external {\\n        require(\\n            msg.sender == pcvAddress,\\n            \\\"BorrowerOperations: caller must be PCV\\\"\\n        );\\n        musd.mint(pcvAddress, _musdToMint);\\n    }\\n\\n    function burnDebtFromPCV(uint256 _musdToBurn) external {\\n        require(\\n            msg.sender == pcvAddress,\\n            \\\"BorrowerOperations: caller must be PCV\\\"\\n        );\\n        musd.burn(pcvAddress, _musdToBurn);\\n    }\\n\\n    // --- Borrower Trove Operations ---\\n    function openTrove(\\n        uint256 _maxFeePercentage,\\n        uint256 _debtAmount,\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable override {\\n        ContractsCache memory contractsCache = ContractsCache(\\n            troveManager,\\n            activePool,\\n            musd,\\n            interestRateManager\\n        );\\n        // slither-disable-next-line uninitialized-local\\n        LocalVariables_openTrove memory vars;\\n\\n        vars.price = priceFeed.fetchPrice();\\n        bool isRecoveryMode = _checkRecoveryMode(vars.price);\\n\\n        _requireValidMaxFeePercentage(_maxFeePercentage, isRecoveryMode);\\n        _requireTroveisNotActive(contractsCache.troveManager, msg.sender);\\n\\n        vars.fee;\\n        vars.netDebt = _debtAmount;\\n\\n        if (!isRecoveryMode) {\\n            vars.fee = _triggerBorrowingFee(\\n                contractsCache.troveManager,\\n                contractsCache.musd,\\n                _debtAmount,\\n                _maxFeePercentage\\n            );\\n            vars.netDebt += vars.fee;\\n        }\\n\\n        _requireAtLeastMinNetDebt(vars.netDebt);\\n\\n        // ICR is based on the composite debt, i.e. the requested amount + borrowing fee + gas comp.\\n        vars.compositeDebt = _getCompositeDebt(vars.netDebt);\\n        assert(vars.compositeDebt > 0);\\n\\n        // if BTC overwrite the asset value\\n        _assetAmount = getAssetAmount(_assetAmount);\\n        vars.ICR = LiquityMath._computeCR(\\n            _assetAmount,\\n            vars.compositeDebt,\\n            vars.price\\n        );\\n        vars.NICR = LiquityMath._computeNominalCR(\\n            _assetAmount,\\n            vars.compositeDebt\\n        );\\n\\n        if (isRecoveryMode) {\\n            _requireICRisAboveCCR(vars.ICR);\\n        } else {\\n            _requireICRisAboveMCR(vars.ICR);\\n            uint256 newTCR = _getNewTCRFromTroveChange(\\n                _assetAmount,\\n                true,\\n                vars.compositeDebt,\\n                true,\\n                vars.price\\n            ); // bools: coll increase, debt increase\\n            _requireNewTCRisAboveCCR(newTCR);\\n        }\\n\\n        contractsCache.troveManager.setTroveInterestRate(\\n            msg.sender,\\n            contractsCache.interestRateManager.interestRate()\\n        );\\n\\n        // Set the trove struct's properties\\n        contractsCache.troveManager.setTroveStatus(\\n            msg.sender,\\n            ITroveManager.Status.active\\n        );\\n        // slither-disable-next-line unused-return\\n        contractsCache.troveManager.increaseTroveColl(msg.sender, _assetAmount);\\n        // slither-disable-next-line unused-return\\n        contractsCache.troveManager.increaseTroveDebt(\\n            msg.sender,\\n            vars.compositeDebt\\n        );\\n\\n        // solhint-disable not-rely-on-time\\n        contractsCache.troveManager.setTroveLastInterestUpdateTime(\\n            msg.sender,\\n            block.timestamp\\n        );\\n        // solhint-enable not-rely-on-time\\n\\n        // Set trove's max borrowing capacity to the amount that would put it at 110% ICR\\n        uint256 maxBorrowingCapacity = _calculateMaxBorrowingCapacity(\\n            _assetAmount,\\n            vars.price\\n        );\\n        contractsCache.troveManager.setTroveMaxBorrowingCapacity(\\n            msg.sender,\\n            maxBorrowingCapacity\\n        );\\n\\n        contractsCache.troveManager.updateTroveRewardSnapshots(msg.sender);\\n        vars.stake = contractsCache.troveManager.updateStakeAndTotalStakes(\\n            msg.sender\\n        );\\n\\n        sortedTroves.insert(msg.sender, vars.NICR, _upperHint, _lowerHint);\\n        vars.arrayIndex = contractsCache.troveManager.addTroveOwnerToArray(\\n            msg.sender\\n        );\\n        // slither-disable-next-line reentrancy-events\\n        emit TroveCreated(msg.sender, vars.arrayIndex);\\n\\n        /*\\n         * Move the collateral to the Active Pool, and mint the amount to the borrower\\n         * If the user has insuffient tokens to do the transfer to the Active Pool an error will cause the transaction to revert.\\n         */\\n        _activePoolAddColl(contractsCache.activePool, _assetAmount);\\n        _withdrawMUSD(\\n            contractsCache.activePool,\\n            contractsCache.musd,\\n            msg.sender,\\n            _debtAmount,\\n            vars.netDebt\\n        );\\n        // Move the mUSD gas compensation to the Gas Pool\\n        _withdrawMUSD(\\n            contractsCache.activePool,\\n            contractsCache.musd,\\n            gasPoolAddress,\\n            MUSD_GAS_COMPENSATION,\\n            MUSD_GAS_COMPENSATION\\n        );\\n\\n        emit TroveUpdated(\\n            msg.sender,\\n            vars.compositeDebt,\\n            0,\\n            _assetAmount,\\n            vars.stake,\\n            uint8(BorrowerOperation.openTrove)\\n        );\\n        emit BorrowingFeePaid(msg.sender, vars.fee);\\n    }\\n\\n    // Send collateral to a trove\\n    function addColl(\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable override {\\n        _assetAmount = getAssetAmount(_assetAmount);\\n        _adjustTrove(\\n            msg.sender,\\n            0,\\n            0,\\n            false,\\n            _assetAmount,\\n            _upperHint,\\n            _lowerHint,\\n            0\\n        );\\n    }\\n\\n    // Send collateral to a trove. Called by only the Stability Pool.\\n    function moveCollateralGainToTrove(\\n        address _borrower,\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable override {\\n        _requireCallerIsStabilityPool();\\n        _assetAmount = getAssetAmount(_assetAmount);\\n        _adjustTrove(\\n            _borrower,\\n            0,\\n            0,\\n            false,\\n            _assetAmount,\\n            _upperHint,\\n            _lowerHint,\\n            0\\n        );\\n    }\\n\\n    // Withdraw collateral from a trove\\n    function withdrawColl(\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external override {\\n        _adjustTrove(\\n            msg.sender,\\n            _amount,\\n            0,\\n            false,\\n            0,\\n            _upperHint,\\n            _lowerHint,\\n            0\\n        );\\n    }\\n\\n    // Withdraw mUSD tokens from a trove: mint new mUSD tokens to the owner, and increase the trove's principal accordingly\\n    function withdrawMUSD(\\n        uint256 _maxFeePercentage,\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external override {\\n        _adjustTrove(\\n            msg.sender,\\n            0,\\n            _amount,\\n            true,\\n            0,\\n            _upperHint,\\n            _lowerHint,\\n            _maxFeePercentage\\n        );\\n    }\\n\\n    // Repay mUSD tokens to a Trove: Burn the repaid mUSD tokens, and reduce the trove's debt accordingly\\n    function repayMUSD(\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external override {\\n        _adjustTrove(\\n            msg.sender,\\n            0,\\n            _amount,\\n            false,\\n            0,\\n            _upperHint,\\n            _lowerHint,\\n            0\\n        );\\n    }\\n\\n    function closeTrove() external override {\\n        ITroveManager troveManagerCached = troveManager;\\n        IActivePool activePoolCached = activePool;\\n        IMUSD musdTokenCached = musd;\\n        bool canMint = musdTokenCached.mintList(address(this));\\n\\n        troveManagerCached.updateSystemAndTroveInterest(msg.sender);\\n\\n        _requireTroveisActive(troveManagerCached, msg.sender);\\n        uint256 price = priceFeed.fetchPrice();\\n        if (canMint) {\\n            _requireNotInRecoveryMode(price);\\n        }\\n\\n        troveManagerCached.applyPendingRewards(msg.sender);\\n\\n        uint256 coll = troveManagerCached.getTroveColl(msg.sender);\\n        uint256 debt = troveManagerCached.getTroveDebt(msg.sender);\\n        uint256 interestOwed = troveManagerCached.getTroveInterestOwed(\\n            msg.sender\\n        );\\n\\n        _requireSufficientMUSDBalance(\\n            musdTokenCached,\\n            msg.sender,\\n            debt - MUSD_GAS_COMPENSATION\\n        );\\n        if (canMint) {\\n            uint256 newTCR = _getNewTCRFromTroveChange(\\n                coll,\\n                false,\\n                debt,\\n                false,\\n                price\\n            );\\n            _requireNewTCRisAboveCCR(newTCR);\\n        }\\n\\n        troveManagerCached.removeStake(msg.sender);\\n        troveManagerCached.closeTrove(msg.sender);\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit TroveUpdated(\\n            msg.sender,\\n            0,\\n            0,\\n            0,\\n            0,\\n            uint8(BorrowerOperation.closeTrove)\\n        );\\n\\n        // Decrease the active pool debt by the principal (subtracting interestOwed from the total debt)\\n        activePoolCached.decreaseDebt(\\n            debt - MUSD_GAS_COMPENSATION - interestOwed,\\n            interestOwed\\n        );\\n\\n        // Burn the repaid mUSD from the user's balance\\n        musdTokenCached.burn(msg.sender, debt - MUSD_GAS_COMPENSATION);\\n\\n        // Burn the gas compensation from the gas pool\\n        _repayMUSD(\\n            activePoolCached,\\n            musdTokenCached,\\n            gasPoolAddress,\\n            MUSD_GAS_COMPENSATION,\\n            0\\n        );\\n\\n        // Send the collateral back to the user\\n        activePoolCached.sendCollateral(msg.sender, coll);\\n    }\\n\\n    function refinance(uint256 _maxFeePercentage) external override {\\n        ITroveManager troveManagerCached = troveManager;\\n        IInterestRateManager interestRateManagerCached = interestRateManager;\\n        _requireTroveisActive(troveManagerCached, msg.sender);\\n        troveManagerCached.updateSystemAndTroveInterest(msg.sender);\\n\\n        uint16 oldRate = troveManagerCached.getTroveInterestRate(msg.sender);\\n        uint256 oldInterest = troveManagerCached.getTroveInterestOwed(\\n            msg.sender\\n        );\\n        uint256 oldDebt = troveManagerCached.getTroveDebt(msg.sender);\\n        uint256 amount = (refinancingFeePercentage * oldDebt) / 100;\\n        uint256 fee = _triggerBorrowingFee(\\n            troveManagerCached,\\n            musd,\\n            amount,\\n            _maxFeePercentage\\n        );\\n        // slither-disable-next-line unused-return\\n        troveManagerCached.increaseTroveDebt(msg.sender, fee);\\n\\n        uint256 oldPrincipal = troveManagerCached.getTrovePrincipal(msg.sender);\\n\\n        interestRateManagerCached.removeInterestFromRate(oldRate, oldInterest);\\n        interestRateManagerCached.removePrincipalFromRate(\\n            oldRate,\\n            oldPrincipal\\n        );\\n        uint16 newRate = interestRateManagerCached.interestRate();\\n        interestRateManagerCached.addInterestToRate(newRate, oldInterest);\\n        interestRateManagerCached.addPrincipalToRate(newRate, oldPrincipal);\\n\\n        troveManagerCached.setTroveInterestRate(\\n            msg.sender,\\n            interestRateManagerCached.interestRate()\\n        );\\n\\n        uint256 maxBorrowingCapacity = _calculateMaxBorrowingCapacity(\\n            troveManagerCached.getTroveColl(msg.sender),\\n            priceFeed.fetchPrice()\\n        );\\n        troveManagerCached.setTroveMaxBorrowingCapacity(\\n            msg.sender,\\n            maxBorrowingCapacity\\n        );\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit RefinancingFeePaid(msg.sender, fee);\\n    }\\n\\n    function adjustTrove(\\n        uint256 _maxFeePercentage,\\n        uint256 _collWithdrawal,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease,\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable override {\\n        _assetAmount = getAssetAmount(_assetAmount);\\n        _adjustTrove(\\n            msg.sender,\\n            _collWithdrawal,\\n            _debtChange,\\n            _isDebtIncrease,\\n            _assetAmount,\\n            _upperHint,\\n            _lowerHint,\\n            _maxFeePercentage\\n        );\\n    }\\n\\n    // Claim remaining collateral from a redemption or from a liquidation with ICR > MCR in Recovery Mode\\n    function claimCollateral() external override {\\n        // send collateral from CollSurplus Pool to owner\\n        collSurplusPool.claimColl(msg.sender);\\n    }\\n\\n    function setAddresses(\\n        address _activePoolAddress,\\n        address _collateralAddress,\\n        address _collSurplusPoolAddress,\\n        address _defaultPoolAddress,\\n        address _gasPoolAddress,\\n        address _interestRateManagerAddress,\\n        address _musdTokenAddress,\\n        address _pcvAddress,\\n        address _priceFeedAddress,\\n        address _stabilityPoolAddress,\\n        address _sortedTrovesAddress,\\n        address _troveManagerAddress\\n    ) external override onlyOwner {\\n        // This makes impossible to open a trove with zero withdrawn mUSD\\n        assert(MIN_NET_DEBT > 0);\\n\\n        checkContract(_activePoolAddress);\\n        if (_collateralAddress != address(0)) {\\n            checkContract(_collateralAddress);\\n        }\\n        checkContract(_collSurplusPoolAddress);\\n        checkContract(_defaultPoolAddress);\\n        checkContract(_gasPoolAddress);\\n        checkContract(_musdTokenAddress);\\n        checkContract(_pcvAddress);\\n        checkContract(_priceFeedAddress);\\n        checkContract(_stabilityPoolAddress);\\n        checkContract(_sortedTrovesAddress);\\n        checkContract(_troveManagerAddress);\\n        checkContract(_interestRateManagerAddress);\\n\\n        troveManager = ITroveManager(_troveManagerAddress);\\n        activePool = IActivePool(_activePoolAddress);\\n        defaultPool = IDefaultPool(_defaultPoolAddress);\\n        // slither-disable-next-line missing-zero-check\\n        stabilityPoolAddress = _stabilityPoolAddress;\\n        // slither-disable-next-line missing-zero-check\\n        gasPoolAddress = _gasPoolAddress;\\n        collSurplusPool = ICollSurplusPool(_collSurplusPoolAddress);\\n        priceFeed = IPriceFeed(_priceFeedAddress);\\n        sortedTroves = ISortedTroves(_sortedTrovesAddress);\\n        musd = IMUSD(_musdTokenAddress);\\n        pcv = IPCV(_pcvAddress);\\n        // slither-disable-next-line missing-zero-check\\n        pcvAddress = _pcvAddress;\\n        // slither-disable-next-line missing-zero-check\\n        collateralAddress = _collateralAddress;\\n        interestRateManager = IInterestRateManager(_interestRateManagerAddress);\\n\\n        require(\\n            (Ownable(_defaultPoolAddress).owner() != address(0) ||\\n                defaultPool.collateralAddress() == _collateralAddress) &&\\n                (Ownable(_activePoolAddress).owner() != address(0) ||\\n                    activePool.collateralAddress() == _collateralAddress) &&\\n                (Ownable(_stabilityPoolAddress).owner() != address(0) ||\\n                    IStabilityPool(stabilityPoolAddress).collateralAddress() ==\\n                    _collateralAddress) &&\\n                (Ownable(_collSurplusPoolAddress).owner() != address(0) ||\\n                    collSurplusPool.collateralAddress() ==\\n                    _collateralAddress) &&\\n                (address(IPCV(pcvAddress).musd()) == address(0) ||\\n                    address(IPCV(pcvAddress).collateralERC20()) ==\\n                    _collateralAddress),\\n            \\\"The same collateral address must be used for the entire set of contracts\\\"\\n        );\\n\\n        emit TroveManagerAddressChanged(_troveManagerAddress);\\n        emit ActivePoolAddressChanged(_activePoolAddress);\\n        emit DefaultPoolAddressChanged(_defaultPoolAddress);\\n        emit StabilityPoolAddressChanged(_stabilityPoolAddress);\\n        emit GasPoolAddressChanged(_gasPoolAddress);\\n        emit CollSurplusPoolAddressChanged(_collSurplusPoolAddress);\\n        emit PriceFeedAddressChanged(_priceFeedAddress);\\n        emit SortedTrovesAddressChanged(_sortedTrovesAddress);\\n        emit MUSDTokenAddressChanged(_musdTokenAddress);\\n        emit PCVAddressChanged(_pcvAddress);\\n        emit CollateralAddressChanged(_collateralAddress);\\n\\n        renounceOwnership();\\n    }\\n\\n    function setRefinancingFeePercentage(\\n        uint8 _refinanceFeePercentage\\n    ) external override onlyGovernance {\\n        require(\\n            _refinanceFeePercentage <= 100,\\n            \\\"BorrowerOps: Refinancing fee percentage must be <= 100\\\"\\n        );\\n        refinancingFeePercentage = _refinanceFeePercentage;\\n    }\\n\\n    function getCompositeDebt(\\n        uint256 _debt\\n    ) external pure override returns (uint) {\\n        return _getCompositeDebt(_debt);\\n    }\\n\\n    /*\\n     * _adjustTrove(): Alongside a debt change, this function can perform either a collateral top-up or a collateral withdrawal.\\n     *\\n     * It therefore expects either a positive msg.value, or a positive _collWithdrawal argument.\\n     *\\n     * If both are positive, it will revert.\\n     */\\n    function _adjustTrove(\\n        address _borrower,\\n        uint256 _collWithdrawal,\\n        uint256 _mUSDChange,\\n        bool _isDebtIncrease,\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint,\\n        uint256 _maxFeePercentage\\n    ) internal {\\n        ContractsCache memory contractsCache = ContractsCache(\\n            troveManager,\\n            activePool,\\n            musd,\\n            interestRateManager\\n        );\\n\\n        contractsCache.troveManager.updateSystemAndTroveInterest(_borrower);\\n\\n        // slither-disable-next-line uninitialized-local\\n        LocalVariables_adjustTrove memory vars;\\n\\n        // Snapshot interest and principal before repayment so we can correctly adjust the active pool\\n        vars.interestOwed = contractsCache.troveManager.getTroveInterestOwed(\\n            _borrower\\n        );\\n\\n        (vars.principalAdjustment, vars.interestAdjustment) = contractsCache\\n            .interestRateManager\\n            .calculateDebtAdjustment(vars.interestOwed, _mUSDChange);\\n\\n        vars.price = priceFeed.fetchPrice();\\n        vars.isRecoveryMode = _checkRecoveryMode(vars.price);\\n\\n        if (_isDebtIncrease) {\\n            _requireValidMaxFeePercentage(\\n                _maxFeePercentage,\\n                vars.isRecoveryMode\\n            );\\n            _requireNonZeroDebtChange(_mUSDChange);\\n        }\\n        _requireSingularCollChange(_collWithdrawal, _assetAmount);\\n        _requireNonZeroAdjustment(_collWithdrawal, _mUSDChange, _assetAmount);\\n        _requireTroveisActive(contractsCache.troveManager, _borrower);\\n\\n        // Confirm the operation is either a borrower adjusting their own trove, or a pure collateral transfer from the Stability Pool to a trove\\n        assert(\\n            msg.sender == _borrower ||\\n                (msg.sender == stabilityPoolAddress &&\\n                    _assetAmount > 0 &&\\n                    _mUSDChange == 0)\\n        );\\n\\n        contractsCache.troveManager.applyPendingRewards(_borrower);\\n\\n        // Get the collChange based on whether or not collateral was sent in the transaction\\n        (vars.collChange, vars.isCollIncrease) = _getCollChange(\\n            _assetAmount,\\n            _collWithdrawal\\n        );\\n\\n        vars.netDebtChange = _mUSDChange;\\n\\n        // If the adjustment incorporates a principal increase and system is in Normal Mode, then trigger a borrowing fee\\n        if (_isDebtIncrease && !vars.isRecoveryMode) {\\n            vars.fee = _triggerBorrowingFee(\\n                contractsCache.troveManager,\\n                contractsCache.musd,\\n                _mUSDChange,\\n                _maxFeePercentage\\n            );\\n            vars.netDebtChange += vars.fee; // The raw debt change includes the fee\\n        }\\n\\n        vars.debt = contractsCache.troveManager.getTroveDebt(_borrower);\\n        vars.coll = contractsCache.troveManager.getTroveColl(_borrower);\\n\\n        // Get the trove's old ICR before the adjustment, and what its new ICR will be after the adjustment\\n        vars.oldICR = LiquityMath._computeCR(vars.coll, vars.debt, vars.price);\\n        vars.newICR = _getNewICRFromTroveChange(\\n            vars.coll,\\n            vars.debt,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            vars.netDebtChange,\\n            _isDebtIncrease,\\n            vars.price\\n        );\\n        assert(_collWithdrawal <= vars.coll);\\n\\n        // Check the adjustment satisfies all conditions for the current system mode\\n        _requireValidAdjustmentInCurrentMode(\\n            vars.isRecoveryMode,\\n            _collWithdrawal,\\n            _isDebtIncrease,\\n            vars\\n        );\\n\\n        // When the adjustment is a debt repayment, check it's a valid amount and that the caller has enough mUSD\\n        if (!_isDebtIncrease && _mUSDChange > 0) {\\n            _requireAtLeastMinNetDebt(\\n                _getNetDebt(vars.debt) - vars.netDebtChange\\n            );\\n            _requireValidMUSDRepayment(vars.debt, vars.netDebtChange);\\n            _requireSufficientMUSDBalance(\\n                contractsCache.musd,\\n                _borrower,\\n                vars.netDebtChange\\n            );\\n        }\\n\\n        (\\n            vars.newColl,\\n            vars.newPrincipal,\\n            vars.newInterest\\n        ) = _updateTroveFromAdjustment(\\n            contractsCache.troveManager,\\n            _borrower,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            vars.netDebtChange,\\n            _isDebtIncrease\\n        );\\n        vars.stake = contractsCache.troveManager.updateStakeAndTotalStakes(\\n            _borrower\\n        );\\n\\n        // Re-insert trove in to the sorted list\\n        uint256 newNICR = _getNewNominalICRFromTroveChange(\\n            vars.coll,\\n            vars.debt,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            vars.netDebtChange,\\n            _isDebtIncrease\\n        );\\n        sortedTroves.reInsert(_borrower, newNICR, _upperHint, _lowerHint);\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit TroveUpdated(\\n            _borrower,\\n            vars.newPrincipal,\\n            vars.newInterest,\\n            vars.newColl,\\n            vars.stake,\\n            uint8(BorrowerOperation.adjustTrove)\\n        );\\n        // slither-disable-next-line reentrancy-events\\n        emit BorrowingFeePaid(msg.sender, vars.fee);\\n\\n        // Use the unmodified _mUSDChange here, as we don't send the fee to the user\\n        _moveTokensAndCollateralfromAdjustment(\\n            contractsCache.activePool,\\n            contractsCache.musd,\\n            msg.sender,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            _isDebtIncrease ? _mUSDChange : vars.principalAdjustment,\\n            vars.interestAdjustment,\\n            _isDebtIncrease,\\n            vars.netDebtChange\\n        );\\n    }\\n\\n    // Issue the specified amount of mUSD to _account and increases the total active debt (_netDebtIncrease potentially includes a MUSDFee)\\n    function _withdrawMUSD(\\n        IActivePool _activePool,\\n        IMUSD _musd,\\n        address _account,\\n        uint256 _debtAmount,\\n        uint256 _netDebtIncrease\\n    ) internal {\\n        _activePool.increaseDebt(_netDebtIncrease, 0);\\n        _musd.mint(_account, _debtAmount);\\n    }\\n\\n    // Burn the specified amount of MUSD from _account and decreases the total active debt\\n    function _repayMUSD(\\n        IActivePool _activePool,\\n        IMUSD _musd,\\n        address _account,\\n        uint256 _principal,\\n        uint256 _interest\\n    ) internal {\\n        _activePool.decreaseDebt(_principal, _interest);\\n        _musd.burn(_account, _principal + _interest);\\n    }\\n\\n    function _moveTokensAndCollateralfromAdjustment(\\n        IActivePool _activePool,\\n        IMUSD _musd,\\n        address _borrower,\\n        uint256 _collChange,\\n        bool _isCollIncrease,\\n        uint256 _principalChange,\\n        uint256 _interestChange,\\n        bool _isDebtIncrease,\\n        uint256 _netDebtChange\\n    ) internal {\\n        if (_isDebtIncrease) {\\n            _withdrawMUSD(\\n                _activePool,\\n                _musd,\\n                _borrower,\\n                _principalChange,\\n                _netDebtChange\\n            );\\n        } else {\\n            _repayMUSD(\\n                _activePool,\\n                _musd,\\n                _borrower,\\n                _principalChange,\\n                _interestChange\\n            );\\n        }\\n\\n        if (_isCollIncrease) {\\n            _activePoolAddColl(_activePool, _collChange);\\n        } else {\\n            _activePool.sendCollateral(_borrower, _collChange);\\n        }\\n    }\\n\\n    // Send collateral to Active Pool and increase its recorded collateral balance\\n    function _activePoolAddColl(\\n        IActivePool _activePool,\\n        uint256 _amount\\n    ) internal {\\n        sendCollateralFrom(\\n            IERC20(collateralAddress),\\n            msg.sender,\\n            address(_activePool),\\n            _amount\\n        );\\n    }\\n\\n    // Update trove's coll and debt based on whether they increase or decrease\\n    function _updateTroveFromAdjustment(\\n        ITroveManager _troveManager,\\n        address _borrower,\\n        uint256 _collChange,\\n        bool _isCollIncrease,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease\\n    )\\n        internal\\n        returns (uint256 newColl, uint256 newPrincipal, uint256 newInterest)\\n    {\\n        newColl = (_isCollIncrease)\\n            ? _troveManager.increaseTroveColl(_borrower, _collChange)\\n            : _troveManager.decreaseTroveColl(_borrower, _collChange);\\n\\n        if (_isDebtIncrease) {\\n            newPrincipal = _troveManager.increaseTroveDebt(\\n                _borrower,\\n                _debtChange\\n            );\\n        } else {\\n            (newPrincipal, newInterest) = _troveManager.decreaseTroveDebt(\\n                _borrower,\\n                _debtChange\\n            );\\n        }\\n    }\\n\\n    // --- Helper functions ---\\n\\n    function _triggerBorrowingFee(\\n        ITroveManager _troveManager,\\n        IMUSD _musd,\\n        uint256 _amount,\\n        uint256 _maxFeePercentage\\n    ) internal returns (uint) {\\n        _troveManager.decayBaseRateFromBorrowing(); // decay the baseRate state variable\\n        uint256 fee = _troveManager.getBorrowingFee(_amount);\\n\\n        _requireUserAcceptsFee(fee, _amount, _maxFeePercentage);\\n\\n        // Send fee to PCV contract\\n        _musd.mint(pcvAddress, fee);\\n        return fee;\\n    }\\n\\n    function getAssetAmount(\\n        uint256 _assetAmount\\n    ) internal view returns (uint256) {\\n        if (collateralAddress == address(0)) {\\n            return msg.value;\\n        }\\n\\n        require(\\n            msg.value == 0,\\n            \\\"BorrowerOperations: ERC20 collateral needed, not BTC\\\"\\n        );\\n        return _assetAmount;\\n    }\\n\\n    function _requireNotInRecoveryMode(uint256 _price) internal view {\\n        require(\\n            !_checkRecoveryMode(_price),\\n            \\\"BorrowerOps: Operation not permitted during Recovery Mode\\\"\\n        );\\n    }\\n\\n    function _requireTroveisNotActive(\\n        ITroveManager _troveManager,\\n        address _borrower\\n    ) internal view {\\n        ITroveManager.Status status = _troveManager.getTroveStatus(_borrower);\\n        require(\\n            status != ITroveManager.Status.active,\\n            \\\"BorrowerOps: Trove is active\\\"\\n        );\\n    }\\n\\n    function _getNewTCRFromTroveChange(\\n        uint256 _collChange,\\n        bool _isCollIncrease,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease,\\n        uint256 _price\\n    ) internal view returns (uint) {\\n        uint256 totalColl = getEntireSystemColl();\\n        uint256 totalDebt = getEntireSystemDebt();\\n\\n        totalColl = _isCollIncrease\\n            ? totalColl + _collChange\\n            : totalColl - _collChange;\\n        totalDebt = _isDebtIncrease\\n            ? totalDebt + _debtChange\\n            : totalDebt - _debtChange;\\n\\n        uint256 newTCR = LiquityMath._computeCR(totalColl, totalDebt, _price);\\n        return newTCR;\\n    }\\n\\n    function _requireCallerIsStabilityPool() internal view {\\n        require(\\n            msg.sender == stabilityPoolAddress,\\n            \\\"BorrowerOps: Caller is not Stability Pool\\\"\\n        );\\n    }\\n\\n    function _requireTroveisActive(\\n        ITroveManager _troveManager,\\n        address _borrower\\n    ) internal view {\\n        ITroveManager.Status status = _troveManager.getTroveStatus(_borrower);\\n\\n        require(\\n            status == ITroveManager.Status.active,\\n            \\\"BorrowerOps: Trove does not exist or is closed\\\"\\n        );\\n    }\\n\\n    /*\\n     * In Normal Mode, ensure:\\n     *\\n     * - The new ICR is above MCR\\n     * - The adjustment won't pull the TCR below CCR\\n     */\\n    function _requireValidAdjustmentInNormalMode(\\n        bool _isDebtIncrease,\\n        LocalVariables_adjustTrove memory _vars\\n    ) internal view {\\n        _requireICRisAboveMCR(_vars.newICR);\\n        _vars.newTCR = _getNewTCRFromTroveChange(\\n            _vars.collChange,\\n            _vars.isCollIncrease,\\n            _vars.netDebtChange,\\n            _isDebtIncrease,\\n            _vars.price\\n        );\\n        _requireNewTCRisAboveCCR(_vars.newTCR);\\n    }\\n\\n    function _requireValidAdjustmentInCurrentMode(\\n        bool _isRecoveryMode,\\n        uint256 _collWithdrawal,\\n        bool _isDebtIncrease,\\n        LocalVariables_adjustTrove memory _vars\\n    ) internal view {\\n        if (_isRecoveryMode) {\\n            _requireValidAdjustmentInRecoveryMode(\\n                _collWithdrawal,\\n                _isDebtIncrease,\\n                _vars\\n            );\\n        } else {\\n            _requireValidAdjustmentInNormalMode(_isDebtIncrease, _vars);\\n        }\\n    }\\n\\n    function _requireSufficientMUSDBalance(\\n        IMUSD _musd,\\n        address _borrower,\\n        uint256 _debtRepayment\\n    ) internal view {\\n        require(\\n            _musd.balanceOf(_borrower) >= _debtRepayment,\\n            \\\"BorrowerOps: Caller doesnt have enough mUSD to make repayment\\\"\\n        );\\n    }\\n\\n    /*\\n     * In Recovery Mode, only allow:\\n     *\\n     * - Pure collateral top-up\\n     * - Pure debt repayment\\n     * - Collateral top-up with debt repayment\\n     * - A debt increase combined with a collateral top-up which makes the ICR\\n     * >= 150% and improves the ICR (and by extension improves the TCR).\\n     */\\n    function _requireValidAdjustmentInRecoveryMode(\\n        uint256 _collWithdrawal,\\n        bool _isDebtIncrease,\\n        LocalVariables_adjustTrove memory _vars\\n    ) internal pure {\\n        _requireNoCollWithdrawal(_collWithdrawal);\\n        if (_isDebtIncrease) {\\n            _requireICRisAboveCCR(_vars.newICR);\\n            _requireNewICRisAboveOldICR(_vars.newICR, _vars.oldICR);\\n        }\\n    }\\n\\n    function _getCollChange(\\n        uint256 _collReceived,\\n        uint256 _requestedCollWithdrawal\\n    ) internal pure returns (uint256 collChange, bool isCollIncrease) {\\n        if (_collReceived != 0) {\\n            collChange = _collReceived;\\n            isCollIncrease = true;\\n        } else {\\n            collChange = _requestedCollWithdrawal;\\n        }\\n    }\\n\\n    // Compute the new collateral ratio, considering the change in coll and debt. Assumes 0 pending rewards.\\n    function _getNewICRFromTroveChange(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint256 _collChange,\\n        bool _isCollIncrease,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease,\\n        uint256 _price\\n    ) internal pure returns (uint) {\\n        (uint256 newColl, uint256 newDebt) = _getNewTroveAmounts(\\n            _coll,\\n            _debt,\\n            _collChange,\\n            _isCollIncrease,\\n            _debtChange,\\n            _isDebtIncrease\\n        );\\n        uint256 newICR = LiquityMath._computeCR(newColl, newDebt, _price);\\n        return newICR;\\n    }\\n\\n    function _getNewTroveAmounts(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint256 _collChange,\\n        bool _isCollIncrease,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease\\n    ) internal pure returns (uint newColl, uint newDebt) {\\n        newColl = _isCollIncrease ? _coll + _collChange : _coll - _collChange;\\n        newDebt = _isDebtIncrease ? _debt + _debtChange : _debt - _debtChange;\\n    }\\n\\n    // Compute the new collateral ratio, considering the change in coll and debt. Assumes 0 pending rewards.\\n    function _getNewNominalICRFromTroveChange(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint256 _collChange,\\n        bool _isCollIncrease,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease\\n    ) internal pure returns (uint) {\\n        (uint256 newColl, uint256 newDebt) = _getNewTroveAmounts(\\n            _coll,\\n            _debt,\\n            _collChange,\\n            _isCollIncrease,\\n            _debtChange,\\n            _isDebtIncrease\\n        );\\n\\n        return LiquityMath._computeNominalCR(newColl, newDebt);\\n    }\\n\\n    function _calculateMaxBorrowingCapacity(\\n        uint256 _coll,\\n        uint256 _price\\n    ) internal pure returns (uint) {\\n        return (_coll * _price) / (110 * 1e16);\\n    }\\n\\n    function _requireValidMaxFeePercentage(\\n        uint256 _maxFeePercentage,\\n        bool _isRecoveryMode\\n    ) internal pure {\\n        if (_isRecoveryMode) {\\n            require(\\n                _maxFeePercentage <= DECIMAL_PRECISION,\\n                \\\"Max fee percentage must be less than or equal to 100%\\\"\\n            );\\n        } else {\\n            require(\\n                _maxFeePercentage >= BORROWING_FEE_FLOOR &&\\n                    _maxFeePercentage <= DECIMAL_PRECISION,\\n                \\\"Max fee percentage must be between 0.5% and 100%\\\"\\n            );\\n        }\\n    }\\n\\n    function _requireAtLeastMinNetDebt(uint256 _netDebt) internal pure {\\n        require(\\n            _netDebt >= MIN_NET_DEBT,\\n            \\\"BorrowerOps: Trove's net debt must be greater than minimum\\\"\\n        );\\n    }\\n\\n    function _requireICRisAboveMCR(uint256 _newICR) internal pure {\\n        require(\\n            _newICR >= MCR,\\n            \\\"BorrowerOps: An operation that would result in ICR < MCR is not permitted\\\"\\n        );\\n    }\\n\\n    function _requireICRisAboveCCR(uint256 _newICR) internal pure {\\n        require(\\n            _newICR >= CCR,\\n            \\\"BorrowerOps: Operation must leave trove with ICR >= CCR\\\"\\n        );\\n    }\\n\\n    function _requireNewTCRisAboveCCR(uint256 _newTCR) internal pure {\\n        require(\\n            _newTCR >= CCR,\\n            \\\"BorrowerOps: An operation that would result in TCR < CCR is not permitted\\\"\\n        );\\n    }\\n\\n    function _requireNonZeroDebtChange(uint256 _debtChange) internal pure {\\n        require(\\n            _debtChange > 0,\\n            \\\"BorrowerOps: Debt increase requires non-zero debtChange\\\"\\n        );\\n    }\\n\\n    function _requireSingularCollChange(\\n        uint256 _collWithdrawal,\\n        uint256 _assetAmount\\n    ) internal pure {\\n        require(\\n            _assetAmount == 0 || _collWithdrawal == 0,\\n            \\\"BorrowerOperations: Cannot withdraw and add coll\\\"\\n        );\\n    }\\n\\n    function _requireNonZeroAdjustment(\\n        uint256 _collWithdrawal,\\n        uint256 _debtChange,\\n        uint256 _assetAmount\\n    ) internal pure {\\n        require(\\n            _assetAmount != 0 || _collWithdrawal != 0 || _debtChange != 0,\\n            \\\"BorrowerOps: There must be either a collateral change or a debt change\\\"\\n        );\\n    }\\n\\n    function _requireNoCollWithdrawal(uint256 _collWithdrawal) internal pure {\\n        require(\\n            _collWithdrawal == 0,\\n            \\\"BorrowerOps: Collateral withdrawal not permitted Recovery Mode\\\"\\n        );\\n    }\\n\\n    function _requireNewICRisAboveOldICR(\\n        uint256 _newICR,\\n        uint256 _oldICR\\n    ) internal pure {\\n        require(\\n            _newICR >= _oldICR,\\n            \\\"BorrowerOps: Cannot decrease your Trove's ICR in Recovery Mode\\\"\\n        );\\n    }\\n\\n    function _requireValidMUSDRepayment(\\n        uint256 _currentDebt,\\n        uint256 _debtRepayment\\n    ) internal pure {\\n        require(\\n            _debtRepayment <= _currentDebt - MUSD_GAS_COMPENSATION,\\n            \\\"BorrowerOps: Amount repaid must not be larger than the Trove's debt\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xdea53c26346713b5e8b84a2077d19f2cc1795dfda6a42b48e2bb45423da1a07f\",\"license\":\"MIT\"},\"contracts/PCV.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./BorrowerOperations.sol\\\";\\nimport \\\"./dependencies/CheckContract.sol\\\";\\nimport \\\"./dependencies/SendCollateral.sol\\\";\\nimport \\\"./interfaces/IPCV.sol\\\";\\nimport \\\"./token/IMUSD.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract PCV is IPCV, Ownable, CheckContract, SendCollateral {\\n    uint256 public constant BOOTSTRAP_LOAN = 1e26; // 100M mUSD\\n\\n    uint256 public immutable governanceTimeDelay;\\n\\n    IMUSD public musd;\\n    IERC20 public collateralERC20;\\n    BorrowerOperations public borrowerOperations;\\n\\n    // TODO ideal initialization in constructor/setAddresses\\n    uint256 public debtToPay;\\n    bool public isInitialized;\\n\\n    address public council;\\n    address public treasury;\\n\\n    mapping(address => bool) public recipientsWhitelist;\\n\\n    address public pendingCouncilAddress;\\n    address public pendingTreasuryAddress;\\n    uint256 public changingRolesInitiated;\\n\\n    address public feeRecipient;\\n    uint8 public feeSplitPercentage; // percentage of fees to be sent to feeRecipient\\n    uint8 public constant FEE_SPLIT_MAX = 50; // no more than 50% of fees can be sent until the debt is paid\\n\\n    modifier onlyAfterDebtPaid() {\\n        require(isInitialized && debtToPay == 0, \\\"PCV: debt must be paid\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrCouncilOrTreasury() {\\n        require(\\n            msg.sender == owner() ||\\n                msg.sender == council ||\\n                msg.sender == treasury,\\n            \\\"PCV: caller must be owner or council or treasury\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyWhitelistedRecipient(address _recipient) {\\n        require(\\n            recipientsWhitelist[_recipient],\\n            \\\"PCV: recipient must be in whitelist\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(uint256 _governanceTimeDelay) Ownable(msg.sender) {\\n        governanceTimeDelay = _governanceTimeDelay;\\n        require(governanceTimeDelay <= 30 weeks, \\\"Governance delay is too big\\\");\\n    }\\n\\n    receive() external payable {\\n        require(\\n            address(collateralERC20) == address(0),\\n            \\\"PCV: ERC20 collateral needed, not BTC\\\"\\n        );\\n    }\\n\\n    function payDebt(\\n        uint256 _musdToBurn\\n    ) external override onlyOwnerOrCouncilOrTreasury {\\n        require(\\n            debtToPay > 0 || feeRecipient != address(0),\\n            \\\"PCV: debt has already paid\\\"\\n        );\\n        require(\\n            _musdToBurn <= musd.balanceOf(address(this)),\\n            \\\"PCV: not enough tokens\\\"\\n        );\\n\\n        // if the debt has already been paid, the feeRecipient should receive all fees\\n        if (debtToPay == 0) {\\n            feeSplitPercentage = 100;\\n        }\\n\\n        uint256 feeToRecipient = (_musdToBurn * feeSplitPercentage) / 100;\\n        uint256 feeToDebt = _musdToBurn - feeToRecipient;\\n\\n        if (feeToDebt > debtToPay) {\\n            feeToRecipient += feeToDebt - debtToPay;\\n            feeToDebt = debtToPay;\\n        }\\n\\n        debtToPay -= feeToDebt;\\n\\n        if (feeRecipient != address(0) && feeSplitPercentage > 0) {\\n            require(\\n                musd.transfer(feeRecipient, feeToRecipient),\\n                \\\"PCV: sending mUSD failed\\\"\\n            );\\n        }\\n        borrowerOperations.burnDebtFromPCV(feeToDebt);\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit PCVDebtPaid(feeToDebt);\\n        emit PCVFeePaid(feeRecipient, feeToRecipient);\\n    }\\n\\n    function setAddresses(\\n        address _musdTokenAddress,\\n        address _borrowerOperations,\\n        address _collateralERC20\\n    ) external override onlyOwner {\\n        require(address(musd) == address(0), \\\"PCV: contacts already set\\\");\\n        checkContract(_musdTokenAddress);\\n        checkContract(_borrowerOperations);\\n        if (_collateralERC20 != address(0)) {\\n            checkContract(_collateralERC20);\\n        }\\n\\n        musd = IMUSD(_musdTokenAddress);\\n        collateralERC20 = IERC20(_collateralERC20);\\n        borrowerOperations = BorrowerOperations(_borrowerOperations);\\n\\n        require(\\n            (Ownable(_borrowerOperations).owner() != address(0) ||\\n                borrowerOperations.collateralAddress() == _collateralERC20),\\n            \\\"The same collateral address must be used for the entire set of contracts\\\"\\n        );\\n\\n        emit MUSDTokenAddressSet(_musdTokenAddress);\\n        emit BorrowerOperationsAddressSet(_borrowerOperations);\\n        emit CollateralAddressSet(_collateralERC20);\\n    }\\n\\n    function initialize() external override onlyOwnerOrCouncilOrTreasury {\\n        require(!isInitialized, \\\"PCV: already initialized\\\");\\n\\n        debtToPay = BOOTSTRAP_LOAN;\\n        isInitialized = true;\\n        borrowerOperations.mintBootstrapLoanFromPCV(BOOTSTRAP_LOAN);\\n        depositToStabilityPool(BOOTSTRAP_LOAN);\\n    }\\n\\n    function setFeeRecipient(\\n        address _feeRecipient\\n    ) external onlyOwnerOrCouncilOrTreasury {\\n        if (_feeRecipient != address(0)) {\\n            feeRecipient = _feeRecipient;\\n        }\\n    }\\n\\n    function setFeeSplit(\\n        uint8 _feeSplitPercentage\\n    ) external onlyOwnerOrCouncilOrTreasury {\\n        require(\\n            debtToPay > 0,\\n            \\\"PCV: Must have debt in order to set a fee split.\\\"\\n        );\\n        require(\\n            _feeSplitPercentage <= FEE_SPLIT_MAX,\\n            \\\"PCV: Fee split must be at most 50 while debt remains.\\\"\\n        );\\n        feeSplitPercentage = _feeSplitPercentage;\\n    }\\n\\n    function withdrawMUSD(\\n        address _recipient,\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        onlyAfterDebtPaid\\n        onlyOwnerOrCouncilOrTreasury\\n        onlyWhitelistedRecipient(_recipient)\\n    {\\n        require(\\n            _amount <= musd.balanceOf(address(this)),\\n            \\\"PCV: not enough tokens\\\"\\n        );\\n        require(musd.transfer(_recipient, _amount), \\\"PCV: sending mUSD failed\\\");\\n        // slither-disable-next-line reentrancy-events\\n        emit MUSDWithdraw(_recipient, _amount);\\n    }\\n\\n    function withdrawCollateral(\\n        address _recipient,\\n        uint256 _collateralAmount\\n    )\\n        external\\n        override\\n        onlyAfterDebtPaid\\n        onlyOwnerOrCouncilOrTreasury\\n        onlyWhitelistedRecipient(_recipient)\\n    {\\n        sendCollateral(collateralERC20, _recipient, _collateralAmount);\\n\\n        emit CollateralWithdraw(_recipient, _collateralAmount);\\n    }\\n\\n    function addRecipientsToWhitelist(\\n        address[] calldata _recipients\\n    ) external override onlyOwner {\\n        require(\\n            _recipients.length > 0,\\n            \\\"PCV: Recipients array must not be empty\\\"\\n        );\\n        for (uint256 i = 0; i < _recipients.length; i++) {\\n            addRecipientToWhitelist(_recipients[i]);\\n        }\\n    }\\n\\n    function removeRecipientsFromWhitelist(\\n        address[] calldata _recipients\\n    ) external override onlyOwner {\\n        require(\\n            _recipients.length > 0,\\n            \\\"PCV: Recipients array must not be empty\\\"\\n        );\\n        for (uint256 i = 0; i < _recipients.length; i++) {\\n            removeRecipientFromWhitelist(_recipients[i]);\\n        }\\n    }\\n\\n    function startChangingRoles(\\n        address _council,\\n        address _treasury\\n    ) external override onlyOwner {\\n        require(\\n            _council != council || _treasury != treasury,\\n            \\\"PCV: these roles already set\\\"\\n        );\\n\\n        // solhint-disable-next-line not-rely-on-time\\n        changingRolesInitiated = block.timestamp;\\n        if (council == address(0) && treasury == address(0)) {\\n            // solhint-disable-next-line not-rely-on-time\\n            changingRolesInitiated -= governanceTimeDelay; // skip delay if no roles set\\n        }\\n        pendingCouncilAddress = _council;\\n        pendingTreasuryAddress = _treasury;\\n    }\\n\\n    function cancelChangingRoles() external override onlyOwner {\\n        require(changingRolesInitiated != 0, \\\"PCV: Change not initiated\\\");\\n\\n        changingRolesInitiated = 0;\\n        pendingCouncilAddress = address(0);\\n        pendingTreasuryAddress = address(0);\\n    }\\n\\n    function finalizeChangingRoles() external override onlyOwner {\\n        require(changingRolesInitiated > 0, \\\"PCV: Change not initiated\\\");\\n        require(\\n            // solhint-disable-next-line not-rely-on-time\\n            block.timestamp >= changingRolesInitiated + governanceTimeDelay,\\n            \\\"PCV: Governance delay has not elapsed\\\"\\n        );\\n\\n        council = pendingCouncilAddress;\\n        treasury = pendingTreasuryAddress;\\n        emit RolesSet(council, treasury);\\n\\n        changingRolesInitiated = 0;\\n        pendingCouncilAddress = address(0);\\n        pendingTreasuryAddress = address(0);\\n    }\\n\\n    function addRecipientToWhitelist(\\n        address _recipient\\n    ) public override onlyOwner {\\n        require(\\n            !recipientsWhitelist[_recipient],\\n            \\\"PCV: Recipient has already been added to whitelist\\\"\\n        );\\n        recipientsWhitelist[_recipient] = true;\\n        emit RecipientAdded(_recipient);\\n    }\\n\\n    function removeRecipientFromWhitelist(\\n        address _recipient\\n    ) public override onlyOwner {\\n        require(\\n            recipientsWhitelist[_recipient],\\n            \\\"PCV: Recipient is not in whitelist\\\"\\n        );\\n        recipientsWhitelist[_recipient] = false;\\n        emit RecipientRemoved(_recipient);\\n    }\\n\\n    function depositToStabilityPool(\\n        uint256 _amount\\n    ) public onlyOwnerOrCouncilOrTreasury {\\n        require(\\n            _amount <= musd.balanceOf(address(this)),\\n            \\\"PCV: not enough tokens\\\"\\n        );\\n        require(\\n            musd.approve(borrowerOperations.stabilityPoolAddress(), _amount),\\n            \\\"PCV: Approval failed\\\"\\n        );\\n        IStabilityPool(borrowerOperations.stabilityPoolAddress()).provideToSP(\\n            _amount\\n        );\\n\\n        // TODO Emit event\\n    }\\n}\\n\",\"keccak256\":\"0x735d7eccb38082c7e830a30cfda3e9186f85fbac0ec879adf75b643d8f56525f\",\"license\":\"MIT\"},\"contracts/dependencies/BaseMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract BaseMath {\\n    uint256 public constant DECIMAL_PRECISION = 1e18;\\n}\\n\",\"keccak256\":\"0x54fab55b6128e51d2ffa3d2b726ce6f08fe5447b41a4880d195bfc7fcd66429f\",\"license\":\"MIT\"},\"contracts/dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\ncontract CheckContract {\\n    /**\\n     * Check that the account is an already deployed non-destroyed contract.\\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n     */\\n    function checkContract(address _account) internal view {\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(_account)\\n        }\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xab260c88c1d2f0ffbbd5d43c4a1df5e48132678e67fc24b65fa2d823f97cbc32\",\"license\":\"MIT\"},\"contracts/dependencies/LiquityBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./BaseMath.sol\\\";\\nimport \\\"./LiquityMath.sol\\\";\\nimport \\\"../interfaces/IActivePool.sol\\\";\\nimport \\\"../interfaces/IDefaultPool.sol\\\";\\nimport \\\"../interfaces/IPriceFeed.sol\\\";\\nimport \\\"../interfaces/ILiquityBase.sol\\\";\\n\\n/*\\n * Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\n * common functions.\\n */\\nabstract contract LiquityBase is BaseMath, ILiquityBase {\\n    uint256 public constant _100pct = 1e18; // 1e18 == 100%\\n\\n    // Minimum collateral ratio for individual troves\\n    uint256 public constant MCR = 1.1e18; // 110%\\n\\n    // Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n    uint256 public constant CCR = 1.5e18; // 150%\\n\\n    // Amount of mUSD to be locked in gas pool on opening troves\\n    uint256 public constant MUSD_GAS_COMPENSATION = 200e18;\\n\\n    // Minimum amount of net mUSD debt a trove must have\\n    uint256 public constant MIN_NET_DEBT = 1800e18;\\n    // uint256 constant public MIN_NET_DEBT = 0;\\n\\n    uint256 public constant PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\n\\n    uint256 public constant BORROWING_FEE_FLOOR = ((DECIMAL_PRECISION * 5) /\\n        1000); // 0.5%\\n\\n    // slither-disable-next-line all\\n    IActivePool public activePool;\\n\\n    // slither-disable-next-line all\\n    IDefaultPool public defaultPool;\\n\\n    // slither-disable-next-line all\\n    IPriceFeed public override priceFeed;\\n\\n    // --- Gas compensation functions ---\\n\\n    function getEntireSystemColl()\\n        public\\n        view\\n        returns (uint256 entireSystemColl)\\n    {\\n        uint256 activeColl = activePool.getCollateralBalance();\\n        uint256 liquidatedColl = defaultPool.getCollateralBalance();\\n\\n        return activeColl + liquidatedColl;\\n    }\\n\\n    function getEntireSystemDebt()\\n        public\\n        view\\n        returns (uint256 entireSystemDebt)\\n    {\\n        uint256 activeDebt = activePool.getDebt();\\n        uint256 closedDebt = defaultPool.getDebt();\\n\\n        return activeDebt + closedDebt;\\n    }\\n\\n    function _getTCR(uint256 _price) internal view returns (uint256 TCR) {\\n        uint256 entireSystemColl = getEntireSystemColl();\\n        uint256 entireSystemDebt = getEntireSystemDebt();\\n\\n        TCR = LiquityMath._computeCR(\\n            entireSystemColl,\\n            entireSystemDebt,\\n            _price\\n        );\\n        return TCR;\\n    }\\n\\n    function _checkRecoveryMode(uint256 _price) internal view returns (bool) {\\n        uint256 TCR = _getTCR(_price);\\n        return TCR < CCR;\\n    }\\n\\n    function _requireUserAcceptsFee(\\n        uint256 _fee,\\n        uint256 _amount,\\n        uint256 _maxFeePercentage\\n    ) internal pure {\\n        uint256 feePercentage = (_fee * DECIMAL_PRECISION) / _amount;\\n        require(\\n            feePercentage <= _maxFeePercentage,\\n            \\\"Fee exceeded provided maximum\\\"\\n        );\\n    }\\n\\n    // Returns the composite debt (drawn debt + gas compensation) of a trove, for the purpose of ICR calculation\\n    function _getCompositeDebt(uint256 _debt) internal pure returns (uint) {\\n        return _debt + MUSD_GAS_COMPENSATION;\\n    }\\n\\n    function _getNetDebt(uint256 _debt) internal pure returns (uint) {\\n        return _debt - MUSD_GAS_COMPENSATION;\\n    }\\n\\n    // Return the amount of collateral to be drawn from a trove's collateral and sent as gas compensation.\\n    function _getCollGasCompensation(\\n        uint256 _entireColl\\n    ) internal pure returns (uint) {\\n        return _entireColl / PERCENT_DIVISOR;\\n    }\\n}\\n\",\"keccak256\":\"0xa9a78271bc378fe4b2d4a0cf412ca95dfebb9be10ea22411ac72901c93decf7e\",\"license\":\"MIT\"},\"contracts/dependencies/LiquityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nlibrary LiquityMath {\\n    uint256 internal constant DECIMAL_PRECISION = 1e18;\\n\\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\\n     *\\n     * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n     * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division.\\n     *\\n     * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 BTC,\\n     * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n     *\\n     */\\n    uint256 internal constant NICR_PRECISION = 1e20;\\n\\n    function _min(uint256 _a, uint256 _b) internal pure returns (uint) {\\n        return (_a < _b) ? _a : _b;\\n    }\\n\\n    /*\\n     * Multiply two decimal numbers and use normal rounding rules:\\n     * -round product up if 19'th mantissa digit >= 5\\n     * -round product down if 19'th mantissa digit < 5\\n     *\\n     * Used only inside the exponentiation, _decPow().\\n     */\\n    function decMul(\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256 decProd) {\\n        uint256 prod_xy = x * y;\\n\\n        decProd = (prod_xy + (DECIMAL_PRECISION / 2)) / DECIMAL_PRECISION;\\n    }\\n\\n    /*\\n     * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n     *\\n     * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n     *\\n     * Called by one function that represent time in units of minutes:\\n     * 1) TroveManager._calcDecayedBaseRate\\n     *\\n     * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n     * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n     *\\n     * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n     * negligibly different from just passing the cap, since:\\n     *\\n     * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n     * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n     */\\n    function _decPow(\\n        uint256 _base,\\n        uint256 _minutes\\n    ) internal pure returns (uint) {\\n        if (_minutes > 5.256e8) {\\n            _minutes = 5.256e8;\\n        } // cap to avoid overflow\\n\\n        if (_minutes == 0) {\\n            return DECIMAL_PRECISION;\\n        }\\n\\n        uint256 y = DECIMAL_PRECISION;\\n        uint256 x = _base;\\n        uint256 n = _minutes;\\n\\n        // Exponentiation-by-squaring\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                x = decMul(x, x);\\n                n = n / 2;\\n            } else {\\n                // if (n % 2 != 0)\\n                y = decMul(x, y);\\n                x = decMul(x, x);\\n                n = (n - 1) / 2;\\n            }\\n        }\\n\\n        return decMul(x, y);\\n    }\\n\\n    function _getAbsoluteDifference(\\n        uint256 _a,\\n        uint256 _b\\n    ) internal pure returns (uint) {\\n        return (_a >= _b) ? _a - _b : _b - _a;\\n    }\\n\\n    function _computeNominalCR(\\n        uint256 _coll,\\n        uint256 _debt\\n    ) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            return (_coll * NICR_PRECISION) / _debt;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else {\\n            // if (_debt == 0)\\n            return type(uint256).max;\\n        }\\n    }\\n\\n    function _computeCR(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint256 _price\\n    ) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            uint256 newCollRatio = (_coll * _price) / _debt;\\n\\n            return newCollRatio;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else {\\n            // if (_debt == 0)\\n            return type(uint256).max;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf0ce4e213ff9da167613bc96f87dab11816081a14f39284bc6bb3ad47a2f0bae\",\"license\":\"MIT\"},\"contracts/dependencies/SendCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract SendCollateral {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * Sends collateral to recipient\\n     */\\n    function sendCollateral(\\n        IERC20 _collateralERC20,\\n        address _recipient,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_collateralERC20) == address(0)) {\\n            // BTC\\n            // slither-disable-next-line low-level-calls\\n            (bool success, ) = _recipient.call{value: _amount}(\\\"\\\"); // re-entry is fine here\\n            require(success, \\\"Sending BTC failed\\\");\\n        } else {\\n            // ERC20\\n            _collateralERC20.safeTransfer(_recipient, _amount);\\n        }\\n    }\\n\\n    /**\\n     * Sends collateral to recipient\\n     */\\n    function sendCollateralFrom(\\n        IERC20 _collateralERC20,\\n        address _from,\\n        address _recipient,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_collateralERC20) == address(0)) {\\n            // BTC\\n            // slither-disable-next-line low-level-calls\\n            (bool success, ) = _recipient.call{value: _amount}(\\\"\\\"); // re-entry is fine here\\n            require(success, \\\"Sending BTC failed\\\");\\n        } else {\\n            // ERC20\\n            // slither-disable-next-line arbitrary-send-erc20\\n            _collateralERC20.safeTransferFrom(_from, _recipient, _amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9e921fc2b3babcb115a4e033f85b36f61b974e7a559f577a9fe8e1f9a354c4e0\",\"license\":\"MIT\"},\"contracts/interfaces/IActivePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IActivePool is IPool {\\n    // --- Events ---\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event CollSurplusPoolAddressChanged(address _newCollSurplusPoolAddress);\\n    event CollateralAddressChanged(address _newCollateralAddress);\\n    event InterestRateManagerAddressChanged(\\n        address _interestRateManagerAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n\\n    event ActivePoolDebtUpdated(uint256 _principal, uint256 _interest);\\n    event ActivePoolCollateralBalanceUpdated(uint256 _collateral);\\n\\n    // --- Functions ---\\n    function sendCollateral(address _account, uint256 _amount) external;\\n\\n    function collateralAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc3b69d722701967b3556cdd3e5d4f14b133411e320780b2501cf8549af6cd949\",\"license\":\"MIT\"},\"contracts/interfaces/IBorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\n// Common interface for the Trove Manager.\\ninterface IBorrowerOperations {\\n    // --- Events ---\\n\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event MUSDTokenAddressChanged(address _musdTokenAddress);\\n    event PCVAddressChanged(address _pcvAddress);\\n    event CollateralAddressChanged(address _newCollateralAddress);\\n\\n    event TroveCreated(address indexed _borrower, uint256 arrayIndex);\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint256 _principal,\\n        uint256 _interest,\\n        uint256 _coll,\\n        uint256 stake,\\n        uint8 operation\\n    );\\n    event BorrowingFeePaid(address indexed _borrower, uint256 _fee);\\n    event RefinancingFeePaid(address indexed _borrower, uint256 _fee);\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _activePoolAddress,\\n        address _collateralAddress,\\n        address _collSurplusPoolAddress,\\n        address _defaultPoolAddress,\\n        address _gasPoolAddress,\\n        address _interestRateManagerAddress,\\n        address _musdTokenAddress,\\n        address _pcvAddress,\\n        address _priceFeedAddress,\\n        address _stabilityPoolAddress,\\n        address _sortedTrovesAddress,\\n        address _troveManagerAddress\\n    ) external;\\n\\n    function setRefinancingFeePercentage(\\n        uint8 _refinanceFeePercentage\\n    ) external;\\n\\n    function openTrove(\\n        uint256 _maxFeePercentage,\\n        uint256 _debtAmount,\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    function addColl(\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    function moveCollateralGainToTrove(\\n        address _borrower,\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    function withdrawColl(\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function withdrawMUSD(\\n        uint256 _maxFeePercentage,\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function repayMUSD(\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function closeTrove() external;\\n\\n    function refinance(uint256 _maxFeePercentage) external;\\n\\n    function adjustTrove(\\n        uint256 _maxFeePercentage,\\n        uint256 _collWithdrawal,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease,\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    function claimCollateral() external;\\n\\n    function collateralAddress() external view returns (address);\\n\\n    function getCompositeDebt(uint256 _debt) external pure returns (uint);\\n}\\n\",\"keccak256\":\"0xd52b2e73557f53796cbb3081425e236ee015e4c8e868bdd8a51d7d4dc89aa19b\",\"license\":\"MIT\"},\"contracts/interfaces/ICollSurplusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\ninterface ICollSurplusPool {\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event CollateralAddressChanged(address _newCollateralAddress);\\n\\n    event CollBalanceUpdated(address indexed _account, uint256 _newBalance);\\n    event CollateralSent(address _to, uint256 _amount);\\n\\n    // --- Contract setters ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _collateralAddress\\n    ) external;\\n\\n    function accountSurplus(address _account, uint256 _amount) external;\\n\\n    function claimColl(address _account) external;\\n\\n    function collateralAddress() external view returns (address);\\n\\n    function getCollateralBalance() external view returns (uint);\\n\\n    function getCollateral(address _account) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x88876632aec941cf5a26379e33a299c04ddfa36ae3b28df14961e1ebbbb2c7a0\",\"license\":\"MIT\"},\"contracts/interfaces/IDefaultPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IDefaultPool is IPool {\\n    // --- Events ---\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event DefaultPoolDebtUpdated(uint256 _principal, uint256 _interest);\\n    event DefaultPoolCollateralBalanceUpdated(uint256 _collateral);\\n    event CollateralAddressChanged(address _newCollateralAddress);\\n\\n    // --- Functions ---\\n    function sendCollateralToActivePool(uint256 _amount) external;\\n\\n    function collateralAddress() external view returns (address);\\n\\n    function getLastInterestUpdatedTime() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x764439d379b9f63c8c326327a8287d3e071f3c37b8907034c36e236b7f739c6a\",\"license\":\"MIT\"},\"contracts/interfaces/IInterestRateManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.24;\\n\\ninterface IInterestRateManager {\\n    struct InterestRateInfo {\\n        uint256 principal;\\n        uint256 interest;\\n        uint256 lastUpdatedTime;\\n    }\\n\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\n    event MUSDTokenAddressChanged(address _musdTokenAddress);\\n    event PCVAddressChanged(address _pcvAddress);\\n    event TroveManagerAddressChanged(address _troveManagerAddress);\\n\\n    event InterestRateProposed(uint16 proposedRate, uint256 proposalTime);\\n    event InterestRateUpdated(uint16 newInterestRate);\\n    event MaxInterestRateUpdated(uint16 newMaxInterestRate);\\n\\n    function setAddresses(\\n        address _activePoolAddress,\\n        address _borrowerOperationsAddress,\\n        address _musdTokenAddress,\\n        address _pcvAddress,\\n        address _troveManagerAddress\\n    ) external;\\n\\n    function proposeInterestRate(uint16 _newProposedInterestRate) external;\\n\\n    function approveInterestRate() external;\\n\\n    function setMaxInterestRate(uint16 _newMaxInterestRate) external;\\n\\n    function addPrincipalToRate(uint16 _rate, uint256 _principal) external;\\n\\n    function addInterestToRate(uint16 _rate, uint256 _interest) external;\\n\\n    function removePrincipalFromRate(uint16 _rate, uint256 _principal) external;\\n\\n    function removeInterestFromRate(uint16 _rate, uint256 _interest) external;\\n\\n    function updateSystemInterest(uint16 _rate) external;\\n\\n    function updateTroveDebt(\\n        uint256 _interestOwed,\\n        uint256 _payment,\\n        uint16 _rate\\n    )\\n        external\\n        returns (uint256 principalAdjustment, uint256 interestAdjustment);\\n\\n    function interestRate() external view returns (uint16);\\n\\n    function getInterestRateData(\\n        uint16 _rate\\n    ) external view returns (InterestRateInfo memory);\\n\\n    function calculateDebtAdjustment(\\n        uint256 _interestOwed,\\n        uint256 _payment\\n    )\\n        external\\n        pure\\n        returns (uint256 principalAdjustment, uint256 interestAdjustment);\\n\\n    function calculateInterestOwed(\\n        uint256 _principal,\\n        uint16 _interestRate,\\n        uint256 startTime,\\n        uint256 endTime\\n    ) external pure returns (uint256);\\n}\\n\",\"keccak256\":\"0xa863eb64bbc36b0a8e93af56c4cea86d78a6594db7d59a2321d9105e771e7dcd\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILiquityBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./IPriceFeed.sol\\\";\\n\\ninterface ILiquityBase {\\n    function priceFeed() external view returns (IPriceFeed);\\n}\\n\",\"keccak256\":\"0x3487979ac84a3324c2e7e7d3a0a5e565a75afa0e464f74f338a9ea2ef212ce23\",\"license\":\"MIT\"},\"contracts/interfaces/IPCV.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/IMUSD.sol\\\";\\n\\ninterface IPCV {\\n    // --- Events --\\n    event MUSDTokenAddressSet(address _musdTokenAddress);\\n    event BorrowerOperationsAddressSet(address _borrowerOperationsAddress);\\n    event CollateralAddressSet(address _collateralAddress);\\n    event RolesSet(address _council, address _treasury);\\n    event MUSDWithdraw(address _recipient, uint256 _amount);\\n    event CollateralWithdraw(address _recipient, uint256 _collateralAmount);\\n    event PCVDebtPaid(uint256 _paidDebt);\\n    event RecipientAdded(address _recipient);\\n    event RecipientRemoved(address _recipient);\\n    event PCVFeePaid(address _recipient, uint256 _amount);\\n\\n    // --- Functions ---\\n\\n    function debtToPay() external returns (uint256);\\n\\n    function payDebt(uint256 _musdToBurn) external;\\n\\n    function setAddresses(\\n        address _musdTokenAddress,\\n        address _borrowerOperations,\\n        address _collateralERC20\\n    ) external;\\n\\n    function initialize() external;\\n\\n    function setFeeRecipient(address _feeRecipient) external;\\n\\n    function setFeeSplit(uint8 _feeSplitPercentage) external;\\n\\n    function withdrawMUSD(address _recipient, uint256 _musdAmount) external;\\n\\n    function withdrawCollateral(\\n        address _recipient,\\n        uint256 _collateralAmount\\n    ) external;\\n\\n    function addRecipientToWhitelist(address _recipient) external;\\n\\n    function addRecipientsToWhitelist(address[] calldata _recipients) external;\\n\\n    function removeRecipientFromWhitelist(address _recipient) external;\\n\\n    function removeRecipientsFromWhitelist(\\n        address[] calldata _recipients\\n    ) external;\\n\\n    function startChangingRoles(address _council, address _treasury) external;\\n\\n    function cancelChangingRoles() external;\\n\\n    function finalizeChangingRoles() external;\\n\\n    function collateralERC20() external view returns (IERC20);\\n\\n    function musd() external view returns (IMUSD);\\n\\n    function council() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf2e5f6afa185a4e8fd73539a29a3d266048ab17fa52e56c4b0bbde0cc88540d5\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\n// Common interface for the Pools.\\ninterface IPool {\\n    // --- Events ---\\n\\n    event CollateralBalanceUpdated(uint256 _newBalance);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event CollateralSent(address _to, uint256 _amount);\\n\\n    // --- Functions ---\\n\\n    function increaseDebt(uint256 _principal, uint256 _interest) external;\\n\\n    function decreaseDebt(uint256 _principal, uint256 _interest) external;\\n\\n    function getCollateralBalance() external view returns (uint);\\n\\n    function getDebt() external view returns (uint);\\n\\n    function getPrincipal() external view returns (uint);\\n\\n    function getInterest() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xfdb6fcad4c0965cf8617ce3db22d9db8661929ec8a1466672397f20fedb68550\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\ninterface IPriceFeed {\\n    // --- Events ---\\n    event LastGoodPriceUpdated(uint256 _lastGoodPrice);\\n\\n    event NewOracleRegistered(address _oracle);\\n\\n    // --- Function ---\\n    function fetchPrice() external returns (uint);\\n\\n    function setOracle(address _oracle) external;\\n}\\n\",\"keccak256\":\"0x2c0d4f671d023fd09105eaccdc68d34db8ec0aac71fdb15a23a279d1d56d9f28\",\"license\":\"MIT\"},\"contracts/interfaces/ISortedTroves.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\n// Common interface for the SortedTroves Doubly Linked List.\\ninterface ISortedTroves {\\n    // --- Events ---\\n\\n    event SortedTrovesAddressChanged(address _sortedDoublyLLAddress);\\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\n    event NodeAdded(address _id, uint256 _NICR);\\n    event NodeRemoved(address _id);\\n\\n    // --- Functions ---\\n\\n    function setParams(\\n        uint256 _size,\\n        address _TroveManagerAddress,\\n        address _borrowerOperationsAddress\\n    ) external;\\n\\n    function insert(\\n        address _id,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    function remove(address _id) external;\\n\\n    function reInsert(\\n        address _id,\\n        uint256 _newNICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    function contains(address _id) external view returns (bool);\\n\\n    function isFull() external view returns (bool);\\n\\n    function isEmpty() external view returns (bool);\\n\\n    function getSize() external view returns (uint256);\\n\\n    function getMaxSize() external view returns (uint256);\\n\\n    function getFirst() external view returns (address);\\n\\n    function getLast() external view returns (address);\\n\\n    function getNext(address _id) external view returns (address);\\n\\n    function getPrev(address _id) external view returns (address);\\n\\n    function validInsertPosition(\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (bool);\\n\\n    function findInsertPosition(\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (address, address);\\n}\\n\",\"keccak256\":\"0xfcc79b16288d5ba5b7001d5dfdac2ad415212d74dddd442d2af7b89f2fd1d5f9\",\"license\":\"MIT\"},\"contracts/interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\n/*\\n * The Stability Pool holds mUSD tokens deposited by Stability Pool depositors.\\n *\\n * When a trove is liquidated, then depending on system conditions, some of its debt gets offset with\\n * mUSD in the Stability Pool: that is, the offset debt evaporates, and an equal amount of mUSD tokens in the Stability Pool are burned.\\n *\\n * Thus, a liquidation causes each depositor to receive a mUSD loss in proportion to their deposit as a share of total deposits.\\n * They also receive an collateral gain, as the collateral of the liquidated trove is distributed among Stability depositors\\n * in the same proportion.\\n *\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\n * of the total mUSD in the Stability Pool, depletes 40% of each deposit.\\n *\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\n * multiplying it by some factor in range ]0,1[\\n *\\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / collateral gain derivations:\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\n *\\n */\\ninterface IStabilityPool {\\n    // --- Events ---\\n\\n    event StabilityPoolCollateralBalanceUpdated(uint256 _newBalance);\\n    event StabilityPoolMUSDBalanceUpdated(uint256 _newBalance);\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event MUSDTokenAddressChanged(address _newMUSDTokenAddress);\\n    event SortedTrovesAddressChanged(address _newSortedTrovesAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event CollateralAddressChanged(address _newCollateralAddress);\\n\\n    event PUpdated(uint256 _P);\\n    event SUpdated(uint256 _S, uint128 _epoch, uint128 _scale);\\n    event EpochUpdated(uint128 _currentEpoch);\\n    event ScaleUpdated(uint128 _currentScale);\\n\\n    event DepositSnapshotUpdated(\\n        address indexed _depositor,\\n        uint256 _P,\\n        uint256 _S\\n    );\\n    event UserDepositChanged(address indexed _depositor, uint256 _newDeposit);\\n\\n    event CollateralGainWithdrawn(\\n        address indexed _depositor,\\n        uint256 _collateral,\\n        uint256 _MUSDLoss\\n    );\\n    event CollateralSent(address _to, uint256 _amount);\\n\\n    // --- Functions ---\\n\\n    /*\\n     * Called only once on init, to set addresses of other Liquity contracts\\n     * Callable only by owner, renounces ownership at the end\\n     */\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _musdTokenAddress,\\n        address _sortedTrovesAddress,\\n        address _priceFeedAddress,\\n        address _collateralAddress\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is not zero\\n     * ---\\n     * - Sends depositor's accumulated gains (collateral) to depositor\\n     */\\n    function provideToSP(uint256 _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is zero or there are no under collateralized troves left in the system\\n     * - User has a non zero deposit\\n     * ---\\n     * - Sends all depositor's accumulated gains (collateral) to depositor\\n     * - Decreases deposit stake, and takes new snapshot.\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(uint256 _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - User has a non zero deposit\\n     * - User has an open trove\\n     * - User has some collateral gain\\n     * ---\\n     * - Transfers the depositor's entire collateral gain from the Stability Pool to the caller's trove\\n     * - Leaves their compounded deposit in the Stability Pool\\n     * - Updates snapshots for deposit\\n     */\\n    function withdrawCollateralGainToTrove(\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Caller is TroveManager\\n     * ---\\n     * Cancels out the specified debt against the mUSD contained in the Stability Pool (as far as possible)\\n     * and transfers the Trove's collateral from ActivePool to StabilityPool.\\n     * Only called by liquidation functions in the TroveManager.\\n     */\\n    function offset(uint256 _debt, uint256 _coll) external;\\n\\n    /*\\n     * Returns the total amount of collateral held by the pool, accounted in an internal variable instead of `balance`,\\n     * to exclude edge cases like collateral received from a self-destruct.\\n     */\\n    function getCollateralBalance() external view returns (uint);\\n\\n    /*\\n     * Returns mUSD held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\n     */\\n    function getTotalMUSDDeposits() external view returns (uint);\\n\\n    /*\\n     * Calculates the collateral gain earned by the deposit since its last snapshots were taken.\\n     */\\n    function getDepositorCollateralGain(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Return the user's compounded deposit.\\n     */\\n    function getCompoundedMUSDDeposit(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Fallback function\\n     * Only callable by Active Pool, it just accounts for BTC received\\n     * receive() external payable;\\n     */\\n\\n    function collateralAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa826c8d5909d57d4eb23c7e4a9c5496c8c41ed759fbaf8a574cf39d26779c08f\",\"license\":\"MIT\"},\"contracts/interfaces/ITroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./IStabilityPool.sol\\\";\\nimport \\\"./IPCV.sol\\\";\\n\\n// Common interface for the Trove Manager.\\ninterface ITroveManager {\\n    enum Status {\\n        nonExistent,\\n        active,\\n        closedByOwner,\\n        closedByLiquidation,\\n        closedByRedemption\\n    }\\n\\n    struct InterestRateChange {\\n        uint16 interestRate;\\n        uint256 blockNumber;\\n    }\\n\\n    // --- Events ---\\n\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event InterestRateManagerAddressChanged(\\n        address _interestRateManagerAddress\\n    );\\n    event MUSDTokenAddressChanged(address _newMUSDTokenAddress);\\n    event PCVAddressChanged(address _pcvAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n\\n    event Liquidation(\\n        uint256 _liquidatedPrincipal,\\n        uint256 _liquidatedInterest,\\n        uint256 _liquidatedColl,\\n        uint256 _collGasCompensation,\\n        uint256 _gasCompensation\\n    );\\n    event Redemption(\\n        uint256 _attemptedAmount,\\n        uint256 _actualAmount,\\n        uint256 _collateralSent,\\n        uint256 _collateralFee\\n    );\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint256 _principal,\\n        uint256 _interest,\\n        uint256 _coll,\\n        uint256 stake,\\n        uint8 operation\\n    );\\n    event TroveLiquidated(\\n        address indexed _borrower,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint8 operation\\n    );\\n    event BaseRateUpdated(uint256 _baseRate);\\n    event LastFeeOpTimeUpdated(uint256 _lastFeeOpTime);\\n    event TotalStakesUpdated(uint256 _newTotalStakes);\\n    event SystemSnapshotsUpdated(\\n        uint256 _totalStakesSnapshot,\\n        uint256 _totalCollateralSnapshot\\n    );\\n    event LTermsUpdated(\\n        uint256 _L_Collateral,\\n        uint256 _L_Principal,\\n        uint256 _L_Interest\\n    );\\n    event TroveSnapshotsUpdated(\\n        uint256 _L_Collateral,\\n        uint256 _L_Principal,\\n        uint256 _L_Interest\\n    );\\n    event TroveIndexUpdated(address _borrower, uint256 _newIndex);\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _activePoolAddress,\\n        address _borrowerOperationsAddress,\\n        address _collSurplusPoolAddress,\\n        address _defaultPoolAddress,\\n        address _gasPoolAddress,\\n        address _interestRateManagerAddress,\\n        address _musdTokenAddress,\\n        address _pcvAddress,\\n        address _priceFeedAddress,\\n        address _sortedTrovesAddress,\\n        address _stabilityPoolAddress\\n    ) external;\\n\\n    function liquidate(address _borrower) external;\\n\\n    function batchLiquidateTroves(address[] calldata _troveArray) external;\\n\\n    function redeemCollateral(\\n        uint256 _amount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint256 _partialRedemptionHintNICR,\\n        uint256 _maxIterations,\\n        uint256 _maxFeePercentage\\n    ) external;\\n\\n    function updateStakeAndTotalStakes(\\n        address _borrower\\n    ) external returns (uint);\\n\\n    function updateTroveRewardSnapshots(address _borrower) external;\\n\\n    function addTroveOwnerToArray(\\n        address _borrower\\n    ) external returns (uint256 index);\\n\\n    function applyPendingRewards(address _borrower) external;\\n\\n    function closeTrove(address _borrower) external;\\n\\n    function removeStake(address _borrower) external;\\n\\n    function decayBaseRateFromBorrowing() external;\\n\\n    function setTroveStatus(address _borrower, Status _status) external;\\n\\n    function setTroveMaxBorrowingCapacity(\\n        address _borrower,\\n        uint256 _maxBorrowingCapacity\\n    ) external;\\n\\n    function updateDefaultPoolInterest() external;\\n\\n    function updateSystemAndTroveInterest(address _borrower) external;\\n\\n    function increaseTroveColl(\\n        address _borrower,\\n        uint256 _collIncrease\\n    ) external returns (uint);\\n\\n    function decreaseTroveColl(\\n        address _borrower,\\n        uint256 _collDecrease\\n    ) external returns (uint);\\n\\n    function increaseTroveDebt(\\n        address _borrower,\\n        uint256 _debtIncrease\\n    ) external returns (uint256);\\n\\n    function decreaseTroveDebt(\\n        address _borrower,\\n        uint256 _debtDecrease\\n    ) external returns (uint256, uint256);\\n\\n    function setTroveInterestRate(address _borrower, uint16 _rate) external;\\n\\n    function setTroveLastInterestUpdateTime(\\n        address _borrower,\\n        uint256 _timestamp\\n    ) external;\\n\\n    function stabilityPool() external view returns (IStabilityPool);\\n\\n    function pcv() external view returns (IPCV);\\n\\n    function getTroveOwnersCount() external view returns (uint);\\n\\n    function getTroveFromTroveOwnersArray(\\n        uint256 _index\\n    ) external view returns (address);\\n\\n    function getTroveInterestOwed(\\n        address _borrower\\n    ) external view returns (uint256);\\n\\n    function getTrovePrincipal(address _borrower) external view returns (uint);\\n\\n    function getNominalICR(address _borrower) external view returns (uint);\\n\\n    function getCurrentICR(\\n        address _borrower,\\n        uint256 _price\\n    ) external view returns (uint);\\n\\n    function getPendingCollateral(\\n        address _borrower\\n    ) external view returns (uint);\\n\\n    function getPendingDebt(\\n        address _borrower\\n    ) external view returns (uint256, uint256);\\n\\n    function hasPendingRewards(address _borrower) external view returns (bool);\\n\\n    function getEntireDebtAndColl(\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 coll,\\n            uint256 principal,\\n            uint256 interest,\\n            uint256 pendingCollateral,\\n            uint256 pendingPrincipal,\\n            uint256 pendingInterest\\n        );\\n\\n    function getRedemptionRate() external view returns (uint);\\n\\n    function getRedemptionRateWithDecay() external view returns (uint);\\n\\n    function getRedemptionFeeWithDecay(\\n        uint256 _collateralDrawn\\n    ) external view returns (uint);\\n\\n    function getBorrowingRate() external view returns (uint);\\n\\n    function getBorrowingRateWithDecay() external view returns (uint);\\n\\n    function getBorrowingFee(uint256 _debt) external view returns (uint);\\n\\n    function getBorrowingFeeWithDecay(\\n        uint256 _debt\\n    ) external view returns (uint);\\n\\n    function getTroveStatus(address _borrower) external view returns (Status);\\n\\n    function getTroveStake(address _borrower) external view returns (uint);\\n\\n    function getTroveDebt(address _borrower) external view returns (uint);\\n\\n    function getTroveInterestRate(\\n        address _borrower\\n    ) external view returns (uint16);\\n\\n    function getTroveLastInterestUpdateTime(\\n        address _borrower\\n    ) external view returns (uint);\\n\\n    function getTroveColl(address _borrower) external view returns (uint);\\n\\n    function getTCR(uint256 _price) external view returns (uint);\\n\\n    function checkRecoveryMode(uint256 _price) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x14774fba145999c49d0fff49dc484ff673e677796dbd55784014bd82ff0c405c\",\"license\":\"MIT\"},\"contracts/token/IMUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\n\\ninterface IMUSD is IERC20Metadata, IERC20Permit {\\n    // --- Events ---\\n    event BorrowerOperationsAddressAdded(address _newBorrowerOperationsAddress);\\n    event BalanceUpdated(address _user, uint256 _amount);\\n    event InterestRateManagerAddressAdded(address _interestRateManagerAddress);\\n    event StabilityPoolAddressAdded(address _newStabilityPoolAddress);\\n    event TroveManagerAddressAdded(address _troveManagerAddress);\\n\\n    // --- Governance Functions ---\\n    function cancelAddContracts() external;\\n\\n    function cancelAddMintList() external;\\n\\n    function cancelRevokeBurnList() external;\\n\\n    function cancelRevokeMintList() external;\\n\\n    function startAddContracts(\\n        address _troveManagerAddress,\\n        address _stabilityPoolAddress,\\n        address _borrowerOperationsAddress,\\n        address _interestRateManagerAddress\\n    ) external;\\n\\n    function startAddMintList(address _account) external;\\n\\n    function startRevokeBurnList(address _account) external;\\n\\n    function startRevokeMintList(address _account) external;\\n\\n    function finalizeAddContracts() external;\\n\\n    function finalizeAddMintList() external;\\n\\n    function finalizeRevokeBurnList() external;\\n\\n    function finalizeRevokeMintList() external;\\n\\n    // --- External Functions ---\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burnList(address contractAddress) external view returns (bool);\\n\\n    function mintList(address contractAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x87733ae6378e124af9fffbba7334f5f2330a1786c601d2da70dd800ee95500b6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620025bc380380620025bc83398101604081905262000034916200011a565b33806200005c57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6200006781620000ca565b506080819052630114db00811115620000c35760405162461bcd60e51b815260206004820152601b60248201527f476f7665726e616e63652064656c617920697320746f6f206269670000000000604482015260640162000053565b5062000134565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156200012d57600080fd5b5051919050565b60805161245e6200015e6000396000818161050101528181611378015261198b015261245e6000f3fe6080604052600436106101bd5760003560e01c80638129fc1c116100ed578063cab666d011610090578063cab666d014610569578063ceba3caf14610589578063d549e618146105a9578063e2c6d41c146105be578063e46a3a4f146105e3578063e74b981b14610603578063e7c88cda14610623578063f2fde38b14610643578063fd388be21461066357600080fd5b80638129fc1c146104655780638a74de291461047a5780638da5cb5b1461049a578063977ade35146104af578063addf4dd1146104cf578063afe5bf93146104ef578063b3ae0af614610523578063c54440611461053957600080fd5b80633a150ed2116101605780633a150ed21461033c57806346904840146103695780634fdb7d311461038957806361d027b3146103a957806369cee758146103c9578063715018a6146103e9578063724d3745146103fe5780637539d4dc1461041e57806377553ad41461044557600080fd5b80630aa7c21e1461023557806316fc3297146102555780631bf1758b146102755780631ecc4975146102a7578063350c35e9146102bc578063363bf964146102dc578063369931fa146102fc578063392e53cd1461031257600080fd5b36610230576002546001600160a01b03161561022e5760405162461bcd60e51b815260206004820152602560248201527f5043563a20455243323020636f6c6c61746572616c206e65656465642c206e6f604482015264742042544360d81b60648201526084015b60405180910390fd5b005b600080fd5b34801561024157600080fd5b5061022e610250366004611fcc565b610684565b34801561026157600080fd5b5061022e610270366004611fe9565b61076e565b34801561028157600080fd5b506102946a52b7d2dcc80cd2e400000081565b6040519081526020015b60405180910390f35b3480156102b357600080fd5b5061022e610b03565b3480156102c857600080fd5b5061022e6102d7366004612002565b610b50565b3480156102e857600080fd5b5061022e6102f736600461202e565b610c67565b34801561030857600080fd5b5061029460045481565b34801561031e57600080fd5b5060055461032c9060ff1681565b604051901515815260200161029e565b34801561034857600080fd5b5060085461035c906001600160a01b031681565b60405161029e9190612079565b34801561037557600080fd5b50600b5461035c906001600160a01b031681565b34801561039557600080fd5b5061022e6103a436600461208d565b610f36565b3480156103b557600080fd5b5060065461035c906001600160a01b031681565b3480156103d557600080fd5b5061022e6103e4366004611fcc565b61109a565b3480156103f557600080fd5b5061022e611165565b34801561040a57600080fd5b5060025461035c906001600160a01b031681565b34801561042a57600080fd5b50610433603281565b60405160ff909116815260200161029e565b34801561045157600080fd5b5060035461035c906001600160a01b031681565b34801561047157600080fd5b5061022e611179565b34801561048657600080fd5b5061022e6104953660046120b0565b6112c2565b3480156104a657600080fd5b5061035c6113dc565b3480156104bb57600080fd5b5061022e6104ca366004611fe9565b6113eb565b3480156104db57600080fd5b5061022e6104ea366004612002565b6116d7565b3480156104fb57600080fd5b506102947f000000000000000000000000000000000000000000000000000000000000000081565b34801561052f57600080fd5b50610294600a5481565b34801561054557600080fd5b5061032c610554366004611fcc565b60076020526000908152604090205460ff1681565b34801561057557600080fd5b5060015461035c906001600160a01b031681565b34801561059557600080fd5b5061022e6105a43660046120e9565b6118f8565b3480156105b557600080fd5b5061022e61195f565b3480156105ca57600080fd5b5060055461035c9061010090046001600160a01b031681565b3480156105ef57600080fd5b5060095461035c906001600160a01b031681565b34801561060f57600080fd5b5061022e61061e366004611fcc565b611abb565b34801561062f57600080fd5b5061022e61063e3660046120e9565b611b50565b34801561064f57600080fd5b5061022e61065e366004611fcc565b611bb2565b34801561066f57600080fd5b50600b5461043390600160a01b900460ff1681565b61068c611bed565b6001600160a01b03811660009081526007602052604090205460ff16156107105760405162461bcd60e51b815260206004820152603260248201527f5043563a20526563697069656e742068617320616c7265616479206265656e206044820152711859191959081d1bc81dda1a5d195b1a5cdd60721b6064820152608401610225565b6001600160a01b03811660009081526007602052604090819020805460ff19166001179055517f4205b1cf2b33c8147cc02b8fb0c9d3ff098218a686b0dd94b1e35d3c3968ad8c90610763908390612079565b60405180910390a150565b6107766113dc565b6001600160a01b0316336001600160a01b031614806107a4575060055461010090046001600160a01b031633145b806107b957506006546001600160a01b031633145b6107d55760405162461bcd60e51b81526004016102259061215e565b600060045411806107f05750600b546001600160a01b031615155b61083c5760405162461bcd60e51b815260206004820152601a60248201527f5043563a20646562742068617320616c726561647920706169640000000000006044820152606401610225565b6001546040516370a0823160e01b81526001600160a01b03909116906370a082319061086c903090600401612079565b602060405180830381865afa158015610889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ad91906121ae565b8111156108cc5760405162461bcd60e51b8152600401610225906121c7565b6004546000036108ea57600b805460ff60a01b1916601960a21b1790555b600b5460009060649061090790600160a01b900460ff168461220d565b6109119190612224565b9050600061091f8284612246565b905060045481111561094a576004546109389082612246565b6109429083612259565b915060045490505b806004600082825461095c9190612246565b9091555050600b546001600160a01b0316158015906109865750600b54600160a01b900460ff1615155b15610a2057600154600b5460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb926109c192911690869060040161226c565b6020604051808303816000875af11580156109e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a049190612285565b610a205760405162461bcd60e51b8152600401610225906122a7565b600354604051632ba7511760e21b8152600481018390526001600160a01b039091169063ae9d445c90602401600060405180830381600087803b158015610a6657600080fd5b505af1158015610a7a573d6000803e3d6000fd5b505050507f3707046ba5d439e45ec51fb4596b88edce7802ede659f36e89931cd34c1cc05681604051610aaf91815260200190565b60405180910390a1600b546040517fdb7984dcab3b8cbd65e301ae592b73ad576c3607e1c32f65a93dbaf5d34b786091610af6916001600160a01b0390911690859061226c565b60405180910390a1505050565b610b0b611bed565b600a54600003610b2d5760405162461bcd60e51b8152600401610225906122d9565b6000600a55600880546001600160a01b0319908116909155600980549091169055565b60055460ff168015610b625750600454155b610b7e5760405162461bcd60e51b81526004016102259061230c565b610b866113dc565b6001600160a01b0316336001600160a01b03161480610bb4575060055461010090046001600160a01b031633145b80610bc957506006546001600160a01b031633145b610be55760405162461bcd60e51b81526004016102259061215e565b6001600160a01b038216600090815260076020526040902054829060ff16610c1f5760405162461bcd60e51b81526004016102259061233c565b600254610c36906001600160a01b03168484611c1f565b7f92682d28e4c16f4a2ddb833ecdd2bab2f2da69e2f325cda58d421e7d634b8e278383604051610af692919061226c565b610c6f611bed565b6001546001600160a01b031615610cc45760405162461bcd60e51b81526020600482015260196024820152781410d58e8818dbdb9d1858dd1cc8185b1c9958591e481cd95d603a1b6044820152606401610225565b610ccd83611cdf565b610cd682611cdf565b6001600160a01b03811615610cee57610cee81611cdf565b600180546001600160a01b038086166001600160a01b0319928316179092556002805484841690831617905560038054928516929091168217905560408051638da5cb5b60e01b8152905160009291638da5cb5b9160048083019260209291908290030181865afa158015610d67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8b919061237f565b6001600160a01b0316141580610e165750600354604080516348d399e760e01b815290516001600160a01b038085169316916348d399e79160048083019260209291908290030181865afa158015610de7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0b919061237f565b6001600160a01b0316145b610e995760405162461bcd60e51b815260206004820152604860248201527f5468652073616d6520636f6c6c61746572616c2061646472657373206d75737460448201527f206265207573656420666f722074686520656e7469726520736574206f6620636064820152676f6e74726163747360c01b608482015260a401610225565b7f1d45a7bae601fb3bdd4955d0de1d3a7f87c82d5e0109f47435776fa0ed5c530383604051610ec89190612079565b60405180910390a17f5962f8af633c4df1ab230096f773a514ee5adf7785c621ecdcdb764cb7f6e39182604051610eff9190612079565b60405180910390a17f355910d9025fedfb0c92482ab13962c2817c933700f665b15343c394533e4fc881604051610af69190612079565b610f3e6113dc565b6001600160a01b0316336001600160a01b03161480610f6c575060055461010090046001600160a01b031633145b80610f8157506006546001600160a01b031633145b610f9d5760405162461bcd60e51b81526004016102259061215e565b6000600454116110085760405162461bcd60e51b815260206004820152603060248201527f5043563a204d7573742068617665206465627420696e206f7264657220746f2060448201526f39b2ba1030903332b29039b83634ba1760811b6064820152608401610225565b603260ff8216111561107a5760405162461bcd60e51b815260206004820152603560248201527f5043563a204665652073706c6974206d757374206265206174206d6f7374203560448201527418103bb434b632903232b13a103932b6b0b4b7399760591b6064820152608401610225565b600b805460ff909216600160a01b0260ff60a01b19909216919091179055565b6110a2611bed565b6001600160a01b03811660009081526007602052604090205460ff166111155760405162461bcd60e51b815260206004820152602260248201527f5043563a20526563697069656e74206973206e6f7420696e2077686974656c696044820152611cdd60f21b6064820152608401610225565b6001600160a01b03811660009081526007602052604090819020805460ff19169055517f8176fc5412eb5076fee7f1a264915b808c24d495c2698c189030e5200e707d2590610763908390612079565b61116d611bed565b6111776000611d88565b565b6111816113dc565b6001600160a01b0316336001600160a01b031614806111af575060055461010090046001600160a01b031633145b806111c457506006546001600160a01b031633145b6111e05760405162461bcd60e51b81526004016102259061215e565b60055460ff161561122e5760405162461bcd60e51b81526020600482015260186024820152771410d58e88185b1c9958591e481a5b9a5d1a585b1a5e995960421b6044820152606401610225565b6a52b7d2dcc80cd2e400000060048181556005805460ff1916600117905560035460405163b064b0b760e01b81526001600160a01b039091169263b064b0b79261127c920190815260200190565b600060405180830381600087803b15801561129657600080fd5b505af11580156112aa573d6000803e3d6000fd5b505050506111776a52b7d2dcc80cd2e40000006113eb565b6112ca611bed565b6005546001600160a01b03838116610100909204161415806112fa57506006546001600160a01b03828116911614155b6113465760405162461bcd60e51b815260206004820152601c60248201527f5043563a20746865736520726f6c657320616c726561647920736574000000006044820152606401610225565b42600a5560055461010090046001600160a01b031615801561137157506006546001600160a01b0316155b156113ae577f0000000000000000000000000000000000000000000000000000000000000000600a60008282546113a89190612246565b90915550505b600880546001600160a01b039384166001600160a01b03199182161790915560098054929093169116179055565b6000546001600160a01b031690565b6113f36113dc565b6001600160a01b0316336001600160a01b03161480611421575060055461010090046001600160a01b031633145b8061143657506006546001600160a01b031633145b6114525760405162461bcd60e51b81526004016102259061215e565b6001546040516370a0823160e01b81526001600160a01b03909116906370a0823190611482903090600401612079565b602060405180830381865afa15801561149f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c391906121ae565b8111156114e25760405162461bcd60e51b8152600401610225906121c7565b600154600354604080516305b1155960e11b815290516001600160a01b039384169363095ea7b3931691630b622ab29160048083019260209291908290030181865afa158015611536573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155a919061237f565b836040518363ffffffff1660e01b815260040161157892919061226c565b6020604051808303816000875af1158015611597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bb9190612285565b6115fe5760405162461bcd60e51b81526020600482015260146024820152731410d58e88105c1c1c9bdd985b0819985a5b195960621b6044820152606401610225565b600360009054906101000a90046001600160a01b03166001600160a01b0316630b622ab26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611651573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611675919061237f565b6001600160a01b03166378c77a24826040518263ffffffff1660e01b81526004016116a291815260200190565b600060405180830381600087803b1580156116bc57600080fd5b505af11580156116d0573d6000803e3d6000fd5b5050505050565b60055460ff1680156116e95750600454155b6117055760405162461bcd60e51b81526004016102259061230c565b61170d6113dc565b6001600160a01b0316336001600160a01b0316148061173b575060055461010090046001600160a01b031633145b8061175057506006546001600160a01b031633145b61176c5760405162461bcd60e51b81526004016102259061215e565b6001600160a01b038216600090815260076020526040902054829060ff166117a65760405162461bcd60e51b81526004016102259061233c565b6001546040516370a0823160e01b81526001600160a01b03909116906370a08231906117d6903090600401612079565b602060405180830381865afa1580156117f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181791906121ae565b8211156118365760405162461bcd60e51b8152600401610225906121c7565b60015460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90611868908690869060040161226c565b6020604051808303816000875af1158015611887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ab9190612285565b6118c75760405162461bcd60e51b8152600401610225906122a7565b7f224dc11ebff077175e89868ae3e43dbfb345b0fec71aaadf10ccd9de4f60b68f8383604051610af692919061226c565b611900611bed565b8061191d5760405162461bcd60e51b81526004016102259061239c565b60005b8181101561195a5761195283838381811061193d5761193d6123e3565b90506020020160208101906103e49190611fcc565b600101611920565b505050565b611967611bed565b6000600a54116119895760405162461bcd60e51b8152600401610225906122d9565b7f0000000000000000000000000000000000000000000000000000000000000000600a546119b79190612259565b421015611a145760405162461bcd60e51b815260206004820152602560248201527f5043563a20476f7665726e616e63652064656c617920686173206e6f7420656c604482015264185c1cd95960da1b6064820152608401610225565b60085460058054610100600160a81b0319166101006001600160a01b0393841681029190911791829055600954600680549185166001600160a01b0319909216821790556040805192909304909316815260208101929092527f59c75b5339bba5e93a172203f9379bc69e8a051519504a7e71c467e818a41ced910160405180910390a16000600a55600880546001600160a01b0319908116909155600980549091169055565b611ac36113dc565b6001600160a01b0316336001600160a01b03161480611af1575060055461010090046001600160a01b031633145b80611b0657506006546001600160a01b031633145b611b225760405162461bcd60e51b81526004016102259061215e565b6001600160a01b03811615611b4d57600b80546001600160a01b0319166001600160a01b0383161790555b50565b611b58611bed565b80611b755760405162461bcd60e51b81526004016102259061239c565b60005b8181101561195a57611baa838383818110611b9557611b956123e3565b90506020020160208101906102509190611fcc565b600101611b78565b611bba611bed565b6001600160a01b038116611be4576000604051631e4fbdf760e01b81526004016102259190612079565b611b4d81611d88565b33611bf66113dc565b6001600160a01b031614611177573360405163118cdaa760e01b81526004016102259190612079565b6001600160a01b038316611ccb576000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611c7a576040519150601f19603f3d011682016040523d82523d6000602084013e611c7f565b606091505b5050905080611cc55760405162461bcd60e51b815260206004820152601260248201527114d95b991a5b99c8109510c819985a5b195960721b6044820152606401610225565b50505050565b61195a6001600160a01b0384168383611dd8565b6001600160a01b038116611d355760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f206164647265737300006044820152606401610225565b803b80611d845760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f6044820152606401610225565b5050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61195a83846001600160a01b031663a9059cbb8585604051602401611dfe92919061226c565b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506000611e406001600160a01b03841683611e85565b90508051600014158015611e65575080806020019051810190611e639190612285565b155b1561195a5782604051635274afe760e01b81526004016102259190612079565b6060611e9383836000611e9c565b90505b92915050565b606081471015611ec1573060405163cd78605960e01b81526004016102259190612079565b600080856001600160a01b03168486604051611edd91906123f9565b60006040518083038185875af1925050503d8060008114611f1a576040519150601f19603f3d011682016040523d82523d6000602084013e611f1f565b606091505b5091509150611f2f868383611f3b565b925050505b9392505050565b606082611f5057611f4b82611f8e565b611f34565b8151158015611f6757506001600160a01b0384163b155b15611f875783604051639996b31560e01b81526004016102259190612079565b5080611f34565b805115611f9e5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6001600160a01b0381168114611b4d57600080fd5b600060208284031215611fde57600080fd5b8135611f3481611fb7565b600060208284031215611ffb57600080fd5b5035919050565b6000806040838503121561201557600080fd5b823561202081611fb7565b946020939093013593505050565b60008060006060848603121561204357600080fd5b833561204e81611fb7565b9250602084013561205e81611fb7565b9150604084013561206e81611fb7565b809150509250925092565b6001600160a01b0391909116815260200190565b60006020828403121561209f57600080fd5b813560ff81168114611f3457600080fd5b600080604083850312156120c357600080fd5b82356120ce81611fb7565b915060208301356120de81611fb7565b809150509250929050565b600080602083850312156120fc57600080fd5b823567ffffffffffffffff8082111561211457600080fd5b818501915085601f83011261212857600080fd5b81358181111561213757600080fd5b8660208260051b850101111561214c57600080fd5b60209290920196919550909350505050565b60208082526030908201527f5043563a2063616c6c6572206d757374206265206f776e6572206f7220636f7560408201526f6e63696c206f7220747265617375727960801b606082015260800190565b6000602082840312156121c057600080fd5b5051919050565b6020808252601690820152755043563a206e6f7420656e6f75676820746f6b656e7360501b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417611e9657611e966121f7565b60008261224157634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115611e9657611e966121f7565b80820180821115611e9657611e966121f7565b6001600160a01b03929092168252602082015260400190565b60006020828403121561229757600080fd5b81518015158114611f3457600080fd5b6020808252601890820152771410d58e881cd95b991a5b99c81b5554d10819985a5b195960421b604082015260600190565b6020808252601990820152781410d58e8810da185b99d9481b9bdd081a5b9a5d1a585d1959603a1b604082015260600190565b6020808252601690820152751410d58e881919589d081b5d5cdd081899481c185a5960521b604082015260600190565b60208082526023908201527f5043563a20726563697069656e74206d75737420626520696e2077686974656c6040820152621a5cdd60ea1b606082015260800190565b60006020828403121561239157600080fd5b8151611f3481611fb7565b60208082526027908201527f5043563a20526563697069656e7473206172726179206d757374206e6f7420626040820152666520656d70747960c81b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000825160005b8181101561241a5760208186018101518583015201612400565b50600092019182525091905056fea26469706673582212207bfcd47d0504f5913e29d282645a2aa2cfe4c52e631504ec2d9cb4b915459ba064736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106101bd5760003560e01c80638129fc1c116100ed578063cab666d011610090578063cab666d014610569578063ceba3caf14610589578063d549e618146105a9578063e2c6d41c146105be578063e46a3a4f146105e3578063e74b981b14610603578063e7c88cda14610623578063f2fde38b14610643578063fd388be21461066357600080fd5b80638129fc1c146104655780638a74de291461047a5780638da5cb5b1461049a578063977ade35146104af578063addf4dd1146104cf578063afe5bf93146104ef578063b3ae0af614610523578063c54440611461053957600080fd5b80633a150ed2116101605780633a150ed21461033c57806346904840146103695780634fdb7d311461038957806361d027b3146103a957806369cee758146103c9578063715018a6146103e9578063724d3745146103fe5780637539d4dc1461041e57806377553ad41461044557600080fd5b80630aa7c21e1461023557806316fc3297146102555780631bf1758b146102755780631ecc4975146102a7578063350c35e9146102bc578063363bf964146102dc578063369931fa146102fc578063392e53cd1461031257600080fd5b36610230576002546001600160a01b03161561022e5760405162461bcd60e51b815260206004820152602560248201527f5043563a20455243323020636f6c6c61746572616c206e65656465642c206e6f604482015264742042544360d81b60648201526084015b60405180910390fd5b005b600080fd5b34801561024157600080fd5b5061022e610250366004611fcc565b610684565b34801561026157600080fd5b5061022e610270366004611fe9565b61076e565b34801561028157600080fd5b506102946a52b7d2dcc80cd2e400000081565b6040519081526020015b60405180910390f35b3480156102b357600080fd5b5061022e610b03565b3480156102c857600080fd5b5061022e6102d7366004612002565b610b50565b3480156102e857600080fd5b5061022e6102f736600461202e565b610c67565b34801561030857600080fd5b5061029460045481565b34801561031e57600080fd5b5060055461032c9060ff1681565b604051901515815260200161029e565b34801561034857600080fd5b5060085461035c906001600160a01b031681565b60405161029e9190612079565b34801561037557600080fd5b50600b5461035c906001600160a01b031681565b34801561039557600080fd5b5061022e6103a436600461208d565b610f36565b3480156103b557600080fd5b5060065461035c906001600160a01b031681565b3480156103d557600080fd5b5061022e6103e4366004611fcc565b61109a565b3480156103f557600080fd5b5061022e611165565b34801561040a57600080fd5b5060025461035c906001600160a01b031681565b34801561042a57600080fd5b50610433603281565b60405160ff909116815260200161029e565b34801561045157600080fd5b5060035461035c906001600160a01b031681565b34801561047157600080fd5b5061022e611179565b34801561048657600080fd5b5061022e6104953660046120b0565b6112c2565b3480156104a657600080fd5b5061035c6113dc565b3480156104bb57600080fd5b5061022e6104ca366004611fe9565b6113eb565b3480156104db57600080fd5b5061022e6104ea366004612002565b6116d7565b3480156104fb57600080fd5b506102947f000000000000000000000000000000000000000000000000000000000000000081565b34801561052f57600080fd5b50610294600a5481565b34801561054557600080fd5b5061032c610554366004611fcc565b60076020526000908152604090205460ff1681565b34801561057557600080fd5b5060015461035c906001600160a01b031681565b34801561059557600080fd5b5061022e6105a43660046120e9565b6118f8565b3480156105b557600080fd5b5061022e61195f565b3480156105ca57600080fd5b5060055461035c9061010090046001600160a01b031681565b3480156105ef57600080fd5b5060095461035c906001600160a01b031681565b34801561060f57600080fd5b5061022e61061e366004611fcc565b611abb565b34801561062f57600080fd5b5061022e61063e3660046120e9565b611b50565b34801561064f57600080fd5b5061022e61065e366004611fcc565b611bb2565b34801561066f57600080fd5b50600b5461043390600160a01b900460ff1681565b61068c611bed565b6001600160a01b03811660009081526007602052604090205460ff16156107105760405162461bcd60e51b815260206004820152603260248201527f5043563a20526563697069656e742068617320616c7265616479206265656e206044820152711859191959081d1bc81dda1a5d195b1a5cdd60721b6064820152608401610225565b6001600160a01b03811660009081526007602052604090819020805460ff19166001179055517f4205b1cf2b33c8147cc02b8fb0c9d3ff098218a686b0dd94b1e35d3c3968ad8c90610763908390612079565b60405180910390a150565b6107766113dc565b6001600160a01b0316336001600160a01b031614806107a4575060055461010090046001600160a01b031633145b806107b957506006546001600160a01b031633145b6107d55760405162461bcd60e51b81526004016102259061215e565b600060045411806107f05750600b546001600160a01b031615155b61083c5760405162461bcd60e51b815260206004820152601a60248201527f5043563a20646562742068617320616c726561647920706169640000000000006044820152606401610225565b6001546040516370a0823160e01b81526001600160a01b03909116906370a082319061086c903090600401612079565b602060405180830381865afa158015610889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ad91906121ae565b8111156108cc5760405162461bcd60e51b8152600401610225906121c7565b6004546000036108ea57600b805460ff60a01b1916601960a21b1790555b600b5460009060649061090790600160a01b900460ff168461220d565b6109119190612224565b9050600061091f8284612246565b905060045481111561094a576004546109389082612246565b6109429083612259565b915060045490505b806004600082825461095c9190612246565b9091555050600b546001600160a01b0316158015906109865750600b54600160a01b900460ff1615155b15610a2057600154600b5460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb926109c192911690869060040161226c565b6020604051808303816000875af11580156109e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a049190612285565b610a205760405162461bcd60e51b8152600401610225906122a7565b600354604051632ba7511760e21b8152600481018390526001600160a01b039091169063ae9d445c90602401600060405180830381600087803b158015610a6657600080fd5b505af1158015610a7a573d6000803e3d6000fd5b505050507f3707046ba5d439e45ec51fb4596b88edce7802ede659f36e89931cd34c1cc05681604051610aaf91815260200190565b60405180910390a1600b546040517fdb7984dcab3b8cbd65e301ae592b73ad576c3607e1c32f65a93dbaf5d34b786091610af6916001600160a01b0390911690859061226c565b60405180910390a1505050565b610b0b611bed565b600a54600003610b2d5760405162461bcd60e51b8152600401610225906122d9565b6000600a55600880546001600160a01b0319908116909155600980549091169055565b60055460ff168015610b625750600454155b610b7e5760405162461bcd60e51b81526004016102259061230c565b610b866113dc565b6001600160a01b0316336001600160a01b03161480610bb4575060055461010090046001600160a01b031633145b80610bc957506006546001600160a01b031633145b610be55760405162461bcd60e51b81526004016102259061215e565b6001600160a01b038216600090815260076020526040902054829060ff16610c1f5760405162461bcd60e51b81526004016102259061233c565b600254610c36906001600160a01b03168484611c1f565b7f92682d28e4c16f4a2ddb833ecdd2bab2f2da69e2f325cda58d421e7d634b8e278383604051610af692919061226c565b610c6f611bed565b6001546001600160a01b031615610cc45760405162461bcd60e51b81526020600482015260196024820152781410d58e8818dbdb9d1858dd1cc8185b1c9958591e481cd95d603a1b6044820152606401610225565b610ccd83611cdf565b610cd682611cdf565b6001600160a01b03811615610cee57610cee81611cdf565b600180546001600160a01b038086166001600160a01b0319928316179092556002805484841690831617905560038054928516929091168217905560408051638da5cb5b60e01b8152905160009291638da5cb5b9160048083019260209291908290030181865afa158015610d67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8b919061237f565b6001600160a01b0316141580610e165750600354604080516348d399e760e01b815290516001600160a01b038085169316916348d399e79160048083019260209291908290030181865afa158015610de7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0b919061237f565b6001600160a01b0316145b610e995760405162461bcd60e51b815260206004820152604860248201527f5468652073616d6520636f6c6c61746572616c2061646472657373206d75737460448201527f206265207573656420666f722074686520656e7469726520736574206f6620636064820152676f6e74726163747360c01b608482015260a401610225565b7f1d45a7bae601fb3bdd4955d0de1d3a7f87c82d5e0109f47435776fa0ed5c530383604051610ec89190612079565b60405180910390a17f5962f8af633c4df1ab230096f773a514ee5adf7785c621ecdcdb764cb7f6e39182604051610eff9190612079565b60405180910390a17f355910d9025fedfb0c92482ab13962c2817c933700f665b15343c394533e4fc881604051610af69190612079565b610f3e6113dc565b6001600160a01b0316336001600160a01b03161480610f6c575060055461010090046001600160a01b031633145b80610f8157506006546001600160a01b031633145b610f9d5760405162461bcd60e51b81526004016102259061215e565b6000600454116110085760405162461bcd60e51b815260206004820152603060248201527f5043563a204d7573742068617665206465627420696e206f7264657220746f2060448201526f39b2ba1030903332b29039b83634ba1760811b6064820152608401610225565b603260ff8216111561107a5760405162461bcd60e51b815260206004820152603560248201527f5043563a204665652073706c6974206d757374206265206174206d6f7374203560448201527418103bb434b632903232b13a103932b6b0b4b7399760591b6064820152608401610225565b600b805460ff909216600160a01b0260ff60a01b19909216919091179055565b6110a2611bed565b6001600160a01b03811660009081526007602052604090205460ff166111155760405162461bcd60e51b815260206004820152602260248201527f5043563a20526563697069656e74206973206e6f7420696e2077686974656c696044820152611cdd60f21b6064820152608401610225565b6001600160a01b03811660009081526007602052604090819020805460ff19169055517f8176fc5412eb5076fee7f1a264915b808c24d495c2698c189030e5200e707d2590610763908390612079565b61116d611bed565b6111776000611d88565b565b6111816113dc565b6001600160a01b0316336001600160a01b031614806111af575060055461010090046001600160a01b031633145b806111c457506006546001600160a01b031633145b6111e05760405162461bcd60e51b81526004016102259061215e565b60055460ff161561122e5760405162461bcd60e51b81526020600482015260186024820152771410d58e88185b1c9958591e481a5b9a5d1a585b1a5e995960421b6044820152606401610225565b6a52b7d2dcc80cd2e400000060048181556005805460ff1916600117905560035460405163b064b0b760e01b81526001600160a01b039091169263b064b0b79261127c920190815260200190565b600060405180830381600087803b15801561129657600080fd5b505af11580156112aa573d6000803e3d6000fd5b505050506111776a52b7d2dcc80cd2e40000006113eb565b6112ca611bed565b6005546001600160a01b03838116610100909204161415806112fa57506006546001600160a01b03828116911614155b6113465760405162461bcd60e51b815260206004820152601c60248201527f5043563a20746865736520726f6c657320616c726561647920736574000000006044820152606401610225565b42600a5560055461010090046001600160a01b031615801561137157506006546001600160a01b0316155b156113ae577f0000000000000000000000000000000000000000000000000000000000000000600a60008282546113a89190612246565b90915550505b600880546001600160a01b039384166001600160a01b03199182161790915560098054929093169116179055565b6000546001600160a01b031690565b6113f36113dc565b6001600160a01b0316336001600160a01b03161480611421575060055461010090046001600160a01b031633145b8061143657506006546001600160a01b031633145b6114525760405162461bcd60e51b81526004016102259061215e565b6001546040516370a0823160e01b81526001600160a01b03909116906370a0823190611482903090600401612079565b602060405180830381865afa15801561149f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c391906121ae565b8111156114e25760405162461bcd60e51b8152600401610225906121c7565b600154600354604080516305b1155960e11b815290516001600160a01b039384169363095ea7b3931691630b622ab29160048083019260209291908290030181865afa158015611536573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155a919061237f565b836040518363ffffffff1660e01b815260040161157892919061226c565b6020604051808303816000875af1158015611597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bb9190612285565b6115fe5760405162461bcd60e51b81526020600482015260146024820152731410d58e88105c1c1c9bdd985b0819985a5b195960621b6044820152606401610225565b600360009054906101000a90046001600160a01b03166001600160a01b0316630b622ab26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611651573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611675919061237f565b6001600160a01b03166378c77a24826040518263ffffffff1660e01b81526004016116a291815260200190565b600060405180830381600087803b1580156116bc57600080fd5b505af11580156116d0573d6000803e3d6000fd5b5050505050565b60055460ff1680156116e95750600454155b6117055760405162461bcd60e51b81526004016102259061230c565b61170d6113dc565b6001600160a01b0316336001600160a01b0316148061173b575060055461010090046001600160a01b031633145b8061175057506006546001600160a01b031633145b61176c5760405162461bcd60e51b81526004016102259061215e565b6001600160a01b038216600090815260076020526040902054829060ff166117a65760405162461bcd60e51b81526004016102259061233c565b6001546040516370a0823160e01b81526001600160a01b03909116906370a08231906117d6903090600401612079565b602060405180830381865afa1580156117f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181791906121ae565b8211156118365760405162461bcd60e51b8152600401610225906121c7565b60015460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90611868908690869060040161226c565b6020604051808303816000875af1158015611887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ab9190612285565b6118c75760405162461bcd60e51b8152600401610225906122a7565b7f224dc11ebff077175e89868ae3e43dbfb345b0fec71aaadf10ccd9de4f60b68f8383604051610af692919061226c565b611900611bed565b8061191d5760405162461bcd60e51b81526004016102259061239c565b60005b8181101561195a5761195283838381811061193d5761193d6123e3565b90506020020160208101906103e49190611fcc565b600101611920565b505050565b611967611bed565b6000600a54116119895760405162461bcd60e51b8152600401610225906122d9565b7f0000000000000000000000000000000000000000000000000000000000000000600a546119b79190612259565b421015611a145760405162461bcd60e51b815260206004820152602560248201527f5043563a20476f7665726e616e63652064656c617920686173206e6f7420656c604482015264185c1cd95960da1b6064820152608401610225565b60085460058054610100600160a81b0319166101006001600160a01b0393841681029190911791829055600954600680549185166001600160a01b0319909216821790556040805192909304909316815260208101929092527f59c75b5339bba5e93a172203f9379bc69e8a051519504a7e71c467e818a41ced910160405180910390a16000600a55600880546001600160a01b0319908116909155600980549091169055565b611ac36113dc565b6001600160a01b0316336001600160a01b03161480611af1575060055461010090046001600160a01b031633145b80611b0657506006546001600160a01b031633145b611b225760405162461bcd60e51b81526004016102259061215e565b6001600160a01b03811615611b4d57600b80546001600160a01b0319166001600160a01b0383161790555b50565b611b58611bed565b80611b755760405162461bcd60e51b81526004016102259061239c565b60005b8181101561195a57611baa838383818110611b9557611b956123e3565b90506020020160208101906102509190611fcc565b600101611b78565b611bba611bed565b6001600160a01b038116611be4576000604051631e4fbdf760e01b81526004016102259190612079565b611b4d81611d88565b33611bf66113dc565b6001600160a01b031614611177573360405163118cdaa760e01b81526004016102259190612079565b6001600160a01b038316611ccb576000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611c7a576040519150601f19603f3d011682016040523d82523d6000602084013e611c7f565b606091505b5050905080611cc55760405162461bcd60e51b815260206004820152601260248201527114d95b991a5b99c8109510c819985a5b195960721b6044820152606401610225565b50505050565b61195a6001600160a01b0384168383611dd8565b6001600160a01b038116611d355760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f206164647265737300006044820152606401610225565b803b80611d845760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f6044820152606401610225565b5050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61195a83846001600160a01b031663a9059cbb8585604051602401611dfe92919061226c565b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506000611e406001600160a01b03841683611e85565b90508051600014158015611e65575080806020019051810190611e639190612285565b155b1561195a5782604051635274afe760e01b81526004016102259190612079565b6060611e9383836000611e9c565b90505b92915050565b606081471015611ec1573060405163cd78605960e01b81526004016102259190612079565b600080856001600160a01b03168486604051611edd91906123f9565b60006040518083038185875af1925050503d8060008114611f1a576040519150601f19603f3d011682016040523d82523d6000602084013e611f1f565b606091505b5091509150611f2f868383611f3b565b925050505b9392505050565b606082611f5057611f4b82611f8e565b611f34565b8151158015611f6757506001600160a01b0384163b155b15611f875783604051639996b31560e01b81526004016102259190612079565b5080611f34565b805115611f9e5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6001600160a01b0381168114611b4d57600080fd5b600060208284031215611fde57600080fd5b8135611f3481611fb7565b600060208284031215611ffb57600080fd5b5035919050565b6000806040838503121561201557600080fd5b823561202081611fb7565b946020939093013593505050565b60008060006060848603121561204357600080fd5b833561204e81611fb7565b9250602084013561205e81611fb7565b9150604084013561206e81611fb7565b809150509250925092565b6001600160a01b0391909116815260200190565b60006020828403121561209f57600080fd5b813560ff81168114611f3457600080fd5b600080604083850312156120c357600080fd5b82356120ce81611fb7565b915060208301356120de81611fb7565b809150509250929050565b600080602083850312156120fc57600080fd5b823567ffffffffffffffff8082111561211457600080fd5b818501915085601f83011261212857600080fd5b81358181111561213757600080fd5b8660208260051b850101111561214c57600080fd5b60209290920196919550909350505050565b60208082526030908201527f5043563a2063616c6c6572206d757374206265206f776e6572206f7220636f7560408201526f6e63696c206f7220747265617375727960801b606082015260800190565b6000602082840312156121c057600080fd5b5051919050565b6020808252601690820152755043563a206e6f7420656e6f75676820746f6b656e7360501b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417611e9657611e966121f7565b60008261224157634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115611e9657611e966121f7565b80820180821115611e9657611e966121f7565b6001600160a01b03929092168252602082015260400190565b60006020828403121561229757600080fd5b81518015158114611f3457600080fd5b6020808252601890820152771410d58e881cd95b991a5b99c81b5554d10819985a5b195960421b604082015260600190565b6020808252601990820152781410d58e8810da185b99d9481b9bdd081a5b9a5d1a585d1959603a1b604082015260600190565b6020808252601690820152751410d58e881919589d081b5d5cdd081899481c185a5960521b604082015260600190565b60208082526023908201527f5043563a20726563697069656e74206d75737420626520696e2077686974656c6040820152621a5cdd60ea1b606082015260800190565b60006020828403121561239157600080fd5b8151611f3481611fb7565b60208082526027908201527f5043563a20526563697069656e7473206172726179206d757374206e6f7420626040820152666520656d70747960c81b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000825160005b8181101561241a5760208186018101518583015201612400565b50600092019182525091905056fea26469706673582212207bfcd47d0504f5913e29d282645a2aa2cfe4c52e631504ec2d9cb4b915459ba064736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/PCV.sol:PCV",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9027,
        "contract": "contracts/PCV.sol:PCV",
        "label": "musd",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IMUSD)29929"
      },
      {
        "astId": 9030,
        "contract": "contracts/PCV.sol:PCV",
        "label": "collateralERC20",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)902"
      },
      {
        "astId": 9033,
        "contract": "contracts/PCV.sol:PCV",
        "label": "borrowerOperations",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(BorrowerOperations)7295"
      },
      {
        "astId": 9035,
        "contract": "contracts/PCV.sol:PCV",
        "label": "debtToPay",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 9037,
        "contract": "contracts/PCV.sol:PCV",
        "label": "isInitialized",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 9039,
        "contract": "contracts/PCV.sol:PCV",
        "label": "council",
        "offset": 1,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 9041,
        "contract": "contracts/PCV.sol:PCV",
        "label": "treasury",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 9045,
        "contract": "contracts/PCV.sol:PCV",
        "label": "recipientsWhitelist",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9047,
        "contract": "contracts/PCV.sol:PCV",
        "label": "pendingCouncilAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 9049,
        "contract": "contracts/PCV.sol:PCV",
        "label": "pendingTreasuryAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 9051,
        "contract": "contracts/PCV.sol:PCV",
        "label": "changingRolesInitiated",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 9053,
        "contract": "contracts/PCV.sol:PCV",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 9055,
        "contract": "contracts/PCV.sol:PCV",
        "label": "feeSplitPercentage",
        "offset": 20,
        "slot": "11",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(BorrowerOperations)7295": {
        "encoding": "inplace",
        "label": "contract BorrowerOperations",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)902": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMUSD)29929": {
        "encoding": "inplace",
        "label": "contract IMUSD",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}