{
  "address": "0x6C0b679a4daD22ecbfdAB168ABF23D8FAFc70139",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newActivePoolAddress",
          "type": "address"
        }
      ],
      "name": "ActivePoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newBorrowerOperationsAddress",
          "type": "address"
        }
      ],
      "name": "BorrowerOperationsAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newCollateralAddress",
          "type": "address"
        }
      ],
      "name": "CollateralAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_collateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_MUSDLoss",
          "type": "uint256"
        }
      ],
      "name": "CollateralGainWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "CollateralSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newDefaultPoolAddress",
          "type": "address"
        }
      ],
      "name": "DefaultPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_P",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_S",
          "type": "uint256"
        }
      ],
      "name": "DepositSnapshotUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_currentEpoch",
          "type": "uint128"
        }
      ],
      "name": "EpochUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newMUSDTokenAddress",
          "type": "address"
        }
      ],
      "name": "MUSDTokenAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_P",
          "type": "uint256"
        }
      ],
      "name": "PUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newPriceFeedAddress",
          "type": "address"
        }
      ],
      "name": "PriceFeedAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_S",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_epoch",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_scale",
          "type": "uint128"
        }
      ],
      "name": "SUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_currentScale",
          "type": "uint128"
        }
      ],
      "name": "ScaleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newSortedTrovesAddress",
          "type": "address"
        }
      ],
      "name": "SortedTrovesAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newBalance",
          "type": "uint256"
        }
      ],
      "name": "StabilityPoolCollateralBalanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newBalance",
          "type": "uint256"
        }
      ],
      "name": "StabilityPoolMUSDBalanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newTroveManagerAddress",
          "type": "address"
        }
      ],
      "name": "TroveManagerAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newDeposit",
          "type": "uint256"
        }
      ],
      "name": "UserDepositChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BORROWING_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DECIMAL_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_NET_DEBT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MUSD_GAS_COMPENSATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "P",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SCALE_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_100pct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activePool",
      "outputs": [
        {
          "internalType": "contract IActivePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperations",
      "outputs": [
        {
          "internalType": "contract IBorrowerOperations",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentEpoch",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentScale",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultPool",
      "outputs": [
        {
          "internalType": "contract IDefaultPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositSnapshots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "S",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "P",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "scale",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "epoch",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "name": "epochToScaleToSum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "getCompoundedMUSDDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "getDepositorCollateralGain",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntireSystemColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemColl",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntireSystemDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalMUSDDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastCollateralError_Offset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastMUSDLossError_Offset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "musd",
      "outputs": [
        {
          "internalType": "contract IMUSD",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtToOffset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collToAdd",
          "type": "uint256"
        }
      ],
      "name": "offset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "provideToSP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrowerOperationsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_troveManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_activePoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_musdTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sortedTrovesAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralAddress",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTroves",
      "outputs": [
        {
          "internalType": "contract ISortedTroves",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "troveManager",
      "outputs": [
        {
          "internalType": "contract ITroveManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "withdrawCollateralGainToTrove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromSP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xdce014590220a6e1c05fee1be3710676481db073a42c1417adf04db39cfa7943",
  "receipt": {
    "to": null,
    "from": "0x6e80164ea60673D64d5d6228beb684a1274Bb017",
    "contractAddress": "0x6C0b679a4daD22ecbfdAB168ABF23D8FAFc70139",
    "transactionIndex": 1,
    "gasUsed": "2464495",
    "logsBloom": "0x
    "blockHash": "0x55a368ce239ab20e63975108b1203520c8a10be34ac3ff29fd0f49a0878f7ac0",
    "transactionHash": "0xdce014590220a6e1c05fee1be3710676481db073a42c1417adf04db39cfa7943",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 1149398,
        "transactionHash": "0xdce014590220a6e1c05fee1be3710676481db073a42c1417adf04db39cfa7943",
        "address": "0x6C0b679a4daD22ecbfdAB168ABF23D8FAFc70139",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006e80164ea60673d64d5d6228beb684a1274bb017"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x55a368ce239ab20e63975108b1203520c8a10be34ac3ff29fd0f49a0878f7ac0"
      }
    ],
    "blockNumber": 1149398,
    "cumulativeGasUsed": "2669036",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6fc273ee6319c06d6c37be33f008e4d1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newActivePoolAddress\",\"type\":\"address\"}],\"name\":\"ActivePoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newBorrowerOperationsAddress\",\"type\":\"address\"}],\"name\":\"BorrowerOperationsAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newCollateralAddress\",\"type\":\"address\"}],\"name\":\"CollateralAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_MUSDLoss\",\"type\":\"uint256\"}],\"name\":\"CollateralGainWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CollateralSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newDefaultPoolAddress\",\"type\":\"address\"}],\"name\":\"DefaultPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_P\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_S\",\"type\":\"uint256\"}],\"name\":\"DepositSnapshotUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_currentEpoch\",\"type\":\"uint128\"}],\"name\":\"EpochUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newMUSDTokenAddress\",\"type\":\"address\"}],\"name\":\"MUSDTokenAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_P\",\"type\":\"uint256\"}],\"name\":\"PUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newPriceFeedAddress\",\"type\":\"address\"}],\"name\":\"PriceFeedAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_S\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_epoch\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_scale\",\"type\":\"uint128\"}],\"name\":\"SUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_currentScale\",\"type\":\"uint128\"}],\"name\":\"ScaleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newSortedTrovesAddress\",\"type\":\"address\"}],\"name\":\"SortedTrovesAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBalance\",\"type\":\"uint256\"}],\"name\":\"StabilityPoolCollateralBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBalance\",\"type\":\"uint256\"}],\"name\":\"StabilityPoolMUSDBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newTroveManagerAddress\",\"type\":\"address\"}],\"name\":\"TroveManagerAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newDeposit\",\"type\":\"uint256\"}],\"name\":\"UserDepositChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BORROWING_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_NET_DEBT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MUSD_GAS_COMPENSATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"P\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_100pct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePool\",\"outputs\":[{\"internalType\":\"contract IActivePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperations\",\"outputs\":[{\"internalType\":\"contract IBorrowerOperations\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentScale\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPool\",\"outputs\":[{\"internalType\":\"contract IDefaultPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositSnapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"S\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"P\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"scale\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"epoch\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"epochToScaleToSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"getCompoundedMUSDDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"getDepositorCollateralGain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemColl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalMUSDDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCollateralError_Offset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastMUSDLossError_Offset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"musd\",\"outputs\":[{\"internalType\":\"contract IMUSD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtToOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collToAdd\",\"type\":\"uint256\"}],\"name\":\"offset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"provideToSP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_musdTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTroves\",\"outputs\":[{\"internalType\":\"contract ISortedTroves\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveManager\",\"outputs\":[{\"internalType\":\"contract ITroveManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"withdrawCollateralGainToTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromSP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StabilityPool.sol\":\"StabilityPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/StabilityPool.sol\":{\"content\":\"// slither-disable-start reentrancy-benign\\n// slither-disable-start reentrancy-events\\n// slither-disable-start reentrancy-no-eth\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./dependencies/CheckContract.sol\\\";\\nimport \\\"./dependencies/LiquityBase.sol\\\";\\nimport \\\"./dependencies/SendCollateral.sol\\\";\\nimport \\\"./interfaces/IBorrowerOperations.sol\\\";\\nimport \\\"./token/IMUSD.sol\\\";\\nimport \\\"./interfaces/ISortedTroves.sol\\\";\\nimport \\\"./interfaces/IStabilityPool.sol\\\";\\nimport \\\"./interfaces/ITroveManager.sol\\\";\\n\\ncontract StabilityPool is\\n    LiquityBase,\\n    Ownable,\\n    CheckContract,\\n    SendCollateral,\\n    IStabilityPool\\n{\\n    // --- Type Declarations ---\\n    struct Snapshots {\\n        uint256 S;\\n        uint256 P;\\n        uint128 scale;\\n        uint128 epoch;\\n    }\\n\\n    // The Product 'P' is an ever-decreasing number, though it never reaches 0. In order to handle it\\n    // becoming smaller and smaller without losing precision, whenever it becomes too small (< 1e9),\\n    // we multiply it by SCALE_FACTOR and record how many times we've done this in `currentScale`.\\n    uint256 public constant SCALE_FACTOR = 1e9;\\n\\n    // --- State ---\\n\\n    address public collateralAddress;\\n    IBorrowerOperations public borrowerOperations;\\n    ITroveManager public troveManager;\\n    IMUSD public musd;\\n    // Needed to check if there are pending liquidations\\n    ISortedTroves public sortedTroves;\\n    // Tracker for mUSD held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\n    uint256 internal totalMUSDDeposits;\\n    uint256 internal collateral; // deposited collateral tracker\\n    mapping(address => uint256) public deposits; // depositor address -> initial value\\n    mapping(address => Snapshots) public depositSnapshots; // depositor address -> snapshots struct\\n\\n    /*  Product 'P': Running product by which to multiply an initial deposit, in order to find the current compounded deposit,\\n     * after a series of liquidations have occurred, each of which cancel some mUSD debt with the deposit.\\n     *\\n     * During its lifetime, a deposit's value evolves from d_t to d_t * P / P_t , where P_t\\n     * is the snapshot of P taken at the instant the deposit was made. 18-digit decimal.\\n     */\\n    uint256 public P = DECIMAL_PRECISION;\\n\\n    // Each time the scale of P shifts by SCALE_FACTOR, the scale is incremented by 1\\n    uint128 public currentScale;\\n\\n    // With each offset that fully empties the Pool, the epoch is incremented by 1\\n    uint128 public currentEpoch;\\n\\n    /* collateral Gain sum 'S': During its lifetime, each deposit d_t earns an collateral gain of ( d_t * [S - S_t] )/P_t, where S_t\\n     * is the depositor's snapshot of S taken at the time t when the deposit was made.\\n     *\\n     * The 'S' sums are stored in a nested mapping (epoch => scale => sum):\\n     *\\n     * - The inner mapping records the sum S at different scales\\n     * - The outer mapping records the (scale => sum) mappings, for different epochs.\\n     */\\n    mapping(uint128 => mapping(uint128 => uint)) public epochToScaleToSum;\\n\\n    // Error trackers for the error correction in the offset calculation\\n    uint256 public lastCollateralError_Offset;\\n    uint256 public lastMUSDLossError_Offset;\\n\\n    // --- Functions --\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    // solhint-disable no-complex-fallback\\n    receive() external payable {\\n        _requireCallerIsActivePool();\\n        collateral += msg.value;\\n        emit StabilityPoolCollateralBalanceUpdated(collateral);\\n    }\\n\\n    // --- External ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _musdTokenAddress,\\n        address _sortedTrovesAddress,\\n        address _priceFeedAddress,\\n        address _collateralAddress\\n    ) external override onlyOwner {\\n        checkContract(_borrowerOperationsAddress);\\n        checkContract(_troveManagerAddress);\\n        checkContract(_activePoolAddress);\\n        checkContract(_musdTokenAddress);\\n        checkContract(_sortedTrovesAddress);\\n        checkContract(_priceFeedAddress);\\n        if (_collateralAddress != address(0)) {\\n            checkContract(_collateralAddress);\\n        }\\n\\n        borrowerOperations = IBorrowerOperations(_borrowerOperationsAddress);\\n        troveManager = ITroveManager(_troveManagerAddress);\\n        activePool = IActivePool(_activePoolAddress);\\n        musd = IMUSD(_musdTokenAddress);\\n        sortedTroves = ISortedTroves(_sortedTrovesAddress);\\n        priceFeed = IPriceFeed(_priceFeedAddress);\\n        collateralAddress = _collateralAddress;\\n\\n        require(\\n            (Ownable(_borrowerOperationsAddress).owner() != address(0) ||\\n                borrowerOperations.collateralAddress() == _collateralAddress) &&\\n                (Ownable(_activePoolAddress).owner() != address(0) ||\\n                    activePool.collateralAddress() == _collateralAddress),\\n            \\\"The same collateral address must be used for the entire set of contracts\\\"\\n        );\\n\\n        emit BorrowerOperationsAddressChanged(_borrowerOperationsAddress);\\n        emit TroveManagerAddressChanged(_troveManagerAddress);\\n        emit ActivePoolAddressChanged(_activePoolAddress);\\n        emit MUSDTokenAddressChanged(_musdTokenAddress);\\n        emit SortedTrovesAddressChanged(_sortedTrovesAddress);\\n        emit PriceFeedAddressChanged(_priceFeedAddress);\\n        emit CollateralAddressChanged(_collateralAddress);\\n\\n        renounceOwnership();\\n    }\\n\\n    /*  provideToSP():\\n     *\\n     * - Sends depositor's accumulated gains (collateral) to depositor\\n     */\\n    function provideToSP(uint256 _amount) external override {\\n        _requireNonZeroAmount(_amount);\\n\\n        uint256 initialDeposit = deposits[msg.sender];\\n\\n        uint256 depositorCollateralGain = getDepositorCollateralGain(\\n            msg.sender\\n        );\\n        uint256 compoundedMUSDDeposit = getCompoundedMUSDDeposit(msg.sender);\\n        uint256 mUSDLoss = initialDeposit - compoundedMUSDDeposit; // Needed only for event log\\n\\n        uint256 newDeposit = compoundedMUSDDeposit + _amount;\\n\\n        _updateDepositAndSnapshots(msg.sender, newDeposit);\\n        emit UserDepositChanged(msg.sender, newDeposit);\\n\\n        emit CollateralGainWithdrawn(\\n            msg.sender,\\n            depositorCollateralGain,\\n            mUSDLoss\\n        ); // mUSD Loss required for event log\\n\\n        _sendMUSDtoStabilityPool(msg.sender, _amount);\\n\\n        _sendCollateralGainToDepositor(depositorCollateralGain);\\n    }\\n\\n    /*  withdrawFromSP():\\n     *\\n     * - Sends all depositor's accumulated gains (collateral) to depositor\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(uint256 _amount) external override {\\n        if (_amount != 0) {\\n            _requireNoUnderCollateralizedTroves();\\n        }\\n        uint256 initialDeposit = deposits[msg.sender];\\n        _requireUserHasDeposit(initialDeposit);\\n\\n        uint256 depositorCollateralGain = getDepositorCollateralGain(\\n            msg.sender\\n        );\\n\\n        uint256 compoundedMUSDDeposit = getCompoundedMUSDDeposit(msg.sender);\\n        uint256 mUSDtoWithdraw = LiquityMath._min(\\n            _amount,\\n            compoundedMUSDDeposit\\n        );\\n        uint256 mUSDLoss = initialDeposit - compoundedMUSDDeposit; // Needed only for event log\\n\\n        _sendMUSDToDepositor(msg.sender, mUSDtoWithdraw);\\n\\n        // Update deposit\\n        uint256 newDeposit = compoundedMUSDDeposit - mUSDtoWithdraw;\\n        _updateDepositAndSnapshots(msg.sender, newDeposit);\\n        emit UserDepositChanged(msg.sender, newDeposit);\\n\\n        emit CollateralGainWithdrawn(\\n            msg.sender,\\n            depositorCollateralGain,\\n            mUSDLoss\\n        ); // mUSD Loss required for event log\\n\\n        _sendCollateralGainToDepositor(depositorCollateralGain);\\n    }\\n\\n    /* withdrawCollateralGainToTrove:\\n     * - Transfers the depositor's entire collateral gain from the Stability Pool to the caller's trove\\n     * - Leaves their compounded deposit in the Stability Pool\\n     * - Updates snapshots for deposit */\\n    function withdrawCollateralGainToTrove(\\n        address _upperHint,\\n        address _lowerHint\\n    ) external override {\\n        uint256 initialDeposit = deposits[msg.sender];\\n        _requireUserHasDeposit(initialDeposit);\\n        _requireUserHasTrove(msg.sender);\\n        _requireUserHasCollateralGain(msg.sender);\\n\\n        uint256 depositorCollateralGain = getDepositorCollateralGain(\\n            msg.sender\\n        );\\n\\n        uint256 compoundedMUSDDeposit = getCompoundedMUSDDeposit(msg.sender);\\n        uint256 mUSDLoss = initialDeposit - compoundedMUSDDeposit; // Needed only for event log\\n\\n        _updateDepositAndSnapshots(msg.sender, compoundedMUSDDeposit);\\n\\n        /* Emit events before transferring collateral gain to Trove.\\n              This lets the event log make more sense (i.e. so it appears that first the collateral gain is withdrawn\\n             and then it is deposited into the Trove, not the other way around). */\\n        emit CollateralGainWithdrawn(\\n            msg.sender,\\n            depositorCollateralGain,\\n            mUSDLoss\\n        );\\n        emit UserDepositChanged(msg.sender, compoundedMUSDDeposit);\\n\\n        collateral -= depositorCollateralGain;\\n        emit StabilityPoolCollateralBalanceUpdated(collateral);\\n        emit CollateralSent(msg.sender, depositorCollateralGain);\\n\\n        if (collateralAddress == address(0)) {\\n            borrowerOperations.moveCollateralGainToTrove{\\n                value: depositorCollateralGain\\n            }(msg.sender, 0, _upperHint, _lowerHint);\\n        } else {\\n            borrowerOperations.moveCollateralGainToTrove{value: 0}(\\n                msg.sender,\\n                depositorCollateralGain,\\n                _upperHint,\\n                _lowerHint\\n            );\\n        }\\n    }\\n\\n    /*\\n     * Cancels out the specified debt against the mUSD contained in the Stability Pool (as far as possible)\\n     * and transfers the Trove's collateral from ActivePool to StabilityPool.\\n     * Only called by liquidation functions in the TroveManager.\\n     */\\n    function offset(\\n        uint256 _debtToOffset,\\n        uint256 _collToAdd\\n    ) external override {\\n        _requireCallerIsTroveManager();\\n        uint256 totalMUSD = totalMUSDDeposits; // cached to save an SLOAD\\n        if (totalMUSD == 0 || _debtToOffset == 0) {\\n            return;\\n        }\\n\\n        (\\n            uint256 collateralGainPerUnitStaked,\\n            uint256 mUSDLossPerUnitStaked\\n        ) = _computeRewardsPerUnitStaked(_collToAdd, _debtToOffset, totalMUSD);\\n\\n        _updateRewardSumAndProduct(\\n            collateralGainPerUnitStaked,\\n            mUSDLossPerUnitStaked\\n        ); // updates S and P\\n\\n        _moveOffsetCollAndDebt(_collToAdd, _debtToOffset);\\n    }\\n\\n    // --- Getters for public variables. Required by IPool interface ---\\n\\n    function getCollateralBalance() external view override returns (uint) {\\n        return collateral;\\n    }\\n\\n    function getTotalMUSDDeposits() external view override returns (uint) {\\n        return totalMUSDDeposits;\\n    }\\n\\n    // -- Public ---\\n\\n    /* Calculates the collateral gain earned by the deposit since its last snapshots were taken.\\n     * Given by the formula:  E = d0 * (S - S(0))/P(0)\\n     * where S(0) and P(0) are the depositor's snapshots of the sum S and product P, respectively.\\n     * d0 is the last recorded deposit value.\\n     */\\n    function getDepositorCollateralGain(\\n        address _depositor\\n    ) public view override returns (uint) {\\n        uint256 initialDeposit = deposits[_depositor];\\n\\n        if (initialDeposit == 0) {\\n            return 0;\\n        }\\n\\n        Snapshots memory snapshots = depositSnapshots[_depositor];\\n\\n        uint256 collateralGain = _getCollateralGainFromSnapshots(\\n            initialDeposit,\\n            snapshots\\n        );\\n        return collateralGain;\\n    }\\n\\n    // --- Compounded deposit ---\\n\\n    /*\\n     * Return the user's compounded deposit. Given by the formula:  d = d0 * P/P(0)\\n     * where P(0) is the depositor's snapshot of the product P, taken when they last updated their deposit.\\n     */\\n    function getCompoundedMUSDDeposit(\\n        address _depositor\\n    ) public view override returns (uint) {\\n        uint256 initialDeposit = deposits[_depositor];\\n        if (initialDeposit == 0) {\\n            return 0;\\n        }\\n\\n        Snapshots memory snapshots = depositSnapshots[_depositor];\\n\\n        uint256 compoundedDeposit = _getCompoundedStakeFromSnapshots(\\n            initialDeposit,\\n            snapshots\\n        );\\n        return compoundedDeposit;\\n    }\\n\\n    // -- Internal ---\\n\\n    function _sendMUSDToDepositor(\\n        address _depositor,\\n        uint256 _withdrawal\\n    ) internal {\\n        if (_withdrawal == 0) {\\n            return;\\n        }\\n\\n        // slither-disable-next-line unchecked-transfer\\n        musd.transfer(_depositor, _withdrawal);\\n        _decreaseMUSD(_withdrawal);\\n    }\\n\\n    // Transfer the mUSD tokens from the user to the Stability Pool's address,\\n    // and update its recorded mUSD\\n    function _sendMUSDtoStabilityPool(\\n        address _address,\\n        uint256 _amount\\n    ) internal {\\n        uint256 newTotalMUSDDeposits = totalMUSDDeposits + _amount;\\n        totalMUSDDeposits = newTotalMUSDDeposits;\\n\\n        emit StabilityPoolMUSDBalanceUpdated(newTotalMUSDDeposits);\\n\\n        bool transferSuccess = musd.transferFrom(\\n            _address,\\n            address(this),\\n            _amount\\n        );\\n        require(transferSuccess, \\\"MUSD was not transferred successfully.\\\");\\n    }\\n\\n    function _updateDepositAndSnapshots(\\n        address _depositor,\\n        uint256 _newValue\\n    ) internal {\\n        deposits[_depositor] = _newValue;\\n\\n        if (_newValue == 0) {\\n            delete depositSnapshots[_depositor];\\n            emit DepositSnapshotUpdated(_depositor, 0, 0);\\n            return;\\n        }\\n        uint128 currentScaleCached = currentScale;\\n        uint128 currentEpochCached = currentEpoch;\\n        uint256 currentP = P;\\n\\n        // Get S and G for the current epoch and current scale\\n        uint256 currentS = epochToScaleToSum[currentEpochCached][\\n            currentScaleCached\\n        ];\\n\\n        // Record new snapshots of the latest running product P, sum S, and sum G, for the depositor\\n        depositSnapshots[_depositor].P = currentP;\\n        depositSnapshots[_depositor].S = currentS;\\n        depositSnapshots[_depositor].scale = currentScaleCached;\\n        depositSnapshots[_depositor].epoch = currentEpochCached;\\n\\n        emit DepositSnapshotUpdated(_depositor, currentP, currentS);\\n    }\\n\\n    function _sendCollateralGainToDepositor(uint256 _amount) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n        uint256 newCollateral = collateral - _amount;\\n        collateral = newCollateral;\\n        emit StabilityPoolCollateralBalanceUpdated(newCollateral);\\n        emit CollateralSent(msg.sender, _amount);\\n\\n        sendCollateral(IERC20(collateralAddress), msg.sender, _amount);\\n    }\\n\\n    function _computeRewardsPerUnitStaked(\\n        uint256 _collToAdd,\\n        uint256 _debtToOffset,\\n        uint256 _totalMUSDDeposits\\n    )\\n        internal\\n        returns (\\n            uint256 collateralGainPerUnitStaked,\\n            uint256 mUSDLossPerUnitStaked\\n        )\\n    {\\n        /*\\n         * Compute the mUSD and collateral rewards. Uses a \\\"feedback\\\" error correction, to keep\\n         * the cumulative error in the P and S state variables low:\\n         *\\n         * 1) Form numerators which compensate for the floor division errors that occurred the last time this\\n         * function was called.\\n         * 2) Calculate \\\"per-unit-staked\\\" ratios.\\n         * 3) Multiply each ratio back by its denominator, to reveal the current floor division error.\\n         * 4) Store these errors for use in the next correction when this function is called.\\n         * 5) Note: static analysis tools complain about this \\\"division before multiplication\\\", however, it is intended.\\n         */\\n        uint256 collateralNumerator = _collToAdd *\\n            DECIMAL_PRECISION +\\n            lastCollateralError_Offset;\\n\\n        assert(_debtToOffset <= _totalMUSDDeposits);\\n        if (_debtToOffset == _totalMUSDDeposits) {\\n            mUSDLossPerUnitStaked = DECIMAL_PRECISION; // When the Pool depletes to 0, so does each deposit\\n            lastMUSDLossError_Offset = 0;\\n        } else {\\n            uint256 mUSDLossNumerator = _debtToOffset *\\n                DECIMAL_PRECISION -\\n                lastMUSDLossError_Offset;\\n            /*\\n             * Add 1 to make error in quotient positive. We want \\\"slightly too much\\\" mUSD loss,\\n             * which ensures the error in any given compoundedMUSDDeposit favors the Stability Pool.\\n             */\\n            mUSDLossPerUnitStaked = mUSDLossNumerator / _totalMUSDDeposits + 1;\\n            lastMUSDLossError_Offset =\\n                mUSDLossPerUnitStaked *\\n                _totalMUSDDeposits -\\n                mUSDLossNumerator;\\n        }\\n\\n        collateralGainPerUnitStaked = collateralNumerator / _totalMUSDDeposits;\\n        // slither-disable-next-line divide-before-multiply\\n        lastCollateralError_Offset =\\n            collateralNumerator -\\n            (collateralGainPerUnitStaked * _totalMUSDDeposits);\\n\\n        return (collateralGainPerUnitStaked, mUSDLossPerUnitStaked);\\n    }\\n\\n    function _moveOffsetCollAndDebt(\\n        uint256 _collToAdd,\\n        uint256 _debtToOffset\\n    ) internal {\\n        IActivePool activePoolCached = activePool;\\n\\n        // Cancel the liquidated debt with the mUSD in the stability pool\\n        activePoolCached.decreaseDebt(_debtToOffset, 0);\\n        _decreaseMUSD(_debtToOffset);\\n\\n        // Burn the debt that was successfully offset\\n        musd.burn(address(this), _debtToOffset);\\n\\n        activePoolCached.sendCollateral(address(this), _collToAdd);\\n    }\\n\\n    function _decreaseMUSD(uint256 _amount) internal {\\n        uint256 newTotalMUSDDeposits = totalMUSDDeposits - _amount;\\n        totalMUSDDeposits = newTotalMUSDDeposits;\\n        emit StabilityPoolMUSDBalanceUpdated(newTotalMUSDDeposits);\\n    }\\n\\n    // Update the Stability Pool reward sum S and product P\\n\\n    // slither-disable-start dead-code\\n    function _updateRewardSumAndProduct(\\n        uint256 _collateralGainPerUnitStaked,\\n        uint256 _mUSDLossPerUnitStaked\\n    ) internal {\\n        uint256 currentP = P;\\n        uint256 newP;\\n\\n        assert(_mUSDLossPerUnitStaked <= DECIMAL_PRECISION);\\n        /*\\n         * The newProductFactor is the factor by which to change all deposits, due to the depletion of Stability Pool mUSD in the liquidation.\\n         * We make the product factor 0 if there was a pool-emptying. Otherwise, it is (1 - MUSDLossPerUnitStaked)\\n         */\\n        uint256 newProductFactor = DECIMAL_PRECISION - _mUSDLossPerUnitStaked;\\n\\n        uint128 currentScaleCached = currentScale;\\n        uint128 currentEpochCached = currentEpoch;\\n        uint256 currentS = epochToScaleToSum[currentEpochCached][\\n            currentScaleCached\\n        ];\\n\\n        /*\\n         * Calculate the new S first, before we update P.\\n         * The collateral gain for any given depositor from a liquidation depends on the value of their deposit\\n         * (and the value of totalDeposits) prior to the Stability being depleted by the debt in the liquidation.\\n         *\\n         * Since S corresponds to collateral gain, and P to deposit loss, we update S first.\\n         */\\n        uint256 marginalCollateralGain = _collateralGainPerUnitStaked *\\n            currentP;\\n        uint256 newS = currentS + marginalCollateralGain;\\n        epochToScaleToSum[currentEpochCached][currentScaleCached] = newS;\\n        emit SUpdated(newS, currentEpochCached, currentScaleCached);\\n\\n        // If the Stability Pool was emptied, increment the epoch, and reset the scale and product P\\n        if (newProductFactor == 0) {\\n            currentEpoch = currentEpochCached + 1;\\n            emit EpochUpdated(currentEpoch);\\n            currentScale = 0;\\n            emit ScaleUpdated(currentScale);\\n            newP = DECIMAL_PRECISION;\\n\\n            // If multiplying P by a non-zero product factor would reduce P below the scale boundary, increment the scale\\n        } else if (\\n            (currentP * newProductFactor) / DECIMAL_PRECISION < SCALE_FACTOR\\n        ) {\\n            newP =\\n                (currentP * newProductFactor * SCALE_FACTOR) /\\n                DECIMAL_PRECISION;\\n            currentScale = currentScaleCached + 1;\\n            emit ScaleUpdated(currentScale);\\n        } else {\\n            newP = (currentP * newProductFactor) / DECIMAL_PRECISION;\\n        }\\n\\n        assert(newP > 0);\\n        P = newP;\\n\\n        emit PUpdated(newP);\\n    }\\n\\n    function _requireNoUnderCollateralizedTroves() internal {\\n        uint256 price = priceFeed.fetchPrice();\\n        address lowestTrove = sortedTroves.getLast();\\n        uint256 ICR = troveManager.getCurrentICR(lowestTrove, price);\\n        require(\\n            ICR >= MCR,\\n            \\\"StabilityPool: Cannot withdraw while there are troves with ICR < MCR\\\"\\n        );\\n    }\\n\\n    // Used to calculcate compounded deposits.\\n    function _getCompoundedStakeFromSnapshots(\\n        uint256 initialStake,\\n        Snapshots memory snapshots\\n    ) internal view returns (uint) {\\n        uint256 snapshot_P = snapshots.P;\\n        uint128 scaleSnapshot = snapshots.scale;\\n        uint128 epochSnapshot = snapshots.epoch;\\n\\n        // If stake was made before a pool-emptying event, then it has been fully cancelled with debt -- so, return 0\\n        if (epochSnapshot < currentEpoch) {\\n            return 0;\\n        }\\n\\n        uint256 compoundedStake;\\n        uint128 scaleDiff = currentScale - scaleSnapshot;\\n\\n        /* Compute the compounded stake. If a scale change in P was made during the stake's lifetime,\\n         * account for it. If more than one scale change was made, then the stake has decreased by a factor of\\n         * at least 1e-9 -- so return 0.\\n         */\\n        if (scaleDiff == 0) {\\n            compoundedStake = (initialStake * P) / snapshot_P;\\n        } else if (scaleDiff == 1) {\\n            compoundedStake = (initialStake * P) / snapshot_P / SCALE_FACTOR;\\n        } else {\\n            // if scaleDiff >= 2\\n            compoundedStake = 0;\\n        }\\n\\n        /*\\n         * If compounded deposit is less than a billionth of the initial deposit, return 0.\\n         *\\n         * NOTE: originally, this line was in place to stop rounding errors making the deposit\\n         * too large. However, the error corrections should ensure the error in P \\\"favors the Pool\\\",\\n         * i.e. any given compounded deposit should be slightly less than its theoretical value.\\n         *\\n         * Thus it's unclear whether this line is still really needed.\\n         */\\n        if (compoundedStake < initialStake / 1e9) {\\n            return 0;\\n        }\\n\\n        return compoundedStake;\\n    }\\n\\n    function _getCollateralGainFromSnapshots(\\n        uint256 initialDeposit,\\n        Snapshots memory snapshots\\n    ) internal view returns (uint) {\\n        /*\\n         * Grab the sum 'S' from the epoch at which the stake was made. The collateral gain may span up to one scale change.\\n         * If it does, the second portion of the collateral gain is scaled by 1e9.\\n         * If the gain spans no scale change, the second portion will be 0.\\n         */\\n        uint128 epochSnapshot = snapshots.epoch;\\n        uint128 scaleSnapshot = snapshots.scale;\\n        uint256 S_Snapshot = snapshots.S;\\n        uint256 P_Snapshot = snapshots.P;\\n\\n        uint256 firstPortion = epochToScaleToSum[epochSnapshot][scaleSnapshot] -\\n            S_Snapshot;\\n        uint256 secondPortion = epochToScaleToSum[epochSnapshot][\\n            scaleSnapshot + 1\\n        ] / SCALE_FACTOR;\\n\\n        uint256 collateralGain = (initialDeposit *\\n            (firstPortion + secondPortion)) /\\n            P_Snapshot /\\n            DECIMAL_PRECISION;\\n\\n        return collateralGain;\\n    }\\n\\n    function _requireCallerIsActivePool() internal view {\\n        require(\\n            msg.sender == address(activePool),\\n            \\\"StabilityPool: Caller is not ActivePool\\\"\\n        );\\n    }\\n\\n    function _requireCallerIsTroveManager() internal view {\\n        require(\\n            msg.sender == address(troveManager),\\n            \\\"StabilityPool: Caller is not TroveManager\\\"\\n        );\\n    }\\n\\n    function _requireUserHasTrove(address _depositor) internal view {\\n        require(\\n            troveManager.getTroveStatus(_depositor) ==\\n                ITroveManager.Status.active,\\n            \\\"StabilityPool: caller must have an active trove to withdraw collateralGain to\\\"\\n        );\\n    }\\n\\n    function _requireUserHasCollateralGain(address _depositor) internal view {\\n        uint256 collateralGain = getDepositorCollateralGain(_depositor);\\n        require(\\n            collateralGain > 0,\\n            \\\"StabilityPool: caller must have non-zero collateral Gain\\\"\\n        );\\n    }\\n\\n    function _requireUserHasDeposit(uint256 _initialDeposit) internal pure {\\n        require(\\n            _initialDeposit > 0,\\n            \\\"StabilityPool: User must have a non-zero deposit\\\"\\n        );\\n    }\\n\\n    function _requireNonZeroAmount(uint256 _amount) internal pure {\\n        require(_amount > 0, \\\"StabilityPool: Amount must be non-zero\\\");\\n    }\\n}\\n\\n// slither-disable-end dead-code\\n// slither-disable-end reentrancy-benign\\n// slither-disable-end reentrancy-events\\n// slither-disable-end reentrancy-no-eth\\n\",\"keccak256\":\"0x1adc5194bc187791dd7aa29b19861eb3a971305c624d587ba8ac60dff1ce7d0b\",\"license\":\"MIT\"},\"contracts/dependencies/BaseMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract BaseMath {\\n    uint256 public constant DECIMAL_PRECISION = 1e18;\\n}\\n\",\"keccak256\":\"0x54fab55b6128e51d2ffa3d2b726ce6f08fe5447b41a4880d195bfc7fcd66429f\",\"license\":\"MIT\"},\"contracts/dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\ncontract CheckContract {\\n    /**\\n     * Check that the account is an already deployed non-destroyed contract.\\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n     */\\n    function checkContract(address _account) internal view {\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(_account)\\n        }\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xab260c88c1d2f0ffbbd5d43c4a1df5e48132678e67fc24b65fa2d823f97cbc32\",\"license\":\"MIT\"},\"contracts/dependencies/LiquityBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./BaseMath.sol\\\";\\nimport \\\"./LiquityMath.sol\\\";\\nimport \\\"../interfaces/IActivePool.sol\\\";\\nimport \\\"../interfaces/IDefaultPool.sol\\\";\\nimport \\\"../interfaces/IPriceFeed.sol\\\";\\nimport \\\"../interfaces/ILiquityBase.sol\\\";\\n\\n/*\\n * Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\n * common functions.\\n */\\nabstract contract LiquityBase is BaseMath, ILiquityBase {\\n    uint256 public constant _100pct = 1e18; // 1e18 == 100%\\n\\n    // Minimum collateral ratio for individual troves\\n    uint256 public constant MCR = 1.1e18; // 110%\\n\\n    // Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n    uint256 public constant CCR = 1.5e18; // 150%\\n\\n    // Amount of mUSD to be locked in gas pool on opening troves\\n    uint256 public constant MUSD_GAS_COMPENSATION = 200e18;\\n\\n    // Minimum amount of net mUSD debt a trove must have\\n    uint256 public constant MIN_NET_DEBT = 1800e18;\\n    // uint256 constant public MIN_NET_DEBT = 0;\\n\\n    uint256 public constant PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\n\\n    uint256 public constant BORROWING_FEE_FLOOR = ((DECIMAL_PRECISION * 5) /\\n        1000); // 0.5%\\n\\n    // slither-disable-next-line all\\n    IActivePool public activePool;\\n\\n    // slither-disable-next-line all\\n    IDefaultPool public defaultPool;\\n\\n    // slither-disable-next-line all\\n    IPriceFeed public override priceFeed;\\n\\n    // --- Gas compensation functions ---\\n\\n    function getEntireSystemColl()\\n        public\\n        view\\n        returns (uint256 entireSystemColl)\\n    {\\n        uint256 activeColl = activePool.getCollateralBalance();\\n        uint256 liquidatedColl = defaultPool.getCollateralBalance();\\n\\n        return activeColl + liquidatedColl;\\n    }\\n\\n    function getEntireSystemDebt()\\n        public\\n        view\\n        returns (uint256 entireSystemDebt)\\n    {\\n        uint256 activeDebt = activePool.getDebt();\\n        uint256 closedDebt = defaultPool.getDebt();\\n\\n        return activeDebt + closedDebt;\\n    }\\n\\n    function _getTCR(uint256 _price) internal view returns (uint256 TCR) {\\n        uint256 entireSystemColl = getEntireSystemColl();\\n        uint256 entireSystemDebt = getEntireSystemDebt();\\n\\n        TCR = LiquityMath._computeCR(\\n            entireSystemColl,\\n            entireSystemDebt,\\n            _price\\n        );\\n        return TCR;\\n    }\\n\\n    function _checkRecoveryMode(uint256 _price) internal view returns (bool) {\\n        uint256 TCR = _getTCR(_price);\\n        return TCR < CCR;\\n    }\\n\\n    function _requireUserAcceptsFee(\\n        uint256 _fee,\\n        uint256 _amount,\\n        uint256 _maxFeePercentage\\n    ) internal pure {\\n        uint256 feePercentage = (_fee * DECIMAL_PRECISION) / _amount;\\n        require(\\n            feePercentage <= _maxFeePercentage,\\n            \\\"Fee exceeded provided maximum\\\"\\n        );\\n    }\\n\\n    // Returns the composite debt (drawn debt + gas compensation) of a trove, for the purpose of ICR calculation\\n    function _getCompositeDebt(uint256 _debt) internal pure returns (uint) {\\n        return _debt + MUSD_GAS_COMPENSATION;\\n    }\\n\\n    function _getNetDebt(uint256 _debt) internal pure returns (uint) {\\n        return _debt - MUSD_GAS_COMPENSATION;\\n    }\\n\\n    // Return the amount of collateral to be drawn from a trove's collateral and sent as gas compensation.\\n    function _getCollGasCompensation(\\n        uint256 _entireColl\\n    ) internal pure returns (uint) {\\n        return _entireColl / PERCENT_DIVISOR;\\n    }\\n}\\n\",\"keccak256\":\"0xa9a78271bc378fe4b2d4a0cf412ca95dfebb9be10ea22411ac72901c93decf7e\",\"license\":\"MIT\"},\"contracts/dependencies/LiquityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nlibrary LiquityMath {\\n    uint256 internal constant DECIMAL_PRECISION = 1e18;\\n\\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\\n     *\\n     * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n     * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division.\\n     *\\n     * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 BTC,\\n     * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n     *\\n     */\\n    uint256 internal constant NICR_PRECISION = 1e20;\\n\\n    function _min(uint256 _a, uint256 _b) internal pure returns (uint) {\\n        return (_a < _b) ? _a : _b;\\n    }\\n\\n    /*\\n     * Multiply two decimal numbers and use normal rounding rules:\\n     * -round product up if 19'th mantissa digit >= 5\\n     * -round product down if 19'th mantissa digit < 5\\n     *\\n     * Used only inside the exponentiation, _decPow().\\n     */\\n    function decMul(\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256 decProd) {\\n        uint256 prod_xy = x * y;\\n\\n        decProd = (prod_xy + (DECIMAL_PRECISION / 2)) / DECIMAL_PRECISION;\\n    }\\n\\n    /*\\n     * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n     *\\n     * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n     *\\n     * Called by one function that represent time in units of minutes:\\n     * 1) TroveManager._calcDecayedBaseRate\\n     *\\n     * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n     * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n     *\\n     * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n     * negligibly different from just passing the cap, since:\\n     *\\n     * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n     * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n     */\\n    function _decPow(\\n        uint256 _base,\\n        uint256 _minutes\\n    ) internal pure returns (uint) {\\n        if (_minutes > 5.256e8) {\\n            _minutes = 5.256e8;\\n        } // cap to avoid overflow\\n\\n        if (_minutes == 0) {\\n            return DECIMAL_PRECISION;\\n        }\\n\\n        uint256 y = DECIMAL_PRECISION;\\n        uint256 x = _base;\\n        uint256 n = _minutes;\\n\\n        // Exponentiation-by-squaring\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                x = decMul(x, x);\\n                n = n / 2;\\n            } else {\\n                // if (n % 2 != 0)\\n                y = decMul(x, y);\\n                x = decMul(x, x);\\n                n = (n - 1) / 2;\\n            }\\n        }\\n\\n        return decMul(x, y);\\n    }\\n\\n    function _getAbsoluteDifference(\\n        uint256 _a,\\n        uint256 _b\\n    ) internal pure returns (uint) {\\n        return (_a >= _b) ? _a - _b : _b - _a;\\n    }\\n\\n    function _computeNominalCR(\\n        uint256 _coll,\\n        uint256 _debt\\n    ) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            return (_coll * NICR_PRECISION) / _debt;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else {\\n            // if (_debt == 0)\\n            return type(uint256).max;\\n        }\\n    }\\n\\n    function _computeCR(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint256 _price\\n    ) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            uint256 newCollRatio = (_coll * _price) / _debt;\\n\\n            return newCollRatio;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else {\\n            // if (_debt == 0)\\n            return type(uint256).max;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf0ce4e213ff9da167613bc96f87dab11816081a14f39284bc6bb3ad47a2f0bae\",\"license\":\"MIT\"},\"contracts/dependencies/SendCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract SendCollateral {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * Sends collateral to recipient\\n     */\\n    function sendCollateral(\\n        IERC20 _collateralERC20,\\n        address _recipient,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_collateralERC20) == address(0)) {\\n            // BTC\\n            // slither-disable-next-line low-level-calls\\n            (bool success, ) = _recipient.call{value: _amount}(\\\"\\\"); // re-entry is fine here\\n            require(success, \\\"Sending BTC failed\\\");\\n        } else {\\n            // ERC20\\n            _collateralERC20.safeTransfer(_recipient, _amount);\\n        }\\n    }\\n\\n    /**\\n     * Sends collateral to recipient\\n     */\\n    function sendCollateralFrom(\\n        IERC20 _collateralERC20,\\n        address _from,\\n        address _recipient,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_collateralERC20) == address(0)) {\\n            // BTC\\n            // slither-disable-next-line low-level-calls\\n            (bool success, ) = _recipient.call{value: _amount}(\\\"\\\"); // re-entry is fine here\\n            require(success, \\\"Sending BTC failed\\\");\\n        } else {\\n            // ERC20\\n            // slither-disable-next-line arbitrary-send-erc20\\n            _collateralERC20.safeTransferFrom(_from, _recipient, _amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9e921fc2b3babcb115a4e033f85b36f61b974e7a559f577a9fe8e1f9a354c4e0\",\"license\":\"MIT\"},\"contracts/interfaces/IActivePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IActivePool is IPool {\\n    // --- Events ---\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event CollSurplusPoolAddressChanged(address _newCollSurplusPoolAddress);\\n    event CollateralAddressChanged(address _newCollateralAddress);\\n    event InterestRateManagerAddressChanged(\\n        address _interestRateManagerAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n\\n    event ActivePoolDebtUpdated(uint256 _principal, uint256 _interest);\\n    event ActivePoolCollateralBalanceUpdated(uint256 _collateral);\\n\\n    // --- Functions ---\\n    function sendCollateral(address _account, uint256 _amount) external;\\n\\n    function collateralAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc3b69d722701967b3556cdd3e5d4f14b133411e320780b2501cf8549af6cd949\",\"license\":\"MIT\"},\"contracts/interfaces/IBorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\n// Common interface for the Trove Manager.\\ninterface IBorrowerOperations {\\n    // --- Events ---\\n\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event MUSDTokenAddressChanged(address _musdTokenAddress);\\n    event PCVAddressChanged(address _pcvAddress);\\n    event CollateralAddressChanged(address _newCollateralAddress);\\n\\n    event TroveCreated(address indexed _borrower, uint256 arrayIndex);\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint256 _principal,\\n        uint256 _interest,\\n        uint256 _coll,\\n        uint256 stake,\\n        uint8 operation\\n    );\\n    event BorrowingFeePaid(address indexed _borrower, uint256 _fee);\\n    event RefinancingFeePaid(address indexed _borrower, uint256 _fee);\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _activePoolAddress,\\n        address _collateralAddress,\\n        address _collSurplusPoolAddress,\\n        address _defaultPoolAddress,\\n        address _gasPoolAddress,\\n        address _interestRateManagerAddress,\\n        address _musdTokenAddress,\\n        address _pcvAddress,\\n        address _priceFeedAddress,\\n        address _stabilityPoolAddress,\\n        address _sortedTrovesAddress,\\n        address _troveManagerAddress\\n    ) external;\\n\\n    function setRefinancingFeePercentage(\\n        uint8 _refinanceFeePercentage\\n    ) external;\\n\\n    function openTrove(\\n        uint256 _maxFeePercentage,\\n        uint256 _debtAmount,\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    function addColl(\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    function moveCollateralGainToTrove(\\n        address _borrower,\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    function withdrawColl(\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function withdrawMUSD(\\n        uint256 _maxFeePercentage,\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function repayMUSD(\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function closeTrove() external;\\n\\n    function refinance(uint256 _maxFeePercentage) external;\\n\\n    function adjustTrove(\\n        uint256 _maxFeePercentage,\\n        uint256 _collWithdrawal,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease,\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    function claimCollateral() external;\\n\\n    function collateralAddress() external view returns (address);\\n\\n    function getCompositeDebt(uint256 _debt) external pure returns (uint);\\n}\\n\",\"keccak256\":\"0xd52b2e73557f53796cbb3081425e236ee015e4c8e868bdd8a51d7d4dc89aa19b\",\"license\":\"MIT\"},\"contracts/interfaces/IDefaultPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IDefaultPool is IPool {\\n    // --- Events ---\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event DefaultPoolDebtUpdated(uint256 _principal, uint256 _interest);\\n    event DefaultPoolCollateralBalanceUpdated(uint256 _collateral);\\n    event CollateralAddressChanged(address _newCollateralAddress);\\n\\n    // --- Functions ---\\n    function sendCollateralToActivePool(uint256 _amount) external;\\n\\n    function collateralAddress() external view returns (address);\\n\\n    function getLastInterestUpdatedTime() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x764439d379b9f63c8c326327a8287d3e071f3c37b8907034c36e236b7f739c6a\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquityBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./IPriceFeed.sol\\\";\\n\\ninterface ILiquityBase {\\n    function priceFeed() external view returns (IPriceFeed);\\n}\\n\",\"keccak256\":\"0x3487979ac84a3324c2e7e7d3a0a5e565a75afa0e464f74f338a9ea2ef212ce23\",\"license\":\"MIT\"},\"contracts/interfaces/IPCV.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/IMUSD.sol\\\";\\n\\ninterface IPCV {\\n    // --- Events --\\n    event MUSDTokenAddressSet(address _musdTokenAddress);\\n    event BorrowerOperationsAddressSet(address _borrowerOperationsAddress);\\n    event CollateralAddressSet(address _collateralAddress);\\n    event RolesSet(address _council, address _treasury);\\n    event MUSDWithdraw(address _recipient, uint256 _amount);\\n    event CollateralWithdraw(address _recipient, uint256 _collateralAmount);\\n    event PCVDebtPaid(uint256 _paidDebt);\\n    event RecipientAdded(address _recipient);\\n    event RecipientRemoved(address _recipient);\\n    event PCVFeePaid(address _recipient, uint256 _amount);\\n\\n    // --- Functions ---\\n\\n    function debtToPay() external returns (uint256);\\n\\n    function payDebt(uint256 _musdToBurn) external;\\n\\n    function setAddresses(\\n        address _musdTokenAddress,\\n        address _borrowerOperations,\\n        address _collateralERC20\\n    ) external;\\n\\n    function initialize() external;\\n\\n    function setFeeRecipient(address _feeRecipient) external;\\n\\n    function setFeeSplit(uint8 _feeSplitPercentage) external;\\n\\n    function withdrawMUSD(address _recipient, uint256 _musdAmount) external;\\n\\n    function withdrawCollateral(\\n        address _recipient,\\n        uint256 _collateralAmount\\n    ) external;\\n\\n    function addRecipientToWhitelist(address _recipient) external;\\n\\n    function addRecipientsToWhitelist(address[] calldata _recipients) external;\\n\\n    function removeRecipientFromWhitelist(address _recipient) external;\\n\\n    function removeRecipientsFromWhitelist(\\n        address[] calldata _recipients\\n    ) external;\\n\\n    function startChangingRoles(address _council, address _treasury) external;\\n\\n    function cancelChangingRoles() external;\\n\\n    function finalizeChangingRoles() external;\\n\\n    function collateralERC20() external view returns (IERC20);\\n\\n    function musd() external view returns (IMUSD);\\n\\n    function council() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf2e5f6afa185a4e8fd73539a29a3d266048ab17fa52e56c4b0bbde0cc88540d5\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\n// Common interface for the Pools.\\ninterface IPool {\\n    // --- Events ---\\n\\n    event CollateralBalanceUpdated(uint256 _newBalance);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event CollateralSent(address _to, uint256 _amount);\\n\\n    // --- Functions ---\\n\\n    function increaseDebt(uint256 _principal, uint256 _interest) external;\\n\\n    function decreaseDebt(uint256 _principal, uint256 _interest) external;\\n\\n    function getCollateralBalance() external view returns (uint);\\n\\n    function getDebt() external view returns (uint);\\n\\n    function getPrincipal() external view returns (uint);\\n\\n    function getInterest() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xfdb6fcad4c0965cf8617ce3db22d9db8661929ec8a1466672397f20fedb68550\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\ninterface IPriceFeed {\\n    // --- Events ---\\n    event LastGoodPriceUpdated(uint256 _lastGoodPrice);\\n\\n    event NewOracleRegistered(address _oracle);\\n\\n    // --- Function ---\\n    function fetchPrice() external returns (uint);\\n\\n    function setOracle(address _oracle) external;\\n}\\n\",\"keccak256\":\"0x2c0d4f671d023fd09105eaccdc68d34db8ec0aac71fdb15a23a279d1d56d9f28\",\"license\":\"MIT\"},\"contracts/interfaces/ISortedTroves.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\n// Common interface for the SortedTroves Doubly Linked List.\\ninterface ISortedTroves {\\n    // --- Events ---\\n\\n    event SortedTrovesAddressChanged(address _sortedDoublyLLAddress);\\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\n    event NodeAdded(address _id, uint256 _NICR);\\n    event NodeRemoved(address _id);\\n\\n    // --- Functions ---\\n\\n    function setParams(\\n        uint256 _size,\\n        address _TroveManagerAddress,\\n        address _borrowerOperationsAddress\\n    ) external;\\n\\n    function insert(\\n        address _id,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    function remove(address _id) external;\\n\\n    function reInsert(\\n        address _id,\\n        uint256 _newNICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    function contains(address _id) external view returns (bool);\\n\\n    function isFull() external view returns (bool);\\n\\n    function isEmpty() external view returns (bool);\\n\\n    function getSize() external view returns (uint256);\\n\\n    function getMaxSize() external view returns (uint256);\\n\\n    function getFirst() external view returns (address);\\n\\n    function getLast() external view returns (address);\\n\\n    function getNext(address _id) external view returns (address);\\n\\n    function getPrev(address _id) external view returns (address);\\n\\n    function validInsertPosition(\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (bool);\\n\\n    function findInsertPosition(\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (address, address);\\n}\\n\",\"keccak256\":\"0xfcc79b16288d5ba5b7001d5dfdac2ad415212d74dddd442d2af7b89f2fd1d5f9\",\"license\":\"MIT\"},\"contracts/interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\n/*\\n * The Stability Pool holds mUSD tokens deposited by Stability Pool depositors.\\n *\\n * When a trove is liquidated, then depending on system conditions, some of its debt gets offset with\\n * mUSD in the Stability Pool: that is, the offset debt evaporates, and an equal amount of mUSD tokens in the Stability Pool are burned.\\n *\\n * Thus, a liquidation causes each depositor to receive a mUSD loss in proportion to their deposit as a share of total deposits.\\n * They also receive an collateral gain, as the collateral of the liquidated trove is distributed among Stability depositors\\n * in the same proportion.\\n *\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\n * of the total mUSD in the Stability Pool, depletes 40% of each deposit.\\n *\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\n * multiplying it by some factor in range ]0,1[\\n *\\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / collateral gain derivations:\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\n *\\n */\\ninterface IStabilityPool {\\n    // --- Events ---\\n\\n    event StabilityPoolCollateralBalanceUpdated(uint256 _newBalance);\\n    event StabilityPoolMUSDBalanceUpdated(uint256 _newBalance);\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event MUSDTokenAddressChanged(address _newMUSDTokenAddress);\\n    event SortedTrovesAddressChanged(address _newSortedTrovesAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event CollateralAddressChanged(address _newCollateralAddress);\\n\\n    event PUpdated(uint256 _P);\\n    event SUpdated(uint256 _S, uint128 _epoch, uint128 _scale);\\n    event EpochUpdated(uint128 _currentEpoch);\\n    event ScaleUpdated(uint128 _currentScale);\\n\\n    event DepositSnapshotUpdated(\\n        address indexed _depositor,\\n        uint256 _P,\\n        uint256 _S\\n    );\\n    event UserDepositChanged(address indexed _depositor, uint256 _newDeposit);\\n\\n    event CollateralGainWithdrawn(\\n        address indexed _depositor,\\n        uint256 _collateral,\\n        uint256 _MUSDLoss\\n    );\\n    event CollateralSent(address _to, uint256 _amount);\\n\\n    // --- Functions ---\\n\\n    /*\\n     * Called only once on init, to set addresses of other Liquity contracts\\n     * Callable only by owner, renounces ownership at the end\\n     */\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _musdTokenAddress,\\n        address _sortedTrovesAddress,\\n        address _priceFeedAddress,\\n        address _collateralAddress\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is not zero\\n     * ---\\n     * - Sends depositor's accumulated gains (collateral) to depositor\\n     */\\n    function provideToSP(uint256 _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is zero or there are no under collateralized troves left in the system\\n     * - User has a non zero deposit\\n     * ---\\n     * - Sends all depositor's accumulated gains (collateral) to depositor\\n     * - Decreases deposit stake, and takes new snapshot.\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(uint256 _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - User has a non zero deposit\\n     * - User has an open trove\\n     * - User has some collateral gain\\n     * ---\\n     * - Transfers the depositor's entire collateral gain from the Stability Pool to the caller's trove\\n     * - Leaves their compounded deposit in the Stability Pool\\n     * - Updates snapshots for deposit\\n     */\\n    function withdrawCollateralGainToTrove(\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Caller is TroveManager\\n     * ---\\n     * Cancels out the specified debt against the mUSD contained in the Stability Pool (as far as possible)\\n     * and transfers the Trove's collateral from ActivePool to StabilityPool.\\n     * Only called by liquidation functions in the TroveManager.\\n     */\\n    function offset(uint256 _debt, uint256 _coll) external;\\n\\n    /*\\n     * Returns the total amount of collateral held by the pool, accounted in an internal variable instead of `balance`,\\n     * to exclude edge cases like collateral received from a self-destruct.\\n     */\\n    function getCollateralBalance() external view returns (uint);\\n\\n    /*\\n     * Returns mUSD held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\n     */\\n    function getTotalMUSDDeposits() external view returns (uint);\\n\\n    /*\\n     * Calculates the collateral gain earned by the deposit since its last snapshots were taken.\\n     */\\n    function getDepositorCollateralGain(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Return the user's compounded deposit.\\n     */\\n    function getCompoundedMUSDDeposit(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Fallback function\\n     * Only callable by Active Pool, it just accounts for BTC received\\n     * receive() external payable;\\n     */\\n\\n    function collateralAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa826c8d5909d57d4eb23c7e4a9c5496c8c41ed759fbaf8a574cf39d26779c08f\",\"license\":\"MIT\"},\"contracts/interfaces/ITroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./IStabilityPool.sol\\\";\\nimport \\\"./IPCV.sol\\\";\\n\\n// Common interface for the Trove Manager.\\ninterface ITroveManager {\\n    enum Status {\\n        nonExistent,\\n        active,\\n        closedByOwner,\\n        closedByLiquidation,\\n        closedByRedemption\\n    }\\n\\n    struct InterestRateChange {\\n        uint16 interestRate;\\n        uint256 blockNumber;\\n    }\\n\\n    // --- Events ---\\n\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event InterestRateManagerAddressChanged(\\n        address _interestRateManagerAddress\\n    );\\n    event MUSDTokenAddressChanged(address _newMUSDTokenAddress);\\n    event PCVAddressChanged(address _pcvAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n\\n    event Liquidation(\\n        uint256 _liquidatedPrincipal,\\n        uint256 _liquidatedInterest,\\n        uint256 _liquidatedColl,\\n        uint256 _collGasCompensation,\\n        uint256 _gasCompensation\\n    );\\n    event Redemption(\\n        uint256 _attemptedAmount,\\n        uint256 _actualAmount,\\n        uint256 _collateralSent,\\n        uint256 _collateralFee\\n    );\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint256 _principal,\\n        uint256 _interest,\\n        uint256 _coll,\\n        uint256 stake,\\n        uint8 operation\\n    );\\n    event TroveLiquidated(\\n        address indexed _borrower,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint8 operation\\n    );\\n    event BaseRateUpdated(uint256 _baseRate);\\n    event LastFeeOpTimeUpdated(uint256 _lastFeeOpTime);\\n    event TotalStakesUpdated(uint256 _newTotalStakes);\\n    event SystemSnapshotsUpdated(\\n        uint256 _totalStakesSnapshot,\\n        uint256 _totalCollateralSnapshot\\n    );\\n    event LTermsUpdated(\\n        uint256 _L_Collateral,\\n        uint256 _L_Principal,\\n        uint256 _L_Interest\\n    );\\n    event TroveSnapshotsUpdated(\\n        uint256 _L_Collateral,\\n        uint256 _L_Principal,\\n        uint256 _L_Interest\\n    );\\n    event TroveIndexUpdated(address _borrower, uint256 _newIndex);\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _activePoolAddress,\\n        address _borrowerOperationsAddress,\\n        address _collSurplusPoolAddress,\\n        address _defaultPoolAddress,\\n        address _gasPoolAddress,\\n        address _interestRateManagerAddress,\\n        address _musdTokenAddress,\\n        address _pcvAddress,\\n        address _priceFeedAddress,\\n        address _sortedTrovesAddress,\\n        address _stabilityPoolAddress\\n    ) external;\\n\\n    function liquidate(address _borrower) external;\\n\\n    function batchLiquidateTroves(address[] calldata _troveArray) external;\\n\\n    function redeemCollateral(\\n        uint256 _amount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint256 _partialRedemptionHintNICR,\\n        uint256 _maxIterations,\\n        uint256 _maxFeePercentage\\n    ) external;\\n\\n    function updateStakeAndTotalStakes(\\n        address _borrower\\n    ) external returns (uint);\\n\\n    function updateTroveRewardSnapshots(address _borrower) external;\\n\\n    function addTroveOwnerToArray(\\n        address _borrower\\n    ) external returns (uint256 index);\\n\\n    function applyPendingRewards(address _borrower) external;\\n\\n    function closeTrove(address _borrower) external;\\n\\n    function removeStake(address _borrower) external;\\n\\n    function decayBaseRateFromBorrowing() external;\\n\\n    function setTroveStatus(address _borrower, Status _status) external;\\n\\n    function setTroveMaxBorrowingCapacity(\\n        address _borrower,\\n        uint256 _maxBorrowingCapacity\\n    ) external;\\n\\n    function updateDefaultPoolInterest() external;\\n\\n    function updateSystemAndTroveInterest(address _borrower) external;\\n\\n    function increaseTroveColl(\\n        address _borrower,\\n        uint256 _collIncrease\\n    ) external returns (uint);\\n\\n    function decreaseTroveColl(\\n        address _borrower,\\n        uint256 _collDecrease\\n    ) external returns (uint);\\n\\n    function increaseTroveDebt(\\n        address _borrower,\\n        uint256 _debtIncrease\\n    ) external returns (uint256);\\n\\n    function decreaseTroveDebt(\\n        address _borrower,\\n        uint256 _debtDecrease\\n    ) external returns (uint256, uint256);\\n\\n    function setTroveInterestRate(address _borrower, uint16 _rate) external;\\n\\n    function setTroveLastInterestUpdateTime(\\n        address _borrower,\\n        uint256 _timestamp\\n    ) external;\\n\\n    function stabilityPool() external view returns (IStabilityPool);\\n\\n    function pcv() external view returns (IPCV);\\n\\n    function getTroveOwnersCount() external view returns (uint);\\n\\n    function getTroveFromTroveOwnersArray(\\n        uint256 _index\\n    ) external view returns (address);\\n\\n    function getTroveInterestOwed(\\n        address _borrower\\n    ) external view returns (uint256);\\n\\n    function getTrovePrincipal(address _borrower) external view returns (uint);\\n\\n    function getNominalICR(address _borrower) external view returns (uint);\\n\\n    function getCurrentICR(\\n        address _borrower,\\n        uint256 _price\\n    ) external view returns (uint);\\n\\n    function getPendingCollateral(\\n        address _borrower\\n    ) external view returns (uint);\\n\\n    function getPendingDebt(\\n        address _borrower\\n    ) external view returns (uint256, uint256);\\n\\n    function hasPendingRewards(address _borrower) external view returns (bool);\\n\\n    function getEntireDebtAndColl(\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 coll,\\n            uint256 principal,\\n            uint256 interest,\\n            uint256 pendingCollateral,\\n            uint256 pendingPrincipal,\\n            uint256 pendingInterest\\n        );\\n\\n    function getRedemptionRate() external view returns (uint);\\n\\n    function getRedemptionRateWithDecay() external view returns (uint);\\n\\n    function getRedemptionFeeWithDecay(\\n        uint256 _collateralDrawn\\n    ) external view returns (uint);\\n\\n    function getBorrowingRate() external view returns (uint);\\n\\n    function getBorrowingRateWithDecay() external view returns (uint);\\n\\n    function getBorrowingFee(uint256 _debt) external view returns (uint);\\n\\n    function getBorrowingFeeWithDecay(\\n        uint256 _debt\\n    ) external view returns (uint);\\n\\n    function getTroveStatus(address _borrower) external view returns (Status);\\n\\n    function getTroveStake(address _borrower) external view returns (uint);\\n\\n    function getTroveDebt(address _borrower) external view returns (uint);\\n\\n    function getTroveInterestRate(\\n        address _borrower\\n    ) external view returns (uint16);\\n\\n    function getTroveLastInterestUpdateTime(\\n        address _borrower\\n    ) external view returns (uint);\\n\\n    function getTroveColl(address _borrower) external view returns (uint);\\n\\n    function getTCR(uint256 _price) external view returns (uint);\\n\\n    function checkRecoveryMode(uint256 _price) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x14774fba145999c49d0fff49dc484ff673e677796dbd55784014bd82ff0c405c\",\"license\":\"MIT\"},\"contracts/token/IMUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\n\\ninterface IMUSD is IERC20Metadata, IERC20Permit {\\n    // --- Events ---\\n    event BorrowerOperationsAddressAdded(address _newBorrowerOperationsAddress);\\n    event BalanceUpdated(address _user, uint256 _amount);\\n    event InterestRateManagerAddressAdded(address _interestRateManagerAddress);\\n    event StabilityPoolAddressAdded(address _newStabilityPoolAddress);\\n    event TroveManagerAddressAdded(address _troveManagerAddress);\\n\\n    // --- Governance Functions ---\\n    function cancelAddContracts() external;\\n\\n    function cancelAddMintList() external;\\n\\n    function cancelRevokeBurnList() external;\\n\\n    function cancelRevokeMintList() external;\\n\\n    function startAddContracts(\\n        address _troveManagerAddress,\\n        address _stabilityPoolAddress,\\n        address _borrowerOperationsAddress,\\n        address _interestRateManagerAddress\\n    ) external;\\n\\n    function startAddMintList(address _account) external;\\n\\n    function startRevokeBurnList(address _account) external;\\n\\n    function startRevokeMintList(address _account) external;\\n\\n    function finalizeAddContracts() external;\\n\\n    function finalizeAddMintList() external;\\n\\n    function finalizeRevokeBurnList() external;\\n\\n    function finalizeRevokeMintList() external;\\n\\n    // --- External Functions ---\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burnList(address contractAddress) external view returns (bool);\\n\\n    function mintList(address contractAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x87733ae6378e124af9fffbba7334f5f2330a1786c601d2da70dd800ee95500b6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052670de0b6b3a7640000600d5534801561001c57600080fd5b50338061004357604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61004c81610052565b506100a4565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b612abe80620000b46000396000f3fe6080604052600436106102235760003560e01c806377553ad41161012e5780638da5cb5b116100ab578063ce4b5bbe1161006f578063ce4b5bbe146106d6578063eaa8ba7f146106ee578063f2fde38b1461070e578063f92d34331461072e578063fc7e286d1461074357600080fd5b80638da5cb5b14610658578063a20baee614610465578063a4e59ac814610676578063ae91875414610696578063cab666d0146106b657600080fd5b80637f7dde4a116100f25780637f7dde4a1461056e57806386da08241461058e578063887105d31461060d5780638b8fbd92146106225780638c4726eb1461063857600080fd5b806377553ad4146104e057806378c77a2414610500578063794e572414610520578063795d26c31461053c5780637af110ba1461055157600080fd5b80633d83908a116101bc578063619aca1411610180578063619aca141461043a578063715018a61461045057806372fe25aa14610465578063741bef1a1461048157806376671808146104a157600080fd5b80633d83908a146103a95780634870dd9a146103c957806348d399e7146103de5780635733d58f146103fe5780635914d0c81461041a57600080fd5b8062ba85b5146102725780631529a6391461029b5780631bf43555146102b057806328a0a04d146102cd5780632e54bf9514610305578063307d361214610327578063309077b314610347578063335525ad1461035c5780633cc742251461037c57600080fd5b3661026d57610230610770565b34600a600082825461024291906126cb565b9091555050600a54604051908152600080516020612a698339815191529060200160405180910390a1005b600080fd5b34801561027e57600080fd5b5061028860105481565b6040519081526020015b60405180910390f35b3480156102a757600080fd5b50600a54610288565b3480156102bc57600080fd5b50610288686194049f30f720000081565b3480156102d957600080fd5b506102886102e83660046126fa565b600f60209081526000928352604080842090915290825290205481565b34801561031157600080fd5b5061032561032036600461272d565b6107e1565b005b34801561033357600080fd5b5061028861034236600461275b565b6108be565b34801561035357600080fd5b50600954610288565b34801561036857600080fd5b50610325610377366004612778565b610951565b34801561038857600080fd5b5060015461039c906001600160a01b031681565b604051610292919061279a565b3480156103b557600080fd5b5060065461039c906001600160a01b031681565b3480156103d557600080fd5b5061028860c881565b3480156103ea57600080fd5b5060045461039c906001600160a01b031681565b34801561040a57600080fd5b506102886714d1120d7b16000081565b34801561042657600080fd5b506103256104353660046127ae565b61099e565b34801561044657600080fd5b5061028860115481565b34801561045c57600080fd5b50610325610baf565b34801561047157600080fd5b50610288670de0b6b3a764000081565b34801561048d57600080fd5b5060025461039c906001600160a01b031681565b3480156104ad57600080fd5b50600e546104c890600160801b90046001600160801b031681565b6040516001600160801b039091168152602001610292565b3480156104ec57600080fd5b5060055461039c906001600160a01b031681565b34801561050c57600080fd5b5061032561051b36600461272d565b610bc1565b34801561052c57600080fd5b50610288670f43fc2c04ee000081565b34801561054857600080fd5b50610288610c78565b34801561055d57600080fd5b50610288680ad78ebc5ac620000081565b34801561057a57600080fd5b5060005461039c906001600160a01b031681565b34801561059a57600080fd5b506105de6105a936600461275b565b600c602052600090815260409020805460018201546002909201549091906001600160801b0380821691600160801b90041684565b6040805194855260208501939093526001600160801b0391821692840192909252166060820152608001610292565b34801561061957600080fd5b50610288610d74565b34801561062e57600080fd5b50610288600d5481565b34801561064457600080fd5b5061028861065336600461275b565b610e39565b34801561066457600080fd5b506003546001600160a01b031661039c565b34801561068257600080fd5b50600e546104c8906001600160801b031681565b3480156106a257600080fd5b5060085461039c906001600160a01b031681565b3480156106c257600080fd5b5060075461039c906001600160a01b031681565b3480156106e257600080fd5b50610288633b9aca0081565b3480156106fa57600080fd5b506103256107093660046127e7565b610ec3565b34801561071a57600080fd5b5061032561072936600461275b565b611379565b34801561073a57600080fd5b506102886113b7565b34801561074f57600080fd5b5061028861075e36600461275b565b600b6020526000908152604090205481565b6000546001600160a01b031633146107df5760405162461bcd60e51b815260206004820152602760248201527f53746162696c697479506f6f6c3a2043616c6c6572206973206e6f74204163746044820152661a5d99541bdbdb60ca1b60648201526084015b60405180910390fd5b565b80156107ef576107ef6113da565b336000908152600b6020526040902054610808816115d0565b6000610813336108be565b9050600061082033610e39565b9050600061082e8583611639565b9050600061083c838661287d565b90506108483383611653565b6000610854838561287d565b905061086033826116e2565b6040518181523390600080516020612a498339815191529060200160405180910390a260408051868152602081018490523391600080516020612a29833981519152910160405180910390a26108b585611819565b50505050505050565b6001600160a01b0381166000908152600b60205260408120548082036108e75750600092915050565b6001600160a01b0383166000908152600c60209081526040808320815160808101835281548152600182015493810193909352600201546001600160801b0380821692840192909252600160801b90041660608201529061094883836118ad565b95945050505050565b610959611990565b600954801580610967575082155b1561097157505050565b60008061097f8486856119fc565b9150915061098d8282611ad1565b6109978486611daa565b5050505050565b336000908152600b60205260409020546109b7816115d0565b6109c033611eda565b6109c933611fe6565b60006109d4336108be565b905060006109e133610e39565b905060006109ef828561287d565b90506109fb33836116e2565b60408051848152602081018390523391600080516020612a29833981519152910160405180910390a26040518281523390600080516020612a498339815191529060200160405180910390a282600a6000828254610a59919061287d565b9091555050600a54604051908152600080516020612a698339815191529060200160405180910390a17f342693d2465f6f44931e41128424a0227e0cbc69d1c3917a839e6de71696d44c3384604051610ab3929190612890565b60405180910390a16004546001600160a01b0316610b3b5760055460405163abfad25d60e01b81526001600160a01b039091169063abfad25d908590610b049033906000908c908c906004016128a9565b6000604051808303818588803b158015610b1d57600080fd5b505af1158015610b31573d6000803e3d6000fd5b5050505050610ba7565b60055460405163abfad25d60e01b81526001600160a01b039091169063abfad25d90600090610b7490339088908c908c906004016128a9565b6000604051808303818588803b158015610b8d57600080fd5b505af1158015610ba1573d6000803e3d6000fd5b50505050505b505050505050565b610bb7612064565b6107df6000612091565b610bca816120e3565b336000818152600b602052604081205491610be4906108be565b90506000610bf133610e39565b90506000610bff828561287d565b90506000610c0d86846126cb565b9050610c1933826116e2565b6040518181523390600080516020612a498339815191529060200160405180910390a260408051858152602081018490523391600080516020612a29833981519152910160405180910390a2610c6f3387612142565b610ba784611819565b60008054604080516314a6bf0f60e01b8152905183926001600160a01b0316916314a6bf0f9160048083019260209291908290030181865afa158015610cc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce691906128d4565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166314a6bf0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6191906128d4565b9050610d6d81836126cb565b9250505090565b6000805460408051631529a63960e01b8152905183926001600160a01b031691631529a6399160048083019260209291908290030181865afa158015610dbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de291906128d4565b90506000600160009054906101000a90046001600160a01b03166001600160a01b0316631529a6396040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d3d573d6000803e3d6000fd5b6001600160a01b0381166000908152600b6020526040812054808203610e625750600092915050565b6001600160a01b0383166000908152600c60209081526040808320815160808101835281548152600182015493810193909352600201546001600160801b0380821692840192909252600160801b900416606082015290610948838361226f565b610ecb612064565b610ed48761235f565b610edd8661235f565b610ee68561235f565b610eef8461235f565b610ef88361235f565b610f018261235f565b6001600160a01b03811615610f1957610f198161235f565b600580546001600160a01b03199081166001600160a01b038a81169182179093556006805483168a85161790556000805483168985161781556007805484168986161790556008805484168886161790556002805484168786161790556004805490931693851693909317825560408051638da5cb5b60e01b815290519192638da5cb5b9282820192602092908290030181865afa158015610fbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe391906128ed565b6001600160a01b031614158061106e5750600554604080516348d399e760e01b815290516001600160a01b038085169316916348d399e79160048083019260209291908290030181865afa15801561103f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106391906128ed565b6001600160a01b0316145b801561116d575060006001600160a01b0316856001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e291906128ed565b6001600160a01b031614158061116d5750600054604080516348d399e760e01b815290516001600160a01b038085169316916348d399e79160048083019260209291908290030181865afa15801561113e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116291906128ed565b6001600160a01b0316145b6111f05760405162461bcd60e51b815260206004820152604860248201527f5468652073616d6520636f6c6c61746572616c2061646472657373206d75737460448201527f206265207573656420666f722074686520656e7469726520736574206f6620636064820152676f6e74726163747360c01b608482015260a4016107d6565b7f3ca631ffcd2a9b5d9ae18543fc82f58eb4ca33af9e6ab01b7a8e95331e6ed9858760405161121f919061279a565b60405180910390a17f143219c9e69b09e07e095fcc889b43d8f46ca892bba65f08dc3a0050869a567886604051611256919061279a565b60405180910390a17f78f058b189175430c48dc02699e3a0031ea4ff781536dc2fab847de4babdd8828560405161128d919061279a565b60405180910390a17f547e9055f019d1e165f0ca2133494723cb248f8536192c218254285fc43c5668846040516112c4919061279a565b60405180910390a17f65f4cf077bc01e4742eb5ad98326f6e95b63548ea24b17f8d5e823111fe78800836040516112fb919061279a565b60405180910390a17f8c537274438aa850a330284665d81a85dd38267d09e4050d416bfc94142db26482604051611332919061279a565b60405180910390a17ffba7421f3d1a98e80d72491a6e0523133444a5842cc7310951d8b82d075a7dff81604051611369919061279a565b60405180910390a16108b5610baf565b611381612064565b6001600160a01b0381166113ab576000604051631e4fbdf760e01b81526004016107d6919061279a565b6113b481612091565b50565b6103e86113cd670de0b6b3a7640000600561290a565b6113d79190612921565b81565b60025460408051630fdb11cf60e01b815290516000926001600160a01b031691630fdb11cf916004808301926020929190829003018187875af1158015611425573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144991906128d4565b90506000600860009054906101000a90046001600160a01b03166001600160a01b0316634d6228316040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c491906128ed565b600654604051630d293c7160e41b81529192506000916001600160a01b039091169063d293c710906114fc9085908790600401612890565b602060405180830381865afa158015611519573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153d91906128d4565b9050670f43fc2c04ee00008110156115cb5760405162461bcd60e51b8152602060048201526044602482018190527f53746162696c697479506f6f6c3a2043616e6e6f742077697468647261772077908201527f68696c65207468657265206172652074726f766573207769746820494352203c6064820152631026a1a960e11b608482015260a4016107d6565b505050565b600081116113b45760405162461bcd60e51b815260206004820152603060248201527f53746162696c697479506f6f6c3a2055736572206d757374206861766520612060448201526f1b9bdb8b5e995c9bc819195c1bdcda5d60821b60648201526084016107d6565b6000818310611648578161164a565b825b90505b92915050565b8060000361165f575050565b60075460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906116919085908590600401612890565b6020604051808303816000875af11580156116b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d49190612943565b506116de81612404565b5050565b6001600160a01b0382166000908152600b60205260408120829055819003611770576001600160a01b0382166000818152600c602052604080822082815560018101839055600201829055517fc48943df4095f4f20d171fd2872eafdc0eed4d9014ac3672f3bde7fd425449d591611764918190918252602082015260400190565b60405180910390a25050565b600e54600d546001600160801b03600160801b80840482166000818152600f6020908152604080832095909716808352948152868220546001600160a01b038a16808452600c8352928890206001810188905581815594840286176002909501949094558651868152908101849052939591949390917fc48943df4095f4f20d171fd2872eafdc0eed4d9014ac3672f3bde7fd425449d5910160405180910390a2505050505050565b806000036118245750565b600081600a54611834919061287d565b600a819055604051818152909150600080516020612a698339815191529060200160405180910390a17f342693d2465f6f44931e41128424a0227e0cbc69d1c3917a839e6de71696d44c338360405161188e929190612890565b60405180910390a16004546116de906001600160a01b03163384612453565b606081015160408083015183516020808601516001600160801b038087166000908152600f845286812091861681529252938120549094939085906118f390849061287d565b6001600160801b0386166000908152600f6020526040812091925090633b9aca009082611921886001612965565b6001600160801b03166001600160801b031681526020019081526020016000205461194c9190612921565b90506000670de0b6b3a76400008461196484866126cb565b61196e908d61290a565b6119789190612921565b6119829190612921565b9a9950505050505050505050565b6006546001600160a01b031633146107df5760405162461bcd60e51b815260206004820152602960248201527f53746162696c697479506f6f6c3a2043616c6c6572206973206e6f742054726f6044820152683b32a6b0b730b3b2b960b91b60648201526084016107d6565b6000806000601054670de0b6b3a764000087611a18919061290a565b611a2291906126cb565b905083851115611a3457611a3461298c565b838503611a50576000601155670de0b6b3a76400009150611aa5565b601154600090611a68670de0b6b3a76400008861290a565b611a72919061287d565b9050611a7e8582612921565b611a899060016126cb565b925080611a96868561290a565b611aa0919061287d565b601155505b611aaf8482612921565b9250611abb848461290a565b611ac5908261287d565b60105550935093915050565b600d546000670de0b6b3a7640000831115611aee57611aee61298c565b6000611b0284670de0b6b3a764000061287d565b600e546001600160801b03600160801b820481166000818152600f60209081526040808320949095168083529390529283205493945090929091611b46878a61290a565b90506000611b5482846126cb565b6001600160801b038581166000818152600f60209081526040808320948b16808452948252918290208590558151858152908101929092528101919091529091507f070343c785d5991a4938bacac9bfba86825bb9e467be0eadc6a6d15e44d9bd879060600160405180910390a185600003611c7e57611bd5846001612965565b600e80546001600160801b03908116600160801b93821684021791829055604051929091041681527fb50f0f59e7cb5b421dc77581c3a9919e3806e076e5fa78a874c3f120cb7d874d9060200160405180910390a1600e80546001600160801b0319169055604051600081527f1f9dfc70cd666adb18a39d60a797518f7b4febf4b6e24ef37d44f6e1e7219fbe9060200160405180910390a1670de0b6b3a76400009650611d56565b633b9aca00670de0b6b3a7640000611c96888b61290a565b611ca09190612921565b1015611d3657670de0b6b3a7640000633b9aca00611cbe888b61290a565b611cc8919061290a565b611cd29190612921565b9650611cdf856001612965565b600e80546001600160801b0319166001600160801b039290921691821790556040519081527f1f9dfc70cd666adb18a39d60a797518f7b4febf4b6e24ef37d44f6e1e7219fbe9060200160405180910390a1611d56565b670de0b6b3a7640000611d49878a61290a565b611d539190612921565b96505b60008711611d6657611d6661298c565b600d8790556040518781527fe8ab4c88569ba3c05662fd0804472de2f88b936d15c00495f8e13a82cca7a2349060200160405180910390a150505050505050505050565b6000805460405163ab11fadd60e01b81526004810184905260248101929092526001600160a01b031690819063ab11fadd90604401600060405180830381600087803b158015611df957600080fd5b505af1158015611e0d573d6000803e3d6000fd5b50505050611e1a82612404565b600754604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac90611e4c9030908690600401612890565b600060405180830381600087803b158015611e6657600080fd5b505af1158015611e7a573d6000803e3d6000fd5b5050604051636250216960e01b81526001600160a01b038416925063625021699150611eac9030908790600401612890565b600060405180830381600087803b158015611ec657600080fd5b505af11580156108b5573d6000803e3d6000fd5b6006546040516321e3780160e01b81526001916001600160a01b0316906321e3780190611f0b90859060040161279a565b602060405180830381865afa158015611f28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4c91906129b8565b6004811115611f5d57611f5d6129a2565b146113b45760405162461bcd60e51b815260206004820152604d60248201527f53746162696c697479506f6f6c3a2063616c6c6572206d75737420686176652060448201527f616e206163746976652074726f766520746f20776974686472617720636f6c6c60648201526c61746572616c4761696e20746f60981b608482015260a4016107d6565b6000611ff1826108be565b9050600081116116de5760405162461bcd60e51b815260206004820152603860248201527f53746162696c697479506f6f6c3a2063616c6c6572206d7573742068617665206044820152773737b716bd32b9379031b7b63630ba32b930b61023b0b4b760411b60648201526084016107d6565b6003546001600160a01b031633146107df573360405163118cdaa760e01b81526004016107d6919061279a565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600081116113b45760405162461bcd60e51b815260206004820152602660248201527f53746162696c697479506f6f6c3a20416d6f756e74206d757374206265206e6f6044820152656e2d7a65726f60d01b60648201526084016107d6565b60008160095461215291906126cb565b60098190556040518181529091507ffb502a10a442e29149185372d74b953304b5bc0a0d9d431c070905d3dfbc89e39060200160405180910390a16007546040516323b872dd60e01b81526001600160a01b0385811660048301523060248301526044820185905260009216906323b872dd906064016020604051808303816000875af11580156121e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220b9190612943565b9050806122695760405162461bcd60e51b815260206004820152602660248201527f4d55534420776173206e6f74207472616e736665727265642073756363657373604482015265333ab6363c9760d11b60648201526084016107d6565b50505050565b602081015160408201516060830151600e546000939291906001600160801b03600160801b909104811690821610156122ae576000935050505061164d565b600e5460009081906122ca9085906001600160801b03166129d9565b9050806001600160801b03166000036122fd5784600d54896122ec919061290a565b6122f69190612921565b9150612331565b806001600160801b031660010361232c57633b9aca0085600d548a612322919061290a565b6122ec9190612921565b600091505b61233f633b9aca0089612921565b8210156123545760009550505050505061164d565b509695505050505050565b6001600160a01b0381166123b55760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f2061646472657373000060448201526064016107d6565b803b806116de5760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f60448201526064016107d6565b600081600954612414919061287d565b60098190556040518181529091507ffb502a10a442e29149185372d74b953304b5bc0a0d9d431c070905d3dfbc89e39060200160405180910390a15050565b6001600160a01b0383166124f9576000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146124ae576040519150601f19603f3d011682016040523d82523d6000602084013e6124b3565b606091505b50509050806122695760405162461bcd60e51b815260206004820152601260248201527114d95b991a5b99c8109510c819985a5b195960721b60448201526064016107d6565b6115cb6001600160a01b03841683836115cb83846001600160a01b031663a9059cbb858560405160240161252e929190612890565b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505060006125706001600160a01b038416836125b5565b905080516000141580156125955750808060200190518101906125939190612943565b155b156115cb5782604051635274afe760e01b81526004016107d6919061279a565b606061164a8383600084600080856001600160a01b031684866040516125db91906129f9565b60006040518083038185875af1925050503d8060008114612618576040519150601f19603f3d011682016040523d82523d6000602084013e61261d565b606091505b509150915061262d868383612639565b925050505b9392505050565b60608261264e576126498261268c565b612632565b815115801561266557506001600160a01b0384163b155b156126855783604051639996b31560e01b81526004016107d6919061279a565b5080612632565b80511561269c5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561164d5761164d6126b5565b80356001600160801b03811681146126f557600080fd5b919050565b6000806040838503121561270d57600080fd5b612716836126de565b9150612724602084016126de565b90509250929050565b60006020828403121561273f57600080fd5b5035919050565b6001600160a01b03811681146113b457600080fd5b60006020828403121561276d57600080fd5b813561263281612746565b6000806040838503121561278b57600080fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b600080604083850312156127c157600080fd5b82356127cc81612746565b915060208301356127dc81612746565b809150509250929050565b600080600080600080600060e0888a03121561280257600080fd5b873561280d81612746565b9650602088013561281d81612746565b9550604088013561282d81612746565b9450606088013561283d81612746565b9350608088013561284d81612746565b925060a088013561285d81612746565b915060c088013561286d81612746565b8091505092959891949750929550565b8181038181111561164d5761164d6126b5565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03948516815260208101939093529083166040830152909116606082015260800190565b6000602082840312156128e657600080fd5b5051919050565b6000602082840312156128ff57600080fd5b815161263281612746565b808202811582820484141761164d5761164d6126b5565b60008261293e57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561295557600080fd5b8151801515811461263257600080fd5b6001600160801b03818116838216019080821115612985576129856126b5565b5092915050565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b6000602082840312156129ca57600080fd5b81516005811061263257600080fd5b6001600160801b03828116828216039080821115612985576129856126b5565b6000825160005b81811015612a1a5760208186018101518583015201612a00565b50600092019182525091905056fe47647c495a7db9471a1b024b3c6f7555a502a0de4b130d83a4d3c8f9cff25939bce78369dccab09eec1986f4d409ab09ffbb47d65423e5148fcf98411c5111c95745610f99463e502f9c3333585fe329b498e36b00b8c1bdfd8dc87dfe35b5eaa264697066735822122062d4768ba20e08b994f8fc40618db8f1d3c3462d31467172a9134654338f09d064736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106102235760003560e01c806377553ad41161012e5780638da5cb5b116100ab578063ce4b5bbe1161006f578063ce4b5bbe146106d6578063eaa8ba7f146106ee578063f2fde38b1461070e578063f92d34331461072e578063fc7e286d1461074357600080fd5b80638da5cb5b14610658578063a20baee614610465578063a4e59ac814610676578063ae91875414610696578063cab666d0146106b657600080fd5b80637f7dde4a116100f25780637f7dde4a1461056e57806386da08241461058e578063887105d31461060d5780638b8fbd92146106225780638c4726eb1461063857600080fd5b806377553ad4146104e057806378c77a2414610500578063794e572414610520578063795d26c31461053c5780637af110ba1461055157600080fd5b80633d83908a116101bc578063619aca1411610180578063619aca141461043a578063715018a61461045057806372fe25aa14610465578063741bef1a1461048157806376671808146104a157600080fd5b80633d83908a146103a95780634870dd9a146103c957806348d399e7146103de5780635733d58f146103fe5780635914d0c81461041a57600080fd5b8062ba85b5146102725780631529a6391461029b5780631bf43555146102b057806328a0a04d146102cd5780632e54bf9514610305578063307d361214610327578063309077b314610347578063335525ad1461035c5780633cc742251461037c57600080fd5b3661026d57610230610770565b34600a600082825461024291906126cb565b9091555050600a54604051908152600080516020612a698339815191529060200160405180910390a1005b600080fd5b34801561027e57600080fd5b5061028860105481565b6040519081526020015b60405180910390f35b3480156102a757600080fd5b50600a54610288565b3480156102bc57600080fd5b50610288686194049f30f720000081565b3480156102d957600080fd5b506102886102e83660046126fa565b600f60209081526000928352604080842090915290825290205481565b34801561031157600080fd5b5061032561032036600461272d565b6107e1565b005b34801561033357600080fd5b5061028861034236600461275b565b6108be565b34801561035357600080fd5b50600954610288565b34801561036857600080fd5b50610325610377366004612778565b610951565b34801561038857600080fd5b5060015461039c906001600160a01b031681565b604051610292919061279a565b3480156103b557600080fd5b5060065461039c906001600160a01b031681565b3480156103d557600080fd5b5061028860c881565b3480156103ea57600080fd5b5060045461039c906001600160a01b031681565b34801561040a57600080fd5b506102886714d1120d7b16000081565b34801561042657600080fd5b506103256104353660046127ae565b61099e565b34801561044657600080fd5b5061028860115481565b34801561045c57600080fd5b50610325610baf565b34801561047157600080fd5b50610288670de0b6b3a764000081565b34801561048d57600080fd5b5060025461039c906001600160a01b031681565b3480156104ad57600080fd5b50600e546104c890600160801b90046001600160801b031681565b6040516001600160801b039091168152602001610292565b3480156104ec57600080fd5b5060055461039c906001600160a01b031681565b34801561050c57600080fd5b5061032561051b36600461272d565b610bc1565b34801561052c57600080fd5b50610288670f43fc2c04ee000081565b34801561054857600080fd5b50610288610c78565b34801561055d57600080fd5b50610288680ad78ebc5ac620000081565b34801561057a57600080fd5b5060005461039c906001600160a01b031681565b34801561059a57600080fd5b506105de6105a936600461275b565b600c602052600090815260409020805460018201546002909201549091906001600160801b0380821691600160801b90041684565b6040805194855260208501939093526001600160801b0391821692840192909252166060820152608001610292565b34801561061957600080fd5b50610288610d74565b34801561062e57600080fd5b50610288600d5481565b34801561064457600080fd5b5061028861065336600461275b565b610e39565b34801561066457600080fd5b506003546001600160a01b031661039c565b34801561068257600080fd5b50600e546104c8906001600160801b031681565b3480156106a257600080fd5b5060085461039c906001600160a01b031681565b3480156106c257600080fd5b5060075461039c906001600160a01b031681565b3480156106e257600080fd5b50610288633b9aca0081565b3480156106fa57600080fd5b506103256107093660046127e7565b610ec3565b34801561071a57600080fd5b5061032561072936600461275b565b611379565b34801561073a57600080fd5b506102886113b7565b34801561074f57600080fd5b5061028861075e36600461275b565b600b6020526000908152604090205481565b6000546001600160a01b031633146107df5760405162461bcd60e51b815260206004820152602760248201527f53746162696c697479506f6f6c3a2043616c6c6572206973206e6f74204163746044820152661a5d99541bdbdb60ca1b60648201526084015b60405180910390fd5b565b80156107ef576107ef6113da565b336000908152600b6020526040902054610808816115d0565b6000610813336108be565b9050600061082033610e39565b9050600061082e8583611639565b9050600061083c838661287d565b90506108483383611653565b6000610854838561287d565b905061086033826116e2565b6040518181523390600080516020612a498339815191529060200160405180910390a260408051868152602081018490523391600080516020612a29833981519152910160405180910390a26108b585611819565b50505050505050565b6001600160a01b0381166000908152600b60205260408120548082036108e75750600092915050565b6001600160a01b0383166000908152600c60209081526040808320815160808101835281548152600182015493810193909352600201546001600160801b0380821692840192909252600160801b90041660608201529061094883836118ad565b95945050505050565b610959611990565b600954801580610967575082155b1561097157505050565b60008061097f8486856119fc565b9150915061098d8282611ad1565b6109978486611daa565b5050505050565b336000908152600b60205260409020546109b7816115d0565b6109c033611eda565b6109c933611fe6565b60006109d4336108be565b905060006109e133610e39565b905060006109ef828561287d565b90506109fb33836116e2565b60408051848152602081018390523391600080516020612a29833981519152910160405180910390a26040518281523390600080516020612a498339815191529060200160405180910390a282600a6000828254610a59919061287d565b9091555050600a54604051908152600080516020612a698339815191529060200160405180910390a17f342693d2465f6f44931e41128424a0227e0cbc69d1c3917a839e6de71696d44c3384604051610ab3929190612890565b60405180910390a16004546001600160a01b0316610b3b5760055460405163abfad25d60e01b81526001600160a01b039091169063abfad25d908590610b049033906000908c908c906004016128a9565b6000604051808303818588803b158015610b1d57600080fd5b505af1158015610b31573d6000803e3d6000fd5b5050505050610ba7565b60055460405163abfad25d60e01b81526001600160a01b039091169063abfad25d90600090610b7490339088908c908c906004016128a9565b6000604051808303818588803b158015610b8d57600080fd5b505af1158015610ba1573d6000803e3d6000fd5b50505050505b505050505050565b610bb7612064565b6107df6000612091565b610bca816120e3565b336000818152600b602052604081205491610be4906108be565b90506000610bf133610e39565b90506000610bff828561287d565b90506000610c0d86846126cb565b9050610c1933826116e2565b6040518181523390600080516020612a498339815191529060200160405180910390a260408051858152602081018490523391600080516020612a29833981519152910160405180910390a2610c6f3387612142565b610ba784611819565b60008054604080516314a6bf0f60e01b8152905183926001600160a01b0316916314a6bf0f9160048083019260209291908290030181865afa158015610cc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce691906128d4565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166314a6bf0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6191906128d4565b9050610d6d81836126cb565b9250505090565b6000805460408051631529a63960e01b8152905183926001600160a01b031691631529a6399160048083019260209291908290030181865afa158015610dbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de291906128d4565b90506000600160009054906101000a90046001600160a01b03166001600160a01b0316631529a6396040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d3d573d6000803e3d6000fd5b6001600160a01b0381166000908152600b6020526040812054808203610e625750600092915050565b6001600160a01b0383166000908152600c60209081526040808320815160808101835281548152600182015493810193909352600201546001600160801b0380821692840192909252600160801b900416606082015290610948838361226f565b610ecb612064565b610ed48761235f565b610edd8661235f565b610ee68561235f565b610eef8461235f565b610ef88361235f565b610f018261235f565b6001600160a01b03811615610f1957610f198161235f565b600580546001600160a01b03199081166001600160a01b038a81169182179093556006805483168a85161790556000805483168985161781556007805484168986161790556008805484168886161790556002805484168786161790556004805490931693851693909317825560408051638da5cb5b60e01b815290519192638da5cb5b9282820192602092908290030181865afa158015610fbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe391906128ed565b6001600160a01b031614158061106e5750600554604080516348d399e760e01b815290516001600160a01b038085169316916348d399e79160048083019260209291908290030181865afa15801561103f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106391906128ed565b6001600160a01b0316145b801561116d575060006001600160a01b0316856001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e291906128ed565b6001600160a01b031614158061116d5750600054604080516348d399e760e01b815290516001600160a01b038085169316916348d399e79160048083019260209291908290030181865afa15801561113e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116291906128ed565b6001600160a01b0316145b6111f05760405162461bcd60e51b815260206004820152604860248201527f5468652073616d6520636f6c6c61746572616c2061646472657373206d75737460448201527f206265207573656420666f722074686520656e7469726520736574206f6620636064820152676f6e74726163747360c01b608482015260a4016107d6565b7f3ca631ffcd2a9b5d9ae18543fc82f58eb4ca33af9e6ab01b7a8e95331e6ed9858760405161121f919061279a565b60405180910390a17f143219c9e69b09e07e095fcc889b43d8f46ca892bba65f08dc3a0050869a567886604051611256919061279a565b60405180910390a17f78f058b189175430c48dc02699e3a0031ea4ff781536dc2fab847de4babdd8828560405161128d919061279a565b60405180910390a17f547e9055f019d1e165f0ca2133494723cb248f8536192c218254285fc43c5668846040516112c4919061279a565b60405180910390a17f65f4cf077bc01e4742eb5ad98326f6e95b63548ea24b17f8d5e823111fe78800836040516112fb919061279a565b60405180910390a17f8c537274438aa850a330284665d81a85dd38267d09e4050d416bfc94142db26482604051611332919061279a565b60405180910390a17ffba7421f3d1a98e80d72491a6e0523133444a5842cc7310951d8b82d075a7dff81604051611369919061279a565b60405180910390a16108b5610baf565b611381612064565b6001600160a01b0381166113ab576000604051631e4fbdf760e01b81526004016107d6919061279a565b6113b481612091565b50565b6103e86113cd670de0b6b3a7640000600561290a565b6113d79190612921565b81565b60025460408051630fdb11cf60e01b815290516000926001600160a01b031691630fdb11cf916004808301926020929190829003018187875af1158015611425573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144991906128d4565b90506000600860009054906101000a90046001600160a01b03166001600160a01b0316634d6228316040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c491906128ed565b600654604051630d293c7160e41b81529192506000916001600160a01b039091169063d293c710906114fc9085908790600401612890565b602060405180830381865afa158015611519573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153d91906128d4565b9050670f43fc2c04ee00008110156115cb5760405162461bcd60e51b8152602060048201526044602482018190527f53746162696c697479506f6f6c3a2043616e6e6f742077697468647261772077908201527f68696c65207468657265206172652074726f766573207769746820494352203c6064820152631026a1a960e11b608482015260a4016107d6565b505050565b600081116113b45760405162461bcd60e51b815260206004820152603060248201527f53746162696c697479506f6f6c3a2055736572206d757374206861766520612060448201526f1b9bdb8b5e995c9bc819195c1bdcda5d60821b60648201526084016107d6565b6000818310611648578161164a565b825b90505b92915050565b8060000361165f575050565b60075460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906116919085908590600401612890565b6020604051808303816000875af11580156116b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d49190612943565b506116de81612404565b5050565b6001600160a01b0382166000908152600b60205260408120829055819003611770576001600160a01b0382166000818152600c602052604080822082815560018101839055600201829055517fc48943df4095f4f20d171fd2872eafdc0eed4d9014ac3672f3bde7fd425449d591611764918190918252602082015260400190565b60405180910390a25050565b600e54600d546001600160801b03600160801b80840482166000818152600f6020908152604080832095909716808352948152868220546001600160a01b038a16808452600c8352928890206001810188905581815594840286176002909501949094558651868152908101849052939591949390917fc48943df4095f4f20d171fd2872eafdc0eed4d9014ac3672f3bde7fd425449d5910160405180910390a2505050505050565b806000036118245750565b600081600a54611834919061287d565b600a819055604051818152909150600080516020612a698339815191529060200160405180910390a17f342693d2465f6f44931e41128424a0227e0cbc69d1c3917a839e6de71696d44c338360405161188e929190612890565b60405180910390a16004546116de906001600160a01b03163384612453565b606081015160408083015183516020808601516001600160801b038087166000908152600f845286812091861681529252938120549094939085906118f390849061287d565b6001600160801b0386166000908152600f6020526040812091925090633b9aca009082611921886001612965565b6001600160801b03166001600160801b031681526020019081526020016000205461194c9190612921565b90506000670de0b6b3a76400008461196484866126cb565b61196e908d61290a565b6119789190612921565b6119829190612921565b9a9950505050505050505050565b6006546001600160a01b031633146107df5760405162461bcd60e51b815260206004820152602960248201527f53746162696c697479506f6f6c3a2043616c6c6572206973206e6f742054726f6044820152683b32a6b0b730b3b2b960b91b60648201526084016107d6565b6000806000601054670de0b6b3a764000087611a18919061290a565b611a2291906126cb565b905083851115611a3457611a3461298c565b838503611a50576000601155670de0b6b3a76400009150611aa5565b601154600090611a68670de0b6b3a76400008861290a565b611a72919061287d565b9050611a7e8582612921565b611a899060016126cb565b925080611a96868561290a565b611aa0919061287d565b601155505b611aaf8482612921565b9250611abb848461290a565b611ac5908261287d565b60105550935093915050565b600d546000670de0b6b3a7640000831115611aee57611aee61298c565b6000611b0284670de0b6b3a764000061287d565b600e546001600160801b03600160801b820481166000818152600f60209081526040808320949095168083529390529283205493945090929091611b46878a61290a565b90506000611b5482846126cb565b6001600160801b038581166000818152600f60209081526040808320948b16808452948252918290208590558151858152908101929092528101919091529091507f070343c785d5991a4938bacac9bfba86825bb9e467be0eadc6a6d15e44d9bd879060600160405180910390a185600003611c7e57611bd5846001612965565b600e80546001600160801b03908116600160801b93821684021791829055604051929091041681527fb50f0f59e7cb5b421dc77581c3a9919e3806e076e5fa78a874c3f120cb7d874d9060200160405180910390a1600e80546001600160801b0319169055604051600081527f1f9dfc70cd666adb18a39d60a797518f7b4febf4b6e24ef37d44f6e1e7219fbe9060200160405180910390a1670de0b6b3a76400009650611d56565b633b9aca00670de0b6b3a7640000611c96888b61290a565b611ca09190612921565b1015611d3657670de0b6b3a7640000633b9aca00611cbe888b61290a565b611cc8919061290a565b611cd29190612921565b9650611cdf856001612965565b600e80546001600160801b0319166001600160801b039290921691821790556040519081527f1f9dfc70cd666adb18a39d60a797518f7b4febf4b6e24ef37d44f6e1e7219fbe9060200160405180910390a1611d56565b670de0b6b3a7640000611d49878a61290a565b611d539190612921565b96505b60008711611d6657611d6661298c565b600d8790556040518781527fe8ab4c88569ba3c05662fd0804472de2f88b936d15c00495f8e13a82cca7a2349060200160405180910390a150505050505050505050565b6000805460405163ab11fadd60e01b81526004810184905260248101929092526001600160a01b031690819063ab11fadd90604401600060405180830381600087803b158015611df957600080fd5b505af1158015611e0d573d6000803e3d6000fd5b50505050611e1a82612404565b600754604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac90611e4c9030908690600401612890565b600060405180830381600087803b158015611e6657600080fd5b505af1158015611e7a573d6000803e3d6000fd5b5050604051636250216960e01b81526001600160a01b038416925063625021699150611eac9030908790600401612890565b600060405180830381600087803b158015611ec657600080fd5b505af11580156108b5573d6000803e3d6000fd5b6006546040516321e3780160e01b81526001916001600160a01b0316906321e3780190611f0b90859060040161279a565b602060405180830381865afa158015611f28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4c91906129b8565b6004811115611f5d57611f5d6129a2565b146113b45760405162461bcd60e51b815260206004820152604d60248201527f53746162696c697479506f6f6c3a2063616c6c6572206d75737420686176652060448201527f616e206163746976652074726f766520746f20776974686472617720636f6c6c60648201526c61746572616c4761696e20746f60981b608482015260a4016107d6565b6000611ff1826108be565b9050600081116116de5760405162461bcd60e51b815260206004820152603860248201527f53746162696c697479506f6f6c3a2063616c6c6572206d7573742068617665206044820152773737b716bd32b9379031b7b63630ba32b930b61023b0b4b760411b60648201526084016107d6565b6003546001600160a01b031633146107df573360405163118cdaa760e01b81526004016107d6919061279a565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600081116113b45760405162461bcd60e51b815260206004820152602660248201527f53746162696c697479506f6f6c3a20416d6f756e74206d757374206265206e6f6044820152656e2d7a65726f60d01b60648201526084016107d6565b60008160095461215291906126cb565b60098190556040518181529091507ffb502a10a442e29149185372d74b953304b5bc0a0d9d431c070905d3dfbc89e39060200160405180910390a16007546040516323b872dd60e01b81526001600160a01b0385811660048301523060248301526044820185905260009216906323b872dd906064016020604051808303816000875af11580156121e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220b9190612943565b9050806122695760405162461bcd60e51b815260206004820152602660248201527f4d55534420776173206e6f74207472616e736665727265642073756363657373604482015265333ab6363c9760d11b60648201526084016107d6565b50505050565b602081015160408201516060830151600e546000939291906001600160801b03600160801b909104811690821610156122ae576000935050505061164d565b600e5460009081906122ca9085906001600160801b03166129d9565b9050806001600160801b03166000036122fd5784600d54896122ec919061290a565b6122f69190612921565b9150612331565b806001600160801b031660010361232c57633b9aca0085600d548a612322919061290a565b6122ec9190612921565b600091505b61233f633b9aca0089612921565b8210156123545760009550505050505061164d565b509695505050505050565b6001600160a01b0381166123b55760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f2061646472657373000060448201526064016107d6565b803b806116de5760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f60448201526064016107d6565b600081600954612414919061287d565b60098190556040518181529091507ffb502a10a442e29149185372d74b953304b5bc0a0d9d431c070905d3dfbc89e39060200160405180910390a15050565b6001600160a01b0383166124f9576000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146124ae576040519150601f19603f3d011682016040523d82523d6000602084013e6124b3565b606091505b50509050806122695760405162461bcd60e51b815260206004820152601260248201527114d95b991a5b99c8109510c819985a5b195960721b60448201526064016107d6565b6115cb6001600160a01b03841683836115cb83846001600160a01b031663a9059cbb858560405160240161252e929190612890565b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505060006125706001600160a01b038416836125b5565b905080516000141580156125955750808060200190518101906125939190612943565b155b156115cb5782604051635274afe760e01b81526004016107d6919061279a565b606061164a8383600084600080856001600160a01b031684866040516125db91906129f9565b60006040518083038185875af1925050503d8060008114612618576040519150601f19603f3d011682016040523d82523d6000602084013e61261d565b606091505b509150915061262d868383612639565b925050505b9392505050565b60608261264e576126498261268c565b612632565b815115801561266557506001600160a01b0384163b155b156126855783604051639996b31560e01b81526004016107d6919061279a565b5080612632565b80511561269c5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561164d5761164d6126b5565b80356001600160801b03811681146126f557600080fd5b919050565b6000806040838503121561270d57600080fd5b612716836126de565b9150612724602084016126de565b90509250929050565b60006020828403121561273f57600080fd5b5035919050565b6001600160a01b03811681146113b457600080fd5b60006020828403121561276d57600080fd5b813561263281612746565b6000806040838503121561278b57600080fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b600080604083850312156127c157600080fd5b82356127cc81612746565b915060208301356127dc81612746565b809150509250929050565b600080600080600080600060e0888a03121561280257600080fd5b873561280d81612746565b9650602088013561281d81612746565b9550604088013561282d81612746565b9450606088013561283d81612746565b9350608088013561284d81612746565b925060a088013561285d81612746565b915060c088013561286d81612746565b8091505092959891949750929550565b8181038181111561164d5761164d6126b5565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03948516815260208101939093529083166040830152909116606082015260800190565b6000602082840312156128e657600080fd5b5051919050565b6000602082840312156128ff57600080fd5b815161263281612746565b808202811582820484141761164d5761164d6126b5565b60008261293e57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561295557600080fd5b8151801515811461263257600080fd5b6001600160801b03818116838216019080821115612985576129856126b5565b5092915050565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b6000602082840312156129ca57600080fd5b81516005811061263257600080fd5b6001600160801b03828116828216039080821115612985576129856126b5565b6000825160005b81811015612a1a5760208186018101518583015201612a00565b50600092019182525091905056fe47647c495a7db9471a1b024b3c6f7555a502a0de4b130d83a4d3c8f9cff25939bce78369dccab09eec1986f4d409ab09ffbb47d65423e5148fcf98411c5111c95745610f99463e502f9c3333585fe329b498e36b00b8c1bdfd8dc87dfe35b5eaa264697066735822122062d4768ba20e08b994f8fc40618db8f1d3c3462d31467172a9134654338f09d064736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17350,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "activePool",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IActivePool)17915"
      },
      {
        "astId": 17353,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "defaultPool",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IDefaultPool)18238"
      },
      {
        "astId": 17357,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPriceFeed)18655"
      },
      {
        "astId": 8,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 11150,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "collateralAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 11153,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "borrowerOperations",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IBorrowerOperations)18128"
      },
      {
        "astId": 11156,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "troveManager",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ITroveManager)19451"
      },
      {
        "astId": 11159,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "musd",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IMUSD)19777"
      },
      {
        "astId": 11162,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "sortedTroves",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(ISortedTroves)18787"
      },
      {
        "astId": 11164,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "totalMUSDDeposits",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 11166,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "collateral",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 11170,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "deposits",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11175,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "depositSnapshots",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_struct(Snapshots)11145_storage)"
      },
      {
        "astId": 11178,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "P",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 11180,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "currentScale",
        "offset": 0,
        "slot": "14",
        "type": "t_uint128"
      },
      {
        "astId": 11182,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "currentEpoch",
        "offset": 16,
        "slot": "14",
        "type": "t_uint128"
      },
      {
        "astId": 11188,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "epochToScaleToSum",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint128,t_mapping(t_uint128,t_uint256))"
      },
      {
        "astId": 11190,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "lastCollateralError_Offset",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 11192,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "lastMUSDLossError_Offset",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IActivePool)17915": {
        "encoding": "inplace",
        "label": "contract IActivePool",
        "numberOfBytes": "20"
      },
      "t_contract(IBorrowerOperations)18128": {
        "encoding": "inplace",
        "label": "contract IBorrowerOperations",
        "numberOfBytes": "20"
      },
      "t_contract(IDefaultPool)18238": {
        "encoding": "inplace",
        "label": "contract IDefaultPool",
        "numberOfBytes": "20"
      },
      "t_contract(IMUSD)19777": {
        "encoding": "inplace",
        "label": "contract IMUSD",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)18655": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(ISortedTroves)18787": {
        "encoding": "inplace",
        "label": "contract ISortedTroves",
        "numberOfBytes": "20"
      },
      "t_contract(ITroveManager)19451": {
        "encoding": "inplace",
        "label": "contract ITroveManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Snapshots)11145_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StabilityPool.Snapshots)",
        "numberOfBytes": "32",
        "value": "t_struct(Snapshots)11145_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint128,t_mapping(t_uint128,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint128",
        "label": "mapping(uint128 => mapping(uint128 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint128,t_uint256)"
      },
      "t_mapping(t_uint128,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint128",
        "label": "mapping(uint128 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Snapshots)11145_storage": {
        "encoding": "inplace",
        "label": "struct StabilityPool.Snapshots",
        "members": [
          {
            "astId": 11138,
            "contract": "contracts/StabilityPool.sol:StabilityPool",
            "label": "S",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11140,
            "contract": "contracts/StabilityPool.sol:StabilityPool",
            "label": "P",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11142,
            "contract": "contracts/StabilityPool.sol:StabilityPool",
            "label": "scale",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 11144,
            "contract": "contracts/StabilityPool.sol:StabilityPool",
            "label": "epoch",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}