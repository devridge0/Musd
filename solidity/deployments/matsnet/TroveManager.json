{
  "address": "0xe7AD467F1F27c1d98A08536c17ee812A33dF5B6c",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_activePoolAddress",
          "type": "address"
        }
      ],
      "name": "ActivePoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_baseRate",
          "type": "uint256"
        }
      ],
      "name": "BaseRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newBorrowerOperationsAddress",
          "type": "address"
        }
      ],
      "name": "BorrowerOperationsAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_collSurplusPoolAddress",
          "type": "address"
        }
      ],
      "name": "CollSurplusPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_defaultPoolAddress",
          "type": "address"
        }
      ],
      "name": "DefaultPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_gasPoolAddress",
          "type": "address"
        }
      ],
      "name": "GasPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_interestRateManagerAddress",
          "type": "address"
        }
      ],
      "name": "InterestRateManagerAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_L_Collateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_L_Principal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_L_Interest",
          "type": "uint256"
        }
      ],
      "name": "LTermsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lastFeeOpTime",
          "type": "uint256"
        }
      ],
      "name": "LastFeeOpTimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_liquidatedPrincipal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_liquidatedInterest",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_liquidatedColl",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_collGasCompensation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_gasCompensation",
          "type": "uint256"
        }
      ],
      "name": "Liquidation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newMUSDTokenAddress",
          "type": "address"
        }
      ],
      "name": "MUSDTokenAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pcvAddress",
          "type": "address"
        }
      ],
      "name": "PCVAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newPriceFeedAddress",
          "type": "address"
        }
      ],
      "name": "PriceFeedAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_attemptedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_actualAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_collateralSent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_collateralFee",
          "type": "uint256"
        }
      ],
      "name": "Redemption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sortedTrovesAddress",
          "type": "address"
        }
      ],
      "name": "SortedTrovesAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_stabilityPoolAddress",
          "type": "address"
        }
      ],
      "name": "StabilityPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalStakesSnapshot",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalCollateralSnapshot",
          "type": "uint256"
        }
      ],
      "name": "SystemSnapshotsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newTotalStakes",
          "type": "uint256"
        }
      ],
      "name": "TotalStakesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newIndex",
          "type": "uint256"
        }
      ],
      "name": "TroveIndexUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_coll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "operation",
          "type": "uint8"
        }
      ],
      "name": "TroveLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_L_Collateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_L_Principal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_L_Interest",
          "type": "uint256"
        }
      ],
      "name": "TroveSnapshotsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_principal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_interest",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_coll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "operation",
          "type": "uint8"
        }
      ],
      "name": "TroveUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BETA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BORROWING_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DECIMAL_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "L_Collateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "L_Interest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "L_Principal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BORROWING_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINUTE_DECAY_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_NET_DEBT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MUSD_GAS_COMPENSATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REDEMPTION_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "TroveOwners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "Troves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "coll",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestOwed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "internalType": "enum ITroveManager.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "interestRate",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "lastInterestUpdateTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxBorrowingCapacity",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "arrayIndex",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_100pct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activePool",
      "outputs": [
        {
          "internalType": "contract IActivePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "addTroveOwnerToArray",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "applyPendingRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_troveArray",
          "type": "address[]"
        }
      ],
      "name": "batchLiquidateTroves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperationsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "checkRecoveryMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "closeTrove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collSurplusPool",
      "outputs": [
        {
          "internalType": "contract ICollSurplusPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decayBaseRateFromBorrowing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collDecrease",
          "type": "uint256"
        }
      ],
      "name": "decreaseTroveColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debtDecrease",
          "type": "uint256"
        }
      ],
      "name": "decreaseTroveDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultPool",
      "outputs": [
        {
          "internalType": "contract IDefaultPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        }
      ],
      "name": "getBorrowingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        }
      ],
      "name": "getBorrowingFeeWithDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBorrowingRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBorrowingRateWithDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "getCurrentICR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getEntireDebtAndColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "coll",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingPrincipal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingInterest",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntireSystemColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemColl",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntireSystemDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getNominalICR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getPendingCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getPendingDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingPrincipal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingInterest",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_collateralDrawn",
          "type": "uint256"
        }
      ],
      "name": "getRedemptionFeeWithDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRedemptionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRedemptionRateWithDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "getTCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTroveColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTroveDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getTroveFromTroveOwnersArray",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTroveInterestOwed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTroveInterestRate",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTroveLastInterestUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTroveMaxBorrowingCapacity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTroveOwnersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTrovePrincipal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTroveStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTroveStatus",
      "outputs": [
        {
          "internalType": "enum ITroveManager.Status",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "hasPendingRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collIncrease",
          "type": "uint256"
        }
      ],
      "name": "increaseTroveColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debtIncrease",
          "type": "uint256"
        }
      ],
      "name": "increaseTroveDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRateManager",
      "outputs": [
        {
          "internalType": "contract IInterestRateManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastCollateralError_Redistribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastFeeOperationTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastInterestError_Redistribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastPrincipalError_Redistribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "musdToken",
      "outputs": [
        {
          "internalType": "contract IMUSD",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pcv",
      "outputs": [
        {
          "internalType": "contract IPCV",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_firstRedemptionHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_upperPartialRedemptionHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerPartialRedemptionHint",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_partialRedemptionHintNICR",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxIterations",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "redeemCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "removeStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardSnapshots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interest",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_activePoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrowerOperationsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collSurplusPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_defaultPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gasPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_interestRateManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_musdTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pcvAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sortedTrovesAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stabilityPoolAddress",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_rate",
          "type": "uint16"
        }
      ],
      "name": "setTroveInterestRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "setTroveLastInterestUpdateTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxBorrowingCapacity",
          "type": "uint256"
        }
      ],
      "name": "setTroveMaxBorrowingCapacity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "enum ITroveManager.Status",
          "name": "_status",
          "type": "uint8"
        }
      ],
      "name": "setTroveStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTroves",
      "outputs": [
        {
          "internalType": "contract ISortedTroves",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPool",
      "outputs": [
        {
          "internalType": "contract IStabilityPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCollateralSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakesSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateDefaultPoolInterest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "updateStakeAndTotalStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "updateSystemAndTroveInterest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "updateTroveRewardSnapshots",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfb7945fc5a56a6531e9bdba1a75810dbce85a947075edbb6439ec4e662b5e97f",
  "receipt": {
    "to": null,
    "from": "0x6e80164ea60673D64d5d6228beb684a1274Bb017",
    "contractAddress": "0xe7AD467F1F27c1d98A08536c17ee812A33dF5B6c",
    "transactionIndex": 0,
    "gasUsed": "5117571",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000400000000040000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000020000000000000000000000000000000000000000000000000000000000800000000000000000000000000020000000000000000000000000000000000000000000000000000020000000000000",
    "blockHash": "0x957822e9ee30a2acd2d01db7d4c1a9004ec5ec37e8e4704144ecc0977347cb30",
    "transactionHash": "0xfb7945fc5a56a6531e9bdba1a75810dbce85a947075edbb6439ec4e662b5e97f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 987100,
        "transactionHash": "0xfb7945fc5a56a6531e9bdba1a75810dbce85a947075edbb6439ec4e662b5e97f",
        "address": "0xe7AD467F1F27c1d98A08536c17ee812A33dF5B6c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006e80164ea60673d64d5d6228beb684a1274bb017"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x957822e9ee30a2acd2d01db7d4c1a9004ec5ec37e8e4704144ecc0977347cb30"
      }
    ],
    "blockNumber": 987100,
    "cumulativeGasUsed": "5117571",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8d0bf0a003873aec33a51656649ba1f0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"}],\"name\":\"ActivePoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_baseRate\",\"type\":\"uint256\"}],\"name\":\"BaseRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newBorrowerOperationsAddress\",\"type\":\"address\"}],\"name\":\"BorrowerOperationsAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collSurplusPoolAddress\",\"type\":\"address\"}],\"name\":\"CollSurplusPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_defaultPoolAddress\",\"type\":\"address\"}],\"name\":\"DefaultPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_gasPoolAddress\",\"type\":\"address\"}],\"name\":\"GasPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_interestRateManagerAddress\",\"type\":\"address\"}],\"name\":\"InterestRateManagerAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_Collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_Principal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_Interest\",\"type\":\"uint256\"}],\"name\":\"LTermsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lastFeeOpTime\",\"type\":\"uint256\"}],\"name\":\"LastFeeOpTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquidatedPrincipal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquidatedInterest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquidatedColl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collGasCompensation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_gasCompensation\",\"type\":\"uint256\"}],\"name\":\"Liquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newMUSDTokenAddress\",\"type\":\"address\"}],\"name\":\"MUSDTokenAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pcvAddress\",\"type\":\"address\"}],\"name\":\"PCVAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newPriceFeedAddress\",\"type\":\"address\"}],\"name\":\"PriceFeedAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_attemptedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_actualAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collateralSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collateralFee\",\"type\":\"uint256\"}],\"name\":\"Redemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"}],\"name\":\"SortedTrovesAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"}],\"name\":\"StabilityPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalStakesSnapshot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalCollateralSnapshot\",\"type\":\"uint256\"}],\"name\":\"SystemSnapshotsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalStakes\",\"type\":\"uint256\"}],\"name\":\"TotalStakesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newIndex\",\"type\":\"uint256\"}],\"name\":\"TroveIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"TroveLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_Collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_Principal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_Interest\",\"type\":\"uint256\"}],\"name\":\"TroveSnapshotsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_interest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"TroveUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BETA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BORROWING_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L_Collateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L_Interest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L_Principal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BORROWING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINUTE_DECAY_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_NET_DEBT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MUSD_GAS_COMPENSATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEMPTION_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TroveOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Troves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestOwed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"enum ITroveManager.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"interestRate\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"lastInterestUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBorrowingCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"arrayIndex\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_100pct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePool\",\"outputs\":[{\"internalType\":\"contract IActivePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"addTroveOwnerToArray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"applyPendingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_troveArray\",\"type\":\"address[]\"}],\"name\":\"batchLiquidateTroves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperationsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"checkRecoveryMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"closeTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collSurplusPool\",\"outputs\":[{\"internalType\":\"contract ICollSurplusPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decayBaseRateFromBorrowing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collDecrease\",\"type\":\"uint256\"}],\"name\":\"decreaseTroveColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtDecrease\",\"type\":\"uint256\"}],\"name\":\"decreaseTroveDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPool\",\"outputs\":[{\"internalType\":\"contract IDefaultPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"}],\"name\":\"getBorrowingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"}],\"name\":\"getBorrowingFeeWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowingRateWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"getCurrentICR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getEntireDebtAndColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingPrincipal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingInterest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemColl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getNominalICR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getPendingCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getPendingDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingPrincipal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingInterest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralDrawn\",\"type\":\"uint256\"}],\"name\":\"getRedemptionFeeWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedemptionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedemptionRateWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"getTCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTroveFromTroveOwnersArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveInterestOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveInterestRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveLastInterestUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveMaxBorrowingCapacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTroveOwnersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTrovePrincipal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveStatus\",\"outputs\":[{\"internalType\":\"enum ITroveManager.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"hasPendingRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collIncrease\",\"type\":\"uint256\"}],\"name\":\"increaseTroveColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtIncrease\",\"type\":\"uint256\"}],\"name\":\"increaseTroveDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateManager\",\"outputs\":[{\"internalType\":\"contract IInterestRateManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCollateralError_Redistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFeeOperationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastInterestError_Redistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPrincipalError_Redistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"musdToken\",\"outputs\":[{\"internalType\":\"contract IMUSD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pcv\",\"outputs\":[{\"internalType\":\"contract IPCV\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_firstRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_upperPartialRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerPartialRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_partialRedemptionHintNICR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxIterations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"}],\"name\":\"redeemCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"removeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardSnapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collSurplusPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gasPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_interestRateManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_musdTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pcvAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_rate\",\"type\":\"uint16\"}],\"name\":\"setTroveInterestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"setTroveLastInterestUpdateTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxBorrowingCapacity\",\"type\":\"uint256\"}],\"name\":\"setTroveMaxBorrowingCapacity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"enum ITroveManager.Status\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"setTroveStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTroves\",\"outputs\":[{\"internalType\":\"contract ISortedTroves\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPool\",\"outputs\":[{\"internalType\":\"contract IStabilityPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollateralSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakesSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateDefaultPoolInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"updateStakeAndTotalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"updateSystemAndTroveInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"updateTroveRewardSnapshots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TroveManager.sol\":\"TroveManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/TroveManager.sol\":{\"content\":\"// slither-disable-start reentrancy-benign\\n// slither-disable-start reentrancy-events\\n// slither-disable-start reentrancy-no-eth\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"./dependencies/CheckContract.sol\\\";\\nimport \\\"./dependencies/LiquityBase.sol\\\";\\nimport \\\"./interfaces/ICollSurplusPool.sol\\\";\\nimport \\\"./interfaces/IGasPool.sol\\\";\\nimport \\\"./interfaces/IInterestRateManager.sol\\\";\\nimport \\\"./interfaces/IPCV.sol\\\";\\nimport \\\"./interfaces/ISortedTroves.sol\\\";\\nimport \\\"./interfaces/IStabilityPool.sol\\\";\\nimport \\\"./interfaces/ITroveManager.sol\\\";\\nimport \\\"./token/IMUSD.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract TroveManager is LiquityBase, Ownable, CheckContract, ITroveManager {\\n    enum TroveManagerOperation {\\n        applyPendingRewards,\\n        liquidateInNormalMode,\\n        liquidateInRecoveryMode,\\n        redeemCollateral\\n    }\\n\\n    // Store the necessary data for a trove\\n    struct Trove {\\n        uint256 coll;\\n        uint256 principal;\\n        uint256 interestOwed;\\n        uint256 stake;\\n        Status status;\\n        uint16 interestRate;\\n        uint256 lastInterestUpdateTime;\\n        uint256 maxBorrowingCapacity;\\n        uint128 arrayIndex;\\n    }\\n\\n    // Object containing the collateral and mUSD snapshots for a given active trove\\n    struct RewardSnapshot {\\n        uint256 collateral;\\n        uint256 principal;\\n        uint256 interest;\\n    }\\n\\n    struct LocalVariables_OuterLiquidationFunction {\\n        uint256 price;\\n        uint256 mUSDInStabPool;\\n        bool recoveryModeAtStart;\\n        uint256 liquidatedColl;\\n    }\\n\\n    struct LocalVariables_redeemCollateralFromTrove {\\n        uint256 newDebt;\\n        uint256 newColl;\\n        uint256 upperBoundNICR;\\n        uint256 newNICR;\\n    }\\n\\n    struct LocalVariables_InnerSingleLiquidateFunction {\\n        uint256 collToLiquidate;\\n        uint256 pendingColl;\\n        uint256 pendingPrincipal;\\n        uint256 pendingInterest;\\n    }\\n\\n    struct LiquidationTotals {\\n        uint256 totalCollInSequence;\\n        uint256 totalPrincipalInSequence;\\n        uint256 totalInterestInSequence;\\n        uint256 totalCollGasCompensation;\\n        uint256 totalMUSDGasCompensation;\\n        uint256 totalDebtToOffset;\\n        uint256 totalCollToSendToSP;\\n        uint256 totalPrincipalToRedistribute;\\n        uint256 totalInterestToRedistribute;\\n        uint256 totalCollToRedistribute;\\n        uint256 totalCollSurplus;\\n    }\\n\\n    struct LocalVariables_LiquidationSequence {\\n        uint256 remainingMUSDInStabPool;\\n        uint256 i;\\n        uint256 ICR;\\n        address user;\\n        bool backToNormalMode;\\n        uint256 entireSystemDebt;\\n        uint256 entireSystemColl;\\n    }\\n\\n    struct LiquidationValues {\\n        uint256 entireTrovePrincipal;\\n        uint256 entireTroveInterest;\\n        uint256 entireTroveColl;\\n        uint256 collGasCompensation;\\n        uint256 mUSDGasCompensation;\\n        uint256 debtToOffset;\\n        uint256 collToSendToSP;\\n        uint256 principalToRedistribute;\\n        uint256 interestToRedistribute;\\n        uint256 collToRedistribute;\\n        uint256 collSurplus;\\n    }\\n\\n    struct ContractsCache {\\n        IActivePool activePool;\\n        IDefaultPool defaultPool;\\n        IMUSD musdToken;\\n        IPCV pcv;\\n        ISortedTroves sortedTroves;\\n        ICollSurplusPool collSurplusPool;\\n        address gasPoolAddress;\\n    }\\n\\n    struct SingleRedemptionValues {\\n        uint256 mUSDLot;\\n        uint256 collateralLot;\\n        bool cancelledPartial;\\n    }\\n\\n    struct RedemptionTotals {\\n        uint256 remainingMUSD;\\n        uint256 totalMUSDToRedeem;\\n        uint256 totalCollateralDrawn;\\n        uint256 collateralFee;\\n        uint256 collateralToSendToRedeemer;\\n        uint256 decayedBaseRate;\\n        uint256 price;\\n        uint256 totalDebtAtStart;\\n    }\\n\\n    // --- Connected contract declarations ---\\n\\n    address public borrowerOperationsAddress;\\n\\n    IStabilityPool public override stabilityPool;\\n\\n    address public gasPoolAddress;\\n\\n    ICollSurplusPool public collSurplusPool;\\n\\n    IMUSD public musdToken;\\n\\n    IPCV public override pcv;\\n\\n    // A doubly linked list of Troves, sorted by their sorted by their collateral ratios\\n    ISortedTroves public sortedTroves;\\n\\n    IInterestRateManager public interestRateManager;\\n\\n    // --- Data structures ---\\n\\n    /*\\n     * Half-life of 12h. 12h = 720 min\\n     * (1/2) = d^720 => d = (1/2)^(1/720)\\n     */\\n    uint256 public constant MINUTE_DECAY_FACTOR = 999037758833783000;\\n    uint256 public constant REDEMPTION_FEE_FLOOR =\\n        (DECIMAL_PRECISION * 5) / 1000; // 0.5%\\n    uint256 public constant MAX_BORROWING_FEE = (DECIMAL_PRECISION * 5) / 100; // 5%\\n\\n    /*\\n     * BETA: 18 digit decimal. Parameter by which to divide the redeemed fraction, in order to calc the new base rate from a redemption.\\n     * Corresponds to (1 / ALPHA) in the white paper.\\n     */\\n    uint256 public constant BETA = 2;\\n\\n    uint256 public baseRate;\\n\\n    // The timestamp of the latest fee operation (redemption or new mUSD issuance)\\n    uint256 public lastFeeOperationTime;\\n\\n    mapping(address => Trove) public Troves;\\n\\n    uint256 public totalStakes;\\n\\n    // Snapshot of the value of totalStakes, taken immediately after the latest liquidation\\n    uint256 public totalStakesSnapshot;\\n\\n    // Snapshot of the total collateral across the ActivePool and DefaultPool, immediately after the latest liquidation.\\n    uint256 public totalCollateralSnapshot;\\n\\n    /*\\n     * L_Collateral, L_Principal, and L_Interest track the sums of accumulated\\n     * pending liquidations per unit staked. During its lifetime, each stake\\n     * earns:\\n     *\\n     * An collateral gain of ( stake * [L_Collateral - L_Collateral(0)] )\\n     * A principal increase  of ( stake * [L_Principal - L_Principal(0)] )\\n     * An interest increase  of ( stake * [L_Interest - L_Interest(0)] )\\n     *\\n     * Where L_Collateral(0), L_Principal(0), and L_Interest(0) are snapshots of\\n     * L_Collateral, L_Principal, and L_Interest for the active Trove taken at the\\n     * instant the stake was made\\n     */\\n    uint256 public L_Collateral;\\n    uint256 public L_Principal;\\n    uint256 public L_Interest;\\n\\n    // Array of all active trove addresses - used to to compute an approximate hint off-chain, for the sorted list insertion\\n    // slither-disable-next-line similar-names\\n    address[] public TroveOwners;\\n\\n    // Error trackers for the trove redistribution calculation\\n    uint256 public lastCollateralError_Redistribution;\\n    uint256 public lastPrincipalError_Redistribution;\\n    uint256 public lastInterestError_Redistribution;\\n\\n    // Map addresses with active troves to their RewardSnapshot\\n    mapping(address => RewardSnapshot) public rewardSnapshots;\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    function setAddresses(\\n        address _activePoolAddress,\\n        address _borrowerOperationsAddress,\\n        address _collSurplusPoolAddress,\\n        address _defaultPoolAddress,\\n        address _gasPoolAddress,\\n        address _interestRateManagerAddress,\\n        address _musdTokenAddress,\\n        address _pcvAddress,\\n        address _priceFeedAddress,\\n        address _sortedTrovesAddress,\\n        address _stabilityPoolAddress\\n    ) external override onlyOwner {\\n        checkContract(_activePoolAddress);\\n        checkContract(_borrowerOperationsAddress);\\n        checkContract(_collSurplusPoolAddress);\\n        checkContract(_defaultPoolAddress);\\n        checkContract(_gasPoolAddress);\\n        checkContract(_musdTokenAddress);\\n        checkContract(_pcvAddress);\\n        checkContract(_priceFeedAddress);\\n        checkContract(_sortedTrovesAddress);\\n        checkContract(_stabilityPoolAddress);\\n        checkContract(_interestRateManagerAddress);\\n\\n        // slither-disable-next-line missing-zero-check\\n        borrowerOperationsAddress = _borrowerOperationsAddress;\\n        activePool = IActivePool(_activePoolAddress);\\n        defaultPool = IDefaultPool(_defaultPoolAddress);\\n        stabilityPool = IStabilityPool(_stabilityPoolAddress);\\n        // slither-disable-next-line missing-zero-check\\n        gasPoolAddress = _gasPoolAddress;\\n        collSurplusPool = ICollSurplusPool(_collSurplusPoolAddress);\\n        priceFeed = IPriceFeed(_priceFeedAddress);\\n        musdToken = IMUSD(_musdTokenAddress);\\n        sortedTroves = ISortedTroves(_sortedTrovesAddress);\\n        pcv = IPCV(_pcvAddress);\\n        interestRateManager = IInterestRateManager(_interestRateManagerAddress);\\n\\n        emit BorrowerOperationsAddressChanged(_borrowerOperationsAddress);\\n        emit ActivePoolAddressChanged(_activePoolAddress);\\n        emit DefaultPoolAddressChanged(_defaultPoolAddress);\\n        emit StabilityPoolAddressChanged(_stabilityPoolAddress);\\n        emit GasPoolAddressChanged(_gasPoolAddress);\\n        emit CollSurplusPoolAddressChanged(_collSurplusPoolAddress);\\n        emit PriceFeedAddressChanged(_priceFeedAddress);\\n        emit MUSDTokenAddressChanged(_musdTokenAddress);\\n        emit SortedTrovesAddressChanged(_sortedTrovesAddress);\\n        emit PCVAddressChanged(_pcvAddress);\\n\\n        renounceOwnership();\\n    }\\n\\n    function liquidate(address _borrower) external override {\\n        _requireTroveIsActive(_borrower);\\n\\n        address[] memory borrowers = new address[](1);\\n        borrowers[0] = _borrower;\\n        batchLiquidateTroves(borrowers);\\n    }\\n\\n    /* Send _amount mUSD to the system and redeem the corresponding amount of collateral from as many Troves as are needed to fill the redemption\\n     * request.  Applies pending rewards to a Trove before reducing its debt and coll.\\n     *\\n     * Note that if _amount is very large, this function can run out of gas, specially if traversed troves are small. This can be easily avoided by\\n     * splitting the total _amount in appropriate chunks and calling the function multiple times.\\n     *\\n     * Param `_maxIterations` can also be provided, so the loop through Troves is capped (if it\\u2019s zero, it will be ignored).This makes it easier to\\n     * avoid OOG for the frontend, as only knowing approximately the average cost of an iteration is enough, without needing to know the \\u201ctopology\\u201d\\n     * of the trove list. It also avoids the need to set the cap in stone in the contract, nor doing gas calculations, as both gas price and opcode\\n     * costs can vary.\\n     *\\n     * All Troves that are redeemed from -- with the likely exception of the last one -- will end up with no debt left, therefore they will be closed.\\n     * If the last Trove does have some remaining debt, it has a finite ICR, and the reinsertion could be anywhere in the list, therefore it requires a hint.\\n     * A frontend should use getRedemptionHints() to calculate what the ICR of this Trove will be after redemption, and pass a hint for its position\\n     * in the sortedTroves list along with the ICR value that the hint was found for.\\n     *\\n     * If another transaction modifies the list between calling getRedemptionHints() and passing the hints to redeemCollateral(), it\\n     * is very likely that the last (partially) redeemed Trove would end up with a different ICR than what the hint is for. In this case the\\n     * redemption will stop after the last completely redeemed Trove and the sender will keep the remaining mUSD amount, which they can attempt\\n     * to redeem later.\\n     */\\n    function redeemCollateral(\\n        uint256 _amount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint256 _partialRedemptionHintNICR,\\n        uint256 _maxIterations,\\n        uint256 _maxFeePercentage\\n    ) external override {\\n        ContractsCache memory contractsCache = ContractsCache(\\n            activePool,\\n            defaultPool,\\n            musdToken,\\n            pcv,\\n            sortedTroves,\\n            collSurplusPool,\\n            gasPoolAddress\\n        );\\n        // slither-disable-next-line uninitialized-local\\n        RedemptionTotals memory totals;\\n\\n        _requireValidMaxFeePercentage(_maxFeePercentage);\\n        totals.price = priceFeed.fetchPrice();\\n        _requireTCRoverMCR(totals.price);\\n        _requireAmountGreaterThanZero(_amount);\\n        _requireMUSDBalanceCoversRedemption(\\n            contractsCache.musdToken,\\n            msg.sender,\\n            _amount\\n        );\\n\\n        totals.totalDebtAtStart = getEntireSystemDebt();\\n        totals.remainingMUSD = _amount;\\n        address currentBorrower;\\n\\n        if (\\n            _isValidFirstRedemptionHint(\\n                contractsCache.sortedTroves,\\n                _firstRedemptionHint,\\n                totals.price\\n            )\\n        ) {\\n            currentBorrower = _firstRedemptionHint;\\n        } else {\\n            currentBorrower = contractsCache.sortedTroves.getLast();\\n            // Find the first trove with ICR >= MCR\\n            while (\\n                currentBorrower != address(0) &&\\n                getCurrentICR(currentBorrower, totals.price) < MCR\\n            ) {\\n                // slither-disable-next-line calls-loop\\n                currentBorrower = contractsCache.sortedTroves.getPrev(\\n                    currentBorrower\\n                );\\n            }\\n        }\\n\\n        // Loop through the Troves starting from the one with lowest collateral ratio until _amount of mUSD is exchanged for collateral\\n        if (_maxIterations == 0) {\\n            _maxIterations = type(uint256).max;\\n        }\\n\\n        updateDefaultPoolInterest();\\n\\n        while (\\n            currentBorrower != address(0) &&\\n            totals.remainingMUSD > 0 &&\\n            _maxIterations > 0\\n        ) {\\n            _maxIterations--;\\n            // Save the address of the Trove preceding the current one, before potentially modifying the list\\n            // slither-disable-next-line calls-loop\\n            address nextUserToCheck = contractsCache.sortedTroves.getPrev(\\n                currentBorrower\\n            );\\n\\n            _applyPendingRewards(\\n                contractsCache.activePool,\\n                contractsCache.defaultPool,\\n                currentBorrower\\n            );\\n\\n            SingleRedemptionValues\\n                memory singleRedemption = _redeemCollateralFromTrove(\\n                    contractsCache,\\n                    currentBorrower,\\n                    totals.remainingMUSD,\\n                    totals.price,\\n                    _upperPartialRedemptionHint,\\n                    _lowerPartialRedemptionHint,\\n                    _partialRedemptionHintNICR\\n                );\\n\\n            if (singleRedemption.cancelledPartial) break; // Partial redemption was cancelled (out-of-date hint, or new net debt < minimum), therefore we could not redeem from the last Trove\\n\\n            totals.totalMUSDToRedeem += singleRedemption.mUSDLot;\\n            totals.totalCollateralDrawn += singleRedemption.collateralLot;\\n\\n            totals.remainingMUSD -= singleRedemption.mUSDLot;\\n            currentBorrower = nextUserToCheck;\\n        }\\n        require(\\n            totals.totalCollateralDrawn > 0,\\n            \\\"TroveManager: Unable to redeem any amount\\\"\\n        );\\n\\n        // Decay the baseRate due to time passed, and then increase it according to the size of this redemption.\\n        // Use the saved total mUSD supply value, from before it was reduced by the redemption.\\n        _updateBaseRateFromRedemption(\\n            totals.totalCollateralDrawn,\\n            totals.price,\\n            totals.totalDebtAtStart\\n        );\\n\\n        // Calculate the collateral fee\\n        totals.collateralFee = _getRedemptionFee(totals.totalCollateralDrawn);\\n\\n        _requireUserAcceptsFee(\\n            totals.collateralFee,\\n            totals.totalCollateralDrawn,\\n            _maxFeePercentage\\n        );\\n\\n        // Send the collateral fee to the PCV contract\\n        contractsCache.activePool.sendCollateral(\\n            address(contractsCache.pcv),\\n            totals.collateralFee\\n        );\\n\\n        totals.collateralToSendToRedeemer =\\n            totals.totalCollateralDrawn -\\n            totals.collateralFee;\\n\\n        emit Redemption(\\n            _amount,\\n            totals.totalMUSDToRedeem,\\n            totals.totalCollateralDrawn,\\n            totals.collateralFee\\n        );\\n\\n        // Burn the total mUSD that is cancelled with debt, and send the redeemed collateral to msg.sender\\n        contractsCache.musdToken.burn(msg.sender, totals.totalMUSDToRedeem);\\n        // Update Active Pool mUSD, and send collateral to account\\n        contractsCache.activePool.decreaseDebt(totals.totalMUSDToRedeem, 0);\\n        contractsCache.activePool.sendCollateral(\\n            msg.sender,\\n            totals.collateralToSendToRedeemer\\n        );\\n    }\\n\\n    function updateStakeAndTotalStakes(\\n        address _borrower\\n    ) external override returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        return _updateStakeAndTotalStakes(_borrower);\\n    }\\n\\n    // Update borrower's snapshots of L_Collateral, L_Principal, and L_Interest\\n    // to reflect the current values\\n    function updateTroveRewardSnapshots(address _borrower) external override {\\n        _requireCallerIsBorrowerOperations();\\n        return _updateTroveRewardSnapshots(_borrower);\\n    }\\n\\n    // Push the owner's address to the Trove owners list, and record the corresponding array index on the Trove struct\\n    function addTroveOwnerToArray(\\n        address _borrower\\n    ) external override returns (uint256 index) {\\n        _requireCallerIsBorrowerOperations();\\n        return _addTroveOwnerToArray(_borrower);\\n    }\\n\\n    function applyPendingRewards(address _borrower) external override {\\n        _requireCallerIsBorrowerOperations();\\n\\n        updateDefaultPoolInterest();\\n        return _applyPendingRewards(activePool, defaultPool, _borrower);\\n    }\\n\\n    function closeTrove(address _borrower) external override {\\n        _requireCallerIsBorrowerOperations();\\n        return _closeTrove(_borrower, Status.closedByOwner);\\n    }\\n\\n    function removeStake(address _borrower) external override {\\n        _requireCallerIsBorrowerOperations();\\n        return _removeStake(_borrower);\\n    }\\n\\n    // Updates the baseRate state variable based on time elapsed since the last redemption or borrowing operation.\\n    function decayBaseRateFromBorrowing() external override {\\n        _requireCallerIsBorrowerOperations();\\n\\n        uint256 decayedBaseRate = _calcDecayedBaseRate();\\n        assert(decayedBaseRate <= DECIMAL_PRECISION); // The baseRate can decay to 0\\n\\n        baseRate = decayedBaseRate;\\n        emit BaseRateUpdated(decayedBaseRate);\\n\\n        _updateLastFeeOpTime();\\n    }\\n\\n    // --- Trove property setters, called by BorrowerOperations ---\\n\\n    function setTroveStatus(\\n        address _borrower,\\n        Status _status\\n    ) external override {\\n        _requireCallerIsBorrowerOperations();\\n        Troves[_borrower].status = _status;\\n    }\\n\\n    function increaseTroveColl(\\n        address _borrower,\\n        uint256 _collIncrease\\n    ) external override returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint256 newColl = Troves[_borrower].coll + _collIncrease;\\n        Troves[_borrower].coll = newColl;\\n        return newColl;\\n    }\\n\\n    function decreaseTroveColl(\\n        address _borrower,\\n        uint256 _collDecrease\\n    ) external override returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint256 newColl = Troves[_borrower].coll - _collDecrease;\\n        Troves[_borrower].coll = newColl;\\n        return newColl;\\n    }\\n\\n    function setTroveMaxBorrowingCapacity(\\n        address _borrower,\\n        uint256 _maxBorrowingCapacity\\n    ) external override {\\n        _requireCallerIsBorrowerOperations();\\n        Troves[_borrower].maxBorrowingCapacity = _maxBorrowingCapacity;\\n    }\\n\\n    function increaseTroveDebt(\\n        address _borrower,\\n        uint256 _debtIncrease\\n    ) external override returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint256 newDebt = Troves[_borrower].principal + _debtIncrease;\\n        Troves[_borrower].principal = newDebt;\\n        return newDebt;\\n    }\\n\\n    function decreaseTroveDebt(\\n        address _borrower,\\n        uint256 _debtDecrease\\n    ) external override returns (uint256, uint256) {\\n        _requireCallerIsBorrowerOperations();\\n        _updateTroveDebt(_borrower, _debtDecrease);\\n        return (Troves[_borrower].principal, Troves[_borrower].interestOwed);\\n    }\\n\\n    function setTroveInterestRate(address _borrower, uint16 _rate) external {\\n        _requireCallerIsBorrowerOperations();\\n        Troves[_borrower].interestRate = _rate;\\n    }\\n\\n    function setTroveLastInterestUpdateTime(\\n        address _borrower,\\n        uint256 _timestamp\\n    ) external {\\n        _requireCallerIsBorrowerOperations();\\n        Troves[_borrower].lastInterestUpdateTime = _timestamp;\\n    }\\n\\n    function getTroveOwnersCount() external view override returns (uint) {\\n        return TroveOwners.length;\\n    }\\n\\n    function getTroveFromTroveOwnersArray(\\n        uint256 _index\\n    ) external view override returns (address) {\\n        return TroveOwners[_index];\\n    }\\n\\n    function getNominalICR(\\n        address _borrower\\n    ) external view override returns (uint) {\\n        (\\n            uint256 currentCollateral,\\n            uint256 currentDebt\\n        ) = _getCurrentTroveAmounts(_borrower);\\n\\n        uint256 NICR = LiquityMath._computeNominalCR(\\n            currentCollateral,\\n            currentDebt\\n        );\\n        return NICR;\\n    }\\n\\n    function getRedemptionFeeWithDecay(\\n        uint256 _collateralDrawn\\n    ) external view override returns (uint) {\\n        return\\n            _calcRedemptionFee(getRedemptionRateWithDecay(), _collateralDrawn);\\n    }\\n\\n    // --- Borrowing fee functions ---\\n\\n    function getBorrowingFee(\\n        uint256 _debt\\n    ) external view override returns (uint) {\\n        return _calcBorrowingFee(getBorrowingRate(), _debt);\\n    }\\n\\n    function getBorrowingFeeWithDecay(\\n        uint256 _debt\\n    ) external view override returns (uint) {\\n        return _calcBorrowingFee(getBorrowingRateWithDecay(), _debt);\\n    }\\n\\n    function getTroveStatus(\\n        address _borrower\\n    ) external view override returns (Status) {\\n        return Troves[_borrower].status;\\n    }\\n\\n    function getTroveStake(\\n        address _borrower\\n    ) external view override returns (uint) {\\n        return Troves[_borrower].stake;\\n    }\\n\\n    function getTroveDebt(\\n        address _borrower\\n    ) external view override returns (uint) {\\n        return _getTotalDebt(_borrower);\\n    }\\n\\n    function getTrovePrincipal(address _borrower) external view returns (uint) {\\n        return Troves[_borrower].principal;\\n    }\\n\\n    function getTroveInterestRate(\\n        address _borrower\\n    ) external view returns (uint16) {\\n        return Troves[_borrower].interestRate;\\n    }\\n\\n    function getTroveLastInterestUpdateTime(\\n        address _borrower\\n    ) external view returns (uint) {\\n        return Troves[_borrower].lastInterestUpdateTime;\\n    }\\n\\n    function getTroveInterestOwed(\\n        address _borrower\\n    ) external view returns (uint256) {\\n        return Troves[_borrower].interestOwed;\\n    }\\n\\n    function getTroveColl(\\n        address _borrower\\n    ) external view override returns (uint) {\\n        return Troves[_borrower].coll;\\n    }\\n\\n    function getTCR(uint256 _price) external view override returns (uint) {\\n        return _getTCR(_price);\\n    }\\n\\n    function getTroveMaxBorrowingCapacity(\\n        address _borrower\\n    ) external view returns (uint256) {\\n        return Troves[_borrower].maxBorrowingCapacity;\\n    }\\n\\n    function checkRecoveryMode(\\n        uint256 _price\\n    ) external view override returns (bool) {\\n        return _checkRecoveryMode(_price);\\n    }\\n\\n    function updateDefaultPoolInterest() public {\\n        if (totalStakes > 0) {\\n            // solhint-disable not-rely-on-time\\n            uint256 interest = interestRateManager.calculateInterestOwed(\\n                defaultPool.getPrincipal(),\\n                interestRateManager.interestRate(),\\n                defaultPool.getLastInterestUpdatedTime(),\\n                block.timestamp\\n            );\\n            // solhint-enable not-rely-on-time\\n\\n            // slither-disable-start divide-before-multiply\\n            uint256 interestNumerator = interest *\\n                DECIMAL_PRECISION +\\n                lastInterestError_Redistribution;\\n\\n            uint256 pendingInterestPerUnitStaked = interestNumerator /\\n                totalStakes;\\n\\n            lastInterestError_Redistribution =\\n                interestNumerator -\\n                (pendingInterestPerUnitStaked * totalStakes);\\n            // slither-disable-end divide-before-multiply\\n\\n            L_Interest += pendingInterestPerUnitStaked;\\n\\n            defaultPool.increaseDebt(0, interest);\\n            emit LTermsUpdated(L_Collateral, L_Principal, L_Interest);\\n        }\\n    }\\n\\n    function updateSystemAndTroveInterest(address _borrower) public {\\n        Trove storage trove = Troves[_borrower];\\n        _updateSystemInterest(trove.interestRate);\\n        trove.interestOwed += interestRateManager.calculateInterestOwed(\\n            trove.principal,\\n            trove.interestRate,\\n            trove.lastInterestUpdateTime,\\n            block.timestamp\\n        );\\n        trove.lastInterestUpdateTime = block.timestamp;\\n    }\\n\\n    /*\\n     * Attempt to liquidate a custom list of troves provided by the caller.\\n     */\\n    function batchLiquidateTroves(\\n        address[] memory _troveArray\\n    ) public override {\\n        require(\\n            _troveArray.length != 0,\\n            \\\"TroveManager: Calldata address array must not be empty\\\"\\n        );\\n\\n        for (uint i = 0; i < _troveArray.length; i++) {\\n            address borrower = _troveArray[i];\\n            updateSystemAndTroveInterest(borrower);\\n        }\\n\\n        IActivePool activePoolCached = activePool;\\n        IDefaultPool defaultPoolCached = defaultPool;\\n        IStabilityPool stabilityPoolCached = stabilityPool;\\n\\n        // slither-disable-next-line uninitialized-local\\n        LocalVariables_OuterLiquidationFunction memory vars;\\n        // slither-disable-next-line uninitialized-local\\n        LiquidationTotals memory totals;\\n\\n        vars.price = priceFeed.fetchPrice();\\n        vars.mUSDInStabPool = stabilityPoolCached.getTotalMUSDDeposits();\\n        vars.recoveryModeAtStart = _checkRecoveryMode(vars.price);\\n\\n        updateDefaultPoolInterest();\\n\\n        // Perform the appropriate liquidation sequence - tally values and obtain their totals.\\n        if (vars.recoveryModeAtStart) {\\n            totals = _getTotalFromBatchLiquidateRecoveryMode(\\n                activePoolCached,\\n                defaultPoolCached,\\n                vars.price,\\n                vars.mUSDInStabPool,\\n                _troveArray\\n            );\\n        } else {\\n            //  if !vars.recoveryModeAtStart\\n            totals = _getTotalsFromBatchLiquidateNormalMode(\\n                activePoolCached,\\n                defaultPoolCached,\\n                vars.price,\\n                vars.mUSDInStabPool,\\n                _troveArray\\n            );\\n        }\\n\\n        require(\\n            totals.totalPrincipalInSequence > 0,\\n            \\\"TroveManager: nothing to liquidate\\\"\\n        );\\n\\n        // Move liquidated collateral and debt to the appropriate pools\\n        stabilityPoolCached.offset(\\n            totals.totalDebtToOffset,\\n            totals.totalCollToSendToSP\\n        );\\n        _redistributeDebtAndColl(\\n            activePoolCached,\\n            defaultPoolCached,\\n            totals.totalPrincipalToRedistribute,\\n            totals.totalInterestToRedistribute,\\n            totals.totalCollToRedistribute\\n        );\\n        if (totals.totalCollSurplus > 0) {\\n            activePoolCached.sendCollateral(\\n                address(collSurplusPool),\\n                totals.totalCollSurplus\\n            );\\n        }\\n\\n        // Update system snapshots\\n        _updateSystemSnapshotsExcludeCollRemainder(\\n            activePoolCached,\\n            totals.totalCollGasCompensation\\n        );\\n\\n        vars.liquidatedColl =\\n            totals.totalCollInSequence -\\n            totals.totalCollGasCompensation -\\n            totals.totalCollSurplus;\\n        emit Liquidation(\\n            totals.totalPrincipalInSequence,\\n            totals.totalInterestInSequence,\\n            vars.liquidatedColl,\\n            totals.totalCollGasCompensation,\\n            totals.totalMUSDGasCompensation\\n        );\\n\\n        // Send gas compensation to caller\\n        _sendGasCompensation(\\n            activePoolCached,\\n            msg.sender,\\n            totals.totalMUSDGasCompensation,\\n            totals.totalCollGasCompensation\\n        );\\n    }\\n\\n    function getRedemptionRateWithDecay() public view override returns (uint) {\\n        return _calcRedemptionRate(_calcDecayedBaseRate());\\n    }\\n\\n    function getCurrentICR(\\n        address _borrower,\\n        uint256 _price\\n    ) public view override returns (uint) {\\n        (\\n            uint256 currentCollateral,\\n            uint256 currentDebt\\n        ) = _getCurrentTroveAmounts(_borrower);\\n        uint256 ICR = LiquityMath._computeCR(\\n            currentCollateral,\\n            currentDebt,\\n            _price\\n        );\\n        return ICR;\\n    }\\n\\n    function hasPendingRewards(\\n        address _borrower\\n    ) public view override returns (bool) {\\n        /*\\n         * A Trove has pending rewards if its snapshot is less than the current rewards per-unit-staked sum:\\n         * this indicates that rewards have occured since the snapshot was made, and the user therefore has\\n         * pending rewards\\n         */\\n        if (Troves[_borrower].status != Status.active) {\\n            return false;\\n        }\\n\\n        return (rewardSnapshots[_borrower].collateral < L_Collateral);\\n    }\\n\\n    function getEntireDebtAndColl(\\n        address _borrower\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            uint256 coll,\\n            uint256 principal,\\n            uint256 interest,\\n            uint256 pendingCollateral,\\n            uint256 pendingPrincipal,\\n            uint256 pendingInterest\\n        )\\n    {\\n        coll = Troves[_borrower].coll;\\n        principal = Troves[_borrower].principal;\\n        interest = Troves[_borrower].interestOwed;\\n\\n        pendingCollateral = getPendingCollateral(_borrower);\\n        (pendingPrincipal, pendingInterest) = getPendingDebt(_borrower);\\n\\n        coll += pendingCollateral;\\n        principal += pendingPrincipal;\\n        interest += pendingInterest;\\n    }\\n\\n    function getBorrowingRate() public view override returns (uint) {\\n        return _calcBorrowingRate(baseRate);\\n    }\\n\\n    function getBorrowingRateWithDecay() public view override returns (uint) {\\n        return _calcBorrowingRate(_calcDecayedBaseRate());\\n    }\\n\\n    function getPendingCollateral(\\n        address _borrower\\n    ) public view override returns (uint) {\\n        uint256 snapshotCollateral = rewardSnapshots[_borrower].collateral;\\n        uint256 rewardPerUnitStaked = L_Collateral - snapshotCollateral;\\n\\n        if (\\n            rewardPerUnitStaked == 0 ||\\n            Troves[_borrower].status != Status.active\\n        ) {\\n            return 0;\\n        }\\n\\n        uint256 stake = Troves[_borrower].stake;\\n\\n        return (stake * rewardPerUnitStaked) / DECIMAL_PRECISION;\\n    }\\n\\n    function getPendingDebt(\\n        address _borrower\\n    )\\n        public\\n        view\\n        override\\n        returns (uint256 pendingPrincipal, uint256 pendingInterest)\\n    {\\n        uint256 principalSnapshot = rewardSnapshots[_borrower].principal;\\n        uint256 principalPerUnitStaked = L_Principal - principalSnapshot;\\n\\n        uint256 interestSnapshot = rewardSnapshots[_borrower].interest;\\n        uint256 interestPerUnitStaked = L_Interest - interestSnapshot;\\n\\n        if (\\n            principalPerUnitStaked == 0 ||\\n            Troves[_borrower].status != Status.active\\n        ) {\\n            return (0, 0);\\n        }\\n\\n        uint256 stake = Troves[_borrower].stake;\\n\\n        pendingPrincipal = (stake * principalPerUnitStaked) / DECIMAL_PRECISION;\\n        pendingInterest = (stake * interestPerUnitStaked) / DECIMAL_PRECISION;\\n    }\\n\\n    function getRedemptionRate() public view override returns (uint) {\\n        return _calcRedemptionRate(baseRate);\\n    }\\n\\n    function _updateSystemInterest(uint16 _rate) internal {\\n        uint256 interest = interestRateManager.updateSystemInterest(_rate);\\n\\n        // slither-disable-next-line calls-loop\\n        musdToken.mint(address(pcv), interest);\\n\\n        // slither-disable-next-line calls-loop\\n        activePool.increaseDebt(0, interest);\\n    }\\n\\n    /**\\n     * Updates the debt on the given trove by first paying down interest owed, then the principal.\\n     * Note that this does not actually calculate interest owed, it just pays down the debt by the given amount.\\n     * Calculation of the interest owed (for system and trove) should be performed before calling this function.\\n     */\\n    function _updateTroveDebt(address _borrower, uint256 _payment) internal {\\n        Trove storage trove = Troves[_borrower];\\n\\n        (\\n            uint256 principalAdjustment,\\n            uint256 interestAdjustment\\n        ) = interestRateManager.updateTroveDebt(\\n                trove.interestOwed,\\n                _payment,\\n                trove.interestRate\\n            );\\n        trove.principal -= principalAdjustment;\\n        trove.interestOwed -= interestAdjustment;\\n    }\\n\\n    /*\\n     * This function has two impacts on the baseRate state variable:\\n     * 1) decays the baseRate based on time passed since last redemption or borrowing operation.\\n     * then,\\n     * 2) increases the baseRate based on the amount redeemed, as a proportion of total debt\\n     */\\n    function _updateBaseRateFromRedemption(\\n        uint256 _collateralDrawn,\\n        uint256 _price,\\n        uint256 _totalDebt\\n    ) internal returns (uint) {\\n        uint256 decayedBaseRate = _calcDecayedBaseRate();\\n\\n        /* Convert the drawn collateral back to mUSD at face value rate (1 mUSD:1 USD), in order to get\\n         * the fraction of total supply that was redeemed at face value. */\\n        uint256 redeemedMUSDFraction = (_collateralDrawn * _price) / _totalDebt;\\n\\n        uint256 newBaseRate = decayedBaseRate + (redeemedMUSDFraction / BETA);\\n        newBaseRate = LiquityMath._min(newBaseRate, DECIMAL_PRECISION); // cap baseRate at a maximum of 100%\\n        //assert(newBaseRate <= DECIMAL_PRECISION); // This is already enforced in the line above\\n        assert(newBaseRate > 0); // Base rate is always non-zero after redemption\\n\\n        // Update the baseRate state variable\\n        baseRate = newBaseRate;\\n        emit BaseRateUpdated(newBaseRate);\\n\\n        _updateLastFeeOpTime();\\n\\n        return newBaseRate;\\n    }\\n\\n    // Add the borrowers's coll and debt rewards earned from redistributions, to their Trove\\n    function _applyPendingRewards(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        address _borrower\\n    ) internal {\\n        Trove storage trove = Troves[_borrower];\\n        if (hasPendingRewards(_borrower)) {\\n            _requireTroveIsActive(_borrower);\\n\\n            // Compute pending rewards\\n            uint256 pendingCollateral = getPendingCollateral(_borrower);\\n            (\\n                uint256 pendingPrincipal,\\n                uint256 pendingInterest\\n            ) = getPendingDebt(_borrower);\\n            updateSystemAndTroveInterest(_borrower);\\n\\n            // Apply pending rewards to trove's state\\n            trove.coll += pendingCollateral;\\n            trove.principal += pendingPrincipal;\\n            trove.interestOwed += pendingInterest;\\n\\n            // Apply pending rewards to system interest rate data\\n            interestRateManager.addPrincipalToRate(\\n                trove.interestRate,\\n                pendingPrincipal\\n            );\\n            interestRateManager.addInterestToRate(\\n                trove.interestRate,\\n                pendingInterest\\n            );\\n\\n            _updateTroveRewardSnapshots(_borrower);\\n\\n            // Transfer from DefaultPool to ActivePool\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                pendingCollateral,\\n                pendingPrincipal,\\n                pendingInterest\\n            );\\n\\n            emit TroveUpdated(\\n                _borrower,\\n                trove.principal,\\n                trove.interestOwed,\\n                trove.coll,\\n                trove.stake,\\n                uint8(TroveManagerOperation.applyPendingRewards)\\n            );\\n        }\\n    }\\n\\n    function _sendGasCompensation(\\n        IActivePool _activePool,\\n        address _liquidator,\\n        uint256 _amount,\\n        uint256 _collateral\\n    ) internal {\\n        if (_amount > 0) {\\n            IGasPool(gasPoolAddress).sendMUSD(_liquidator, _amount);\\n        }\\n\\n        if (_collateral > 0) {\\n            _activePool.sendCollateral(_liquidator, _collateral);\\n        }\\n    }\\n\\n    /*\\n     * Updates snapshots of system total stakes and total collateral, excluding a given collateral remainder from the calculation.\\n     * Used in a liquidation sequence.\\n     *\\n     * The calculation excludes a portion of collateral that is in the ActivePool:\\n     *\\n     * the total collateral gas compensation from the liquidation sequence\\n     *\\n     * The collateral as compensation must be excluded as it is always sent out at the very end of the liquidation sequence.\\n     */\\n    function _updateSystemSnapshotsExcludeCollRemainder(\\n        IActivePool _activePool,\\n        uint256 _collRemainder\\n    ) internal {\\n        totalStakesSnapshot = totalStakes;\\n\\n        uint256 activeColl = _activePool.getCollateralBalance();\\n        uint256 liquidatedColl = defaultPool.getCollateralBalance();\\n        totalCollateralSnapshot = activeColl - _collRemainder + liquidatedColl;\\n\\n        emit SystemSnapshotsUpdated(\\n            totalStakesSnapshot,\\n            totalCollateralSnapshot\\n        );\\n    }\\n\\n    function _redistributeDebtAndColl(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint256 _principal,\\n        uint256 _interest,\\n        uint256 _coll\\n    ) internal {\\n        if (_principal == 0 && _interest == 0) {\\n            return;\\n        }\\n\\n        updateDefaultPoolInterest();\\n\\n        /*\\n         * Add distributed collateral, principal, and interest\\n         * rewards-per-unit-staked to the running totals. Division uses a\\n         * \\\"feedback\\\" error correction, to keep the cumulative error low in\\n         * the running totals L_Collateral, L_Principal, and L_Interest:\\n         *\\n         * 1) Form numerators which compensate for the floor division errors\\n         *    that occurred the last time this function was called.\\n         * 2) Calculate \\\"per-unit-staked\\\" ratios.\\n         * 3) Multiply each ratio back by its denominator, to reveal the current\\n         *    floor division error.\\n         * 4) Store these errors for use in the next correction when this\\n         *    function is called.\\n         * 5) Note: static analysis tools complain about this \\\"division before\\n         *    multiplication\\\", however, it is intended.\\n         */\\n        uint256 collateralNumerator = _coll *\\n            DECIMAL_PRECISION +\\n            lastCollateralError_Redistribution;\\n        uint256 principalNumerator = _principal *\\n            DECIMAL_PRECISION +\\n            lastPrincipalError_Redistribution;\\n        uint256 interestNumerator = _interest *\\n            DECIMAL_PRECISION +\\n            lastInterestError_Redistribution;\\n\\n        // Get the per-unit-staked terms\\n        // slither-disable-start divide-before-multiply\\n        uint256 pendingCollateralPerUnitStaked = collateralNumerator /\\n            totalStakes;\\n        uint256 pendingPrincipalPerUnitStaked = principalNumerator /\\n            totalStakes;\\n        uint256 pendingInterestPerUnitStaked = interestNumerator / totalStakes;\\n\\n        lastCollateralError_Redistribution =\\n            collateralNumerator -\\n            (pendingCollateralPerUnitStaked * totalStakes);\\n        lastPrincipalError_Redistribution =\\n            principalNumerator -\\n            (pendingPrincipalPerUnitStaked * totalStakes);\\n        lastInterestError_Redistribution =\\n            interestNumerator -\\n            (pendingInterestPerUnitStaked * totalStakes);\\n        // slither-disable-end divide-before-multiply\\n\\n        // Add per-unit-staked terms to the running totals\\n        L_Collateral += pendingCollateralPerUnitStaked;\\n        L_Principal += pendingPrincipalPerUnitStaked;\\n        L_Interest += pendingInterestPerUnitStaked;\\n\\n        emit LTermsUpdated(L_Collateral, L_Principal, L_Interest);\\n\\n        // Transfer coll and debt from ActivePool to DefaultPool\\n        _activePool.decreaseDebt(_principal, _interest);\\n        _defaultPool.increaseDebt(_principal, _interest);\\n        _activePool.sendCollateral(address(_defaultPool), _coll);\\n    }\\n\\n    // Liquidate one trove, in Normal Mode.\\n    function _liquidateNormalMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        address _borrower,\\n        uint256 _MUSDInStabPool\\n    ) internal returns (LiquidationValues memory singleLiquidation) {\\n        // slither-disable-next-line uninitialized-local\\n        LocalVariables_InnerSingleLiquidateFunction memory vars;\\n\\n        (\\n            singleLiquidation.entireTroveColl,\\n            singleLiquidation.entireTrovePrincipal,\\n            singleLiquidation.entireTroveInterest,\\n            vars.pendingColl,\\n            vars.pendingPrincipal,\\n            vars.pendingInterest\\n        ) = getEntireDebtAndColl(_borrower);\\n\\n        _removeStake(_borrower);\\n        _movePendingTroveRewardsToActivePool(\\n            _activePool,\\n            _defaultPool,\\n            vars.pendingColl,\\n            vars.pendingPrincipal,\\n            vars.pendingInterest\\n        );\\n\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(\\n            singleLiquidation.entireTroveColl\\n        );\\n        singleLiquidation.mUSDGasCompensation = MUSD_GAS_COMPENSATION;\\n        uint256 collToLiquidate = singleLiquidation.entireTroveColl -\\n            singleLiquidation.collGasCompensation;\\n\\n        (\\n            singleLiquidation.debtToOffset,\\n            singleLiquidation.collToSendToSP,\\n            singleLiquidation.principalToRedistribute,\\n            singleLiquidation.interestToRedistribute,\\n            singleLiquidation.collToRedistribute\\n        ) = _getOffsetAndRedistributionVals(\\n            singleLiquidation.entireTrovePrincipal,\\n            singleLiquidation.entireTroveInterest,\\n            collToLiquidate,\\n            _MUSDInStabPool\\n        );\\n\\n        _closeTrove(_borrower, Status.closedByLiquidation);\\n        emit TroveLiquidated(\\n            _borrower,\\n            singleLiquidation.entireTrovePrincipal,\\n            singleLiquidation.entireTroveColl,\\n            uint8(TroveManagerOperation.liquidateInNormalMode)\\n        );\\n        emit TroveUpdated(\\n            _borrower,\\n            0,\\n            0,\\n            0,\\n            0,\\n            uint8(TroveManagerOperation.liquidateInNormalMode)\\n        );\\n        return singleLiquidation;\\n    }\\n\\n    // Remove borrower's stake from the totalStakes sum, and set their stake to 0\\n    function _removeStake(address _borrower) internal {\\n        uint256 stake = Troves[_borrower].stake;\\n        // slither-disable-next-line costly-loop\\n        totalStakes -= stake;\\n        Troves[_borrower].stake = 0;\\n    }\\n\\n    function _getTotalsFromBatchLiquidateNormalMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint256 _price,\\n        uint256 _MUSDInStabPool,\\n        address[] memory _troveArray\\n    ) internal returns (LiquidationTotals memory totals) {\\n        // slither-disable-next-line uninitialized-local\\n        LocalVariables_LiquidationSequence memory vars;\\n        // slither-disable-next-line uninitialized-local\\n        LiquidationValues memory singleLiquidation;\\n\\n        vars.remainingMUSDInStabPool = _MUSDInStabPool;\\n\\n        for (vars.i = 0; vars.i < _troveArray.length; vars.i++) {\\n            vars.user = _troveArray[vars.i];\\n            vars.ICR = getCurrentICR(vars.user, _price);\\n\\n            if (vars.ICR < MCR) {\\n                singleLiquidation = _liquidateNormalMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.remainingMUSDInStabPool\\n                );\\n                vars.remainingMUSDInStabPool -= singleLiquidation.debtToOffset;\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n            }\\n        }\\n    }\\n\\n    /*\\n     * This function is used when the batch liquidation sequence starts during Recovery Mode. However, it\\n     * handle the case where the system *leaves* Recovery Mode, part way through the liquidation sequence\\n     */\\n    function _getTotalFromBatchLiquidateRecoveryMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint256 _price,\\n        uint256 _MUSDInStabPool,\\n        address[] memory _troveArray\\n    ) internal returns (LiquidationTotals memory totals) {\\n        // slither-disable-next-line uninitialized-local\\n        LocalVariables_LiquidationSequence memory vars;\\n        // slither-disable-next-line uninitialized-local\\n        LiquidationValues memory singleLiquidation;\\n\\n        vars.remainingMUSDInStabPool = _MUSDInStabPool;\\n        vars.backToNormalMode = false;\\n        vars.entireSystemDebt = getEntireSystemDebt();\\n        vars.entireSystemColl = getEntireSystemColl();\\n\\n        for (vars.i = 0; vars.i < _troveArray.length; vars.i++) {\\n            vars.user = _troveArray[vars.i];\\n            // Skip non-active troves\\n            if (Troves[vars.user].status != Status.active) {\\n                continue;\\n            }\\n            vars.ICR = getCurrentICR(vars.user, _price);\\n\\n            if (!vars.backToNormalMode) {\\n                // Skip this trove if ICR is greater than MCR and Stability Pool is empty\\n                if (vars.ICR >= MCR && vars.remainingMUSDInStabPool == 0) {\\n                    continue;\\n                }\\n\\n                uint256 TCR = LiquityMath._computeCR(\\n                    vars.entireSystemColl,\\n                    vars.entireSystemDebt,\\n                    _price\\n                );\\n\\n                singleLiquidation = _liquidateRecoveryMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.ICR,\\n                    vars.remainingMUSDInStabPool,\\n                    TCR,\\n                    _price\\n                );\\n\\n                // Update aggregate trackers\\n                vars.remainingMUSDInStabPool -= singleLiquidation.debtToOffset;\\n                vars.entireSystemDebt -= singleLiquidation.debtToOffset;\\n                vars.entireSystemColl -=\\n                    singleLiquidation.collToSendToSP +\\n                    singleLiquidation.collGasCompensation +\\n                    singleLiquidation.collSurplus;\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n\\n                vars.backToNormalMode = !_checkPotentialRecoveryMode(\\n                    vars.entireSystemColl,\\n                    vars.entireSystemDebt,\\n                    _price\\n                );\\n            } else if (vars.backToNormalMode && vars.ICR < MCR) {\\n                singleLiquidation = _liquidateNormalMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.remainingMUSDInStabPool\\n                );\\n                vars.remainingMUSDInStabPool -= singleLiquidation.debtToOffset;\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n            } else continue; // In Normal Mode skip troves with ICR >= MCR\\n        }\\n    }\\n\\n    // Liquidate one trove, in Recovery Mode.\\n    function _liquidateRecoveryMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        address _borrower,\\n        uint256 _ICR,\\n        uint256 _MUSDInStabPool,\\n        uint256 _TCR,\\n        uint256 _price\\n    ) internal returns (LiquidationValues memory singleLiquidation) {\\n        // slither-disable-next-line uninitialized-local\\n        LocalVariables_InnerSingleLiquidateFunction memory vars;\\n        if (TroveOwners.length <= 1) {\\n            return singleLiquidation;\\n        } // don't liquidate if last trove\\n        (\\n            singleLiquidation.entireTroveColl,\\n            singleLiquidation.entireTrovePrincipal,\\n            singleLiquidation.entireTroveInterest,\\n            vars.pendingColl,\\n            vars.pendingPrincipal,\\n            vars.pendingInterest\\n        ) = getEntireDebtAndColl(_borrower);\\n\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(\\n            singleLiquidation.entireTroveColl\\n        );\\n        singleLiquidation.mUSDGasCompensation = MUSD_GAS_COMPENSATION;\\n        vars.collToLiquidate =\\n            singleLiquidation.entireTroveColl -\\n            singleLiquidation.collGasCompensation;\\n\\n        // If ICR <= 100%, purely redistribute the Trove across all active Troves\\n        if (_ICR <= _100pct) {\\n            _removeStake(_borrower);\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                vars.pendingColl,\\n                vars.pendingPrincipal,\\n                vars.pendingInterest\\n            );\\n\\n            singleLiquidation.debtToOffset = 0;\\n            singleLiquidation.collToSendToSP = 0;\\n            singleLiquidation.principalToRedistribute = singleLiquidation\\n                .entireTrovePrincipal;\\n            singleLiquidation.collToRedistribute = vars.collToLiquidate;\\n\\n            _closeTrove(_borrower, Status.closedByLiquidation);\\n            emit TroveLiquidated(\\n                _borrower,\\n                singleLiquidation.entireTrovePrincipal,\\n                singleLiquidation.entireTroveColl,\\n                uint8(TroveManagerOperation.liquidateInRecoveryMode)\\n            );\\n            emit TroveUpdated(\\n                _borrower,\\n                0,\\n                0,\\n                0,\\n                0,\\n                uint8(TroveManagerOperation.liquidateInRecoveryMode)\\n            );\\n\\n            // If 100% < ICR < MCR, offset as much as possible, and redistribute the remainder\\n        } else if ((_ICR > _100pct) && (_ICR < MCR)) {\\n            _removeStake(_borrower);\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                vars.pendingColl,\\n                vars.pendingPrincipal,\\n                vars.pendingInterest\\n            );\\n\\n            (\\n                singleLiquidation.debtToOffset,\\n                singleLiquidation.collToSendToSP,\\n                singleLiquidation.principalToRedistribute,\\n                singleLiquidation.interestToRedistribute,\\n                singleLiquidation.collToRedistribute\\n            ) = _getOffsetAndRedistributionVals(\\n                singleLiquidation.entireTrovePrincipal,\\n                singleLiquidation.entireTroveInterest,\\n                vars.collToLiquidate,\\n                _MUSDInStabPool\\n            );\\n\\n            _closeTrove(_borrower, Status.closedByLiquidation);\\n            emit TroveLiquidated(\\n                _borrower,\\n                singleLiquidation.entireTrovePrincipal,\\n                singleLiquidation.entireTroveColl,\\n                uint8(TroveManagerOperation.liquidateInRecoveryMode)\\n            );\\n            emit TroveUpdated(\\n                _borrower,\\n                0,\\n                0,\\n                0,\\n                0,\\n                uint8(TroveManagerOperation.liquidateInRecoveryMode)\\n            );\\n            /*\\n             * If 110% <= ICR < current TCR (accounting for the preceding liquidations in the current sequence)\\n             * and there is mUSD in the Stability Pool, only offset, with no redistribution,\\n             * but at a capped rate of 1.1 and only if the whole debt can be liquidated.\\n             * The remainder due to the capped rate will be claimable as collateral surplus.\\n             */\\n        } else if (\\n            (_ICR >= MCR) &&\\n            (_ICR < _TCR) &&\\n            (singleLiquidation.entireTrovePrincipal <= _MUSDInStabPool)\\n        ) {\\n            _removeStake(_borrower);\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                vars.pendingColl,\\n                vars.pendingPrincipal,\\n                vars.pendingInterest\\n            );\\n            assert(_MUSDInStabPool != 0);\\n\\n            singleLiquidation = _getCappedOffsetVals(\\n                singleLiquidation.entireTrovePrincipal,\\n                singleLiquidation.entireTroveColl,\\n                _price\\n            );\\n\\n            _closeTrove(_borrower, Status.closedByLiquidation);\\n            if (singleLiquidation.collSurplus > 0) {\\n                collSurplusPool.accountSurplus(\\n                    _borrower,\\n                    singleLiquidation.collSurplus\\n                );\\n            }\\n\\n            emit TroveLiquidated(\\n                _borrower,\\n                singleLiquidation.entireTrovePrincipal,\\n                singleLiquidation.collToSendToSP,\\n                uint8(TroveManagerOperation.liquidateInRecoveryMode)\\n            );\\n            emit TroveUpdated(\\n                _borrower,\\n                0,\\n                0,\\n                0,\\n                0,\\n                uint8(TroveManagerOperation.liquidateInRecoveryMode)\\n            );\\n        } else {\\n            // if (_ICR >= MCR && ( _ICR >= _TCR || singleLiquidation.entireTroveDebt > _MUSDInStabPool))\\n            // slither-disable-next-line uninitialized-local\\n            LiquidationValues memory zeroVals;\\n            return zeroVals;\\n        }\\n\\n        return singleLiquidation;\\n    }\\n\\n    /*\\n     * Called when a full redemption occurs, and closes the trove.\\n     * The redeemer swaps (debt - liquidation reserve) mUSD for (debt - liquidation reserve) worth of collateral, so the mUSD liquidation reserve left corresponds to the remaining debt.\\n     * In order to close the trove, the mUSD liquidation reserve is burned, and the corresponding debt is removed from the active pool.\\n     * The debt recorded on the trove's struct is zero'd elswhere, in _closeTrove.\\n     * Any surplus collateral left in the trove, is sent to the Coll surplus pool, and can be later claimed by the borrower.\\n     */\\n    function _redeemCloseTrove(\\n        ContractsCache memory _contractsCache,\\n        address _borrower,\\n        uint256 _amount,\\n        uint256 _collateral\\n    ) internal {\\n        // slither-disable-next-line calls-loop\\n        _contractsCache.musdToken.burn(gasPoolAddress, _amount);\\n        // Update Active Pool mUSD, and send collateral to account\\n        // slither-disable-next-line calls-loop\\n        _contractsCache.activePool.decreaseDebt(_amount, 0);\\n\\n        // send collateral from Active Pool to CollSurplus Pool\\n        // slither-disable-next-line calls-loop\\n        _contractsCache.collSurplusPool.accountSurplus(_borrower, _collateral);\\n        // slither-disable-next-line calls-loop\\n        _contractsCache.activePool.sendCollateral(\\n            address(_contractsCache.collSurplusPool),\\n            _collateral\\n        );\\n    }\\n\\n    // Redeem as much collateral as possible from _borrower's Trove in exchange for mUSD up to _maxMUSDamount\\n    function _redeemCollateralFromTrove(\\n        ContractsCache memory _contractsCache,\\n        address _borrower,\\n        uint256 _maxMUSDamount,\\n        uint256 _price,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint256 _partialRedemptionHintNICR\\n    ) internal returns (SingleRedemptionValues memory singleRedemption) {\\n        // slither-disable-next-line uninitialized-local\\n        LocalVariables_redeemCollateralFromTrove memory vars;\\n        // Determine the remaining amount (lot) to be redeemed, capped by the entire debt of the Trove minus the liquidation reserve\\n        singleRedemption.mUSDLot = LiquityMath._min(\\n            _maxMUSDamount,\\n            _getTotalDebt(_borrower) - MUSD_GAS_COMPENSATION\\n        );\\n\\n        // Get the collateralLot of equivalent value in USD\\n        singleRedemption.collateralLot =\\n            (singleRedemption.mUSDLot * DECIMAL_PRECISION) /\\n            _price;\\n\\n        // Decrease the debt and collateral of the current Trove according to the mUSD lot and corresponding collateral to send\\n        vars.newDebt = _getTotalDebt(_borrower) - singleRedemption.mUSDLot;\\n        vars.newColl = Troves[_borrower].coll - singleRedemption.collateralLot;\\n\\n        if (vars.newDebt == MUSD_GAS_COMPENSATION) {\\n            // No debt left in the Trove (except for the liquidation reserve), therefore the trove gets closed\\n            _removeStake(_borrower);\\n            _closeTrove(_borrower, Status.closedByRedemption);\\n            _redeemCloseTrove(\\n                _contractsCache,\\n                _borrower,\\n                MUSD_GAS_COMPENSATION,\\n                vars.newColl\\n            );\\n            emit TroveUpdated(\\n                _borrower,\\n                0,\\n                0,\\n                0,\\n                0,\\n                uint8(TroveManagerOperation.redeemCollateral)\\n            );\\n        } else {\\n            // calculate 10 minutes worth of interest to account for delay between the hint call and now\\n            // solhint-disable not-rely-on-time\\n            vars.upperBoundNICR = LiquityMath._computeNominalCR(\\n                vars.newColl,\\n                vars.newDebt -\\n                    interestRateManager.calculateInterestOwed(\\n                        Troves[_borrower].principal,\\n                        interestRateManager.interestRate(),\\n                        block.timestamp - 600,\\n                        block.timestamp\\n                    )\\n            );\\n            // solhint-enable not-rely-on-time\\n            vars.newNICR = LiquityMath._computeNominalCR(\\n                vars.newColl,\\n                vars.newDebt\\n            );\\n\\n            /*\\n             * If the provided hint is out of date, we bail since trying to reinsert without a good hint will almost\\n             * certainly result in running out of gas.\\n             *\\n             * If the resultant net debt of the partial is less than the minimum, net debt we bail.\\n             */\\n            if (\\n                _partialRedemptionHintNICR < vars.newNICR ||\\n                _partialRedemptionHintNICR > vars.upperBoundNICR ||\\n                _getNetDebt(vars.newDebt) < MIN_NET_DEBT\\n            ) {\\n                singleRedemption.cancelledPartial = true;\\n                return singleRedemption;\\n            }\\n\\n            // slither-disable-next-line calls-loop\\n            _contractsCache.sortedTroves.reInsert(\\n                _borrower,\\n                vars.newNICR,\\n                _upperPartialRedemptionHint,\\n                _lowerPartialRedemptionHint\\n            );\\n\\n            updateSystemAndTroveInterest(_borrower);\\n            _updateTroveDebt(_borrower, singleRedemption.mUSDLot);\\n            Troves[_borrower].coll = vars.newColl;\\n            _updateStakeAndTotalStakes(_borrower);\\n\\n            emit TroveUpdated(\\n                _borrower,\\n                Troves[_borrower].principal,\\n                Troves[_borrower].interestOwed,\\n                vars.newColl,\\n                Troves[_borrower].stake,\\n                uint8(TroveManagerOperation.redeemCollateral)\\n            );\\n        }\\n\\n        return singleRedemption;\\n    }\\n\\n    // Update borrower's stake based on their latest collateral value\\n    function _updateStakeAndTotalStakes(\\n        address _borrower\\n    ) internal returns (uint) {\\n        uint256 newStake = _computeNewStake(Troves[_borrower].coll);\\n        uint256 oldStake = Troves[_borrower].stake;\\n        Troves[_borrower].stake = newStake;\\n\\n        // slither-disable-next-line costly-loop\\n        totalStakes = totalStakes - oldStake + newStake;\\n        emit TotalStakesUpdated(totalStakes);\\n\\n        return newStake;\\n    }\\n\\n    function _updateTroveRewardSnapshots(address _borrower) internal {\\n        rewardSnapshots[_borrower].collateral = L_Collateral;\\n        rewardSnapshots[_borrower].principal = L_Principal;\\n        rewardSnapshots[_borrower].interest = L_Interest;\\n        emit TroveSnapshotsUpdated(L_Collateral, L_Principal, L_Interest);\\n    }\\n\\n    function _addTroveOwnerToArray(\\n        address _borrower\\n    ) internal returns (uint128 index) {\\n        /* Max array size is 2**128 - 1, i.e. ~3e30 troves. No risk of overflow, since troves have minimum mUSD\\n        debt of liquidation reserve plus MIN_NET_DEBT. 3e30 mUSD dwarfs the value of all wealth in the world ( which is < 1e15 USD). */\\n\\n        // Push the Troveowner to the array\\n        TroveOwners.push(_borrower);\\n\\n        // Record the index of the new Troveowner on their Trove struct\\n        index = uint128(TroveOwners.length - 1);\\n        Troves[_borrower].arrayIndex = index;\\n\\n        return index;\\n    }\\n\\n    function _updateLastFeeOpTime() internal {\\n        // solhint-disable-next-line not-rely-on-time\\n        uint256 timePassed = block.timestamp - lastFeeOperationTime;\\n\\n        if (timePassed >= 1 minutes) {\\n            // solhint-disable-next-line not-rely-on-time\\n            lastFeeOperationTime = block.timestamp;\\n            // solhint-disable-next-line not-rely-on-time\\n            emit LastFeeOpTimeUpdated(block.timestamp);\\n        }\\n    }\\n\\n    // Move a Trove's pending debt and collateral rewards from distributions, from the Default Pool to the Active Pool\\n    function _movePendingTroveRewardsToActivePool(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint256 _collateral,\\n        uint256 _principal,\\n        uint256 _interest\\n    ) internal {\\n        // slither-disable-next-line calls-loop\\n        _defaultPool.decreaseDebt(_principal, _interest);\\n        // slither-disable-next-line calls-loop\\n        _activePool.increaseDebt(_principal, _interest);\\n        // slither-disable-next-line calls-loop\\n        _defaultPool.sendCollateralToActivePool(_collateral);\\n    }\\n\\n    function _closeTrove(address _borrower, Status closedStatus) internal {\\n        assert(\\n            closedStatus != Status.nonExistent && closedStatus != Status.active\\n        );\\n\\n        uint256 TroveOwnersArrayLength = TroveOwners.length;\\n        // slither-disable-next-line calls-loop\\n        if (musdToken.mintList(borrowerOperationsAddress)) {\\n            _requireMoreThanOneTroveInSystem(TroveOwnersArrayLength);\\n        }\\n\\n        Troves[_borrower].status = closedStatus;\\n        Troves[_borrower].coll = 0;\\n        Troves[_borrower].principal = 0;\\n        Troves[_borrower].interestOwed = 0;\\n\\n        rewardSnapshots[_borrower].collateral = 0;\\n        rewardSnapshots[_borrower].principal = 0;\\n        rewardSnapshots[_borrower].interest = 0;\\n\\n        _removeTroveOwner(_borrower, TroveOwnersArrayLength);\\n        // slither-disable-next-line calls-loop\\n        sortedTroves.remove(_borrower);\\n    }\\n\\n    /*\\n     * Remove a Trove owner from the TroveOwners array, not preserving array order. Removing owner 'B' does the following:\\n     * [A B C D E] => [A E C D], and updates E's Trove struct to point to its new array index.\\n     */\\n    function _removeTroveOwner(\\n        address _borrower,\\n        uint256 TroveOwnersArrayLength\\n    ) internal {\\n        Status troveStatus = Troves[_borrower].status;\\n        // It\\u2019s set in caller function `_closeTrove`\\n        assert(\\n            troveStatus != Status.nonExistent && troveStatus != Status.active\\n        );\\n\\n        uint128 index = Troves[_borrower].arrayIndex;\\n        uint256 length = TroveOwnersArrayLength;\\n        uint256 idxLast = length - 1;\\n\\n        assert(index <= idxLast);\\n\\n        address addressToMove = TroveOwners[idxLast];\\n\\n        TroveOwners[index] = addressToMove;\\n        Troves[addressToMove].arrayIndex = index;\\n        emit TroveIndexUpdated(addressToMove, index);\\n\\n        // slither-disable-next-line costly-loop\\n        TroveOwners.pop();\\n    }\\n\\n    function _isValidFirstRedemptionHint(\\n        ISortedTroves _sortedTroves,\\n        address _firstRedemptionHint,\\n        uint256 _price\\n    ) internal view returns (bool) {\\n        if (\\n            _firstRedemptionHint == address(0) ||\\n            !_sortedTroves.contains(_firstRedemptionHint) ||\\n            getCurrentICR(_firstRedemptionHint, _price) < MCR\\n        ) {\\n            return false;\\n        }\\n\\n        address nextTrove = _sortedTroves.getNext(_firstRedemptionHint);\\n        return\\n            nextTrove == address(0) || getCurrentICR(nextTrove, _price) < MCR;\\n    }\\n\\n    function _requireTCRoverMCR(uint256 _price) internal view {\\n        require(\\n            _getTCR(_price) >= MCR,\\n            \\\"TroveManager: Cannot redeem when TCR < MCR\\\"\\n        );\\n    }\\n\\n    function _requireMUSDBalanceCoversRedemption(\\n        IMUSD _musd,\\n        address _redeemer,\\n        uint256 _amount\\n    ) internal view {\\n        require(\\n            _musd.balanceOf(_redeemer) >= _amount,\\n            \\\"TroveManager: Requested redemption amount must be <= user's mUSD token balance\\\"\\n        );\\n    }\\n\\n    function _requireMoreThanOneTroveInSystem(\\n        uint256 TroveOwnersArrayLength\\n    ) internal view {\\n        // slither-disable-next-line calls-loop\\n        require(\\n            TroveOwnersArrayLength > 1 && sortedTroves.getSize() > 1,\\n            \\\"TroveManager: Only one trove in the system\\\"\\n        );\\n    }\\n\\n    function _getCurrentTroveAmounts(\\n        address _borrower\\n    ) internal view returns (uint currentCollateral, uint currentDebt) {\\n        uint256 pendingCollateral = getPendingCollateral(_borrower);\\n        (uint256 pendingPrincipal, uint256 pendingInterest) = getPendingDebt(\\n            _borrower\\n        );\\n\\n        currentCollateral = Troves[_borrower].coll + pendingCollateral;\\n        currentDebt =\\n            _getTotalDebt(_borrower) +\\n            pendingPrincipal +\\n            pendingInterest;\\n    }\\n\\n    function _getTotalDebt(address _borrower) internal view returns (uint256) {\\n        // solhint-disable not-rely-on-time\\n        return\\n            Troves[_borrower].principal +\\n            Troves[_borrower].interestOwed +\\n            interestRateManager.calculateInterestOwed(\\n                Troves[_borrower].principal,\\n                Troves[_borrower].interestRate,\\n                Troves[_borrower].lastInterestUpdateTime,\\n                block.timestamp\\n            );\\n        // solhint-enable not-rely-on-time\\n    }\\n\\n    // Calculate a new stake based on the snapshots of the totalStakes and totalCollateral taken at the last liquidation\\n    function _computeNewStake(uint256 _coll) internal view returns (uint) {\\n        uint256 stake;\\n        if (totalCollateralSnapshot == 0) {\\n            stake = _coll;\\n        } else {\\n            /*\\n             * The following assert() holds true because:\\n             * - The system always contains >= 1 trove\\n             * - When we close or liquidate a trove, we redistribute the pending rewards, so if all troves were closed/liquidated,\\n             * rewards would\\u2019ve been emptied and totalCollateralSnapshot would be zero too.\\n             */\\n            assert(totalStakesSnapshot > 0);\\n            stake = (_coll * totalStakesSnapshot) / totalCollateralSnapshot;\\n        }\\n        return stake;\\n    }\\n\\n    function _getRedemptionFee(\\n        uint256 _collateralDrawn\\n    ) internal view returns (uint) {\\n        return _calcRedemptionFee(getRedemptionRate(), _collateralDrawn);\\n    }\\n\\n    function _calcDecayedBaseRate() internal view returns (uint) {\\n        uint256 minutesPassed = _minutesPassedSinceLastFeeOp();\\n        uint256 decayFactor = LiquityMath._decPow(\\n            MINUTE_DECAY_FACTOR,\\n            minutesPassed\\n        );\\n\\n        return (baseRate * decayFactor) / DECIMAL_PRECISION;\\n    }\\n\\n    function _minutesPassedSinceLastFeeOp() internal view returns (uint) {\\n        // solhint-disable-next-line not-rely-on-time\\n        return (block.timestamp - lastFeeOperationTime) / 1 minutes;\\n    }\\n\\n    function _requireCallerIsBorrowerOperations() internal view {\\n        require(\\n            msg.sender == borrowerOperationsAddress,\\n            \\\"TroveManager: Caller is not the BorrowerOperations contract\\\"\\n        );\\n    }\\n\\n    function _requireTroveIsActive(address _borrower) internal view {\\n        require(\\n            Troves[_borrower].status == Status.active,\\n            \\\"TroveManager: Trove does not exist or is closed\\\"\\n        );\\n    }\\n\\n    /* In a full liquidation, returns the values for a trove's coll and debt to be offset, and coll and debt to be\\n     * redistributed to active troves.\\n     */\\n    function _getOffsetAndRedistributionVals(\\n        uint256 _principal,\\n        uint256 _interest,\\n        uint256 _coll,\\n        uint256 _MUSDInStabPool\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 debtToOffset,\\n            uint256 collToSendToSP,\\n            uint256 principalToRedistribute,\\n            uint256 interestToRedistribute,\\n            uint256 collToRedistribute\\n        )\\n    {\\n        if (_MUSDInStabPool > 0) {\\n            /*\\n             * Offset as much debt & collateral as possible against the Stability Pool, and redistribute the remainder\\n             * between all active troves.\\n             *\\n             *  If the trove's debt is larger than the deposited mUSD in the Stability Pool:\\n             *\\n             *  - Offset an amount of the trove's debt equal to the mUSD in the Stability Pool\\n             *  - Send a fraction of the trove's collateral to the Stability Pool, equal to the fraction of its offset debt\\n             *\\n             */\\n            uint256 interestToOffset = LiquityMath._min(\\n                _interest,\\n                _MUSDInStabPool\\n            );\\n            uint256 principalToOffset = LiquityMath._min(\\n                _principal,\\n                _MUSDInStabPool - interestToOffset\\n            );\\n            debtToOffset = principalToOffset + interestToOffset;\\n            collToSendToSP = (_coll * debtToOffset) / (_principal + _interest);\\n            interestToRedistribute = _interest - interestToOffset;\\n            principalToRedistribute = _principal - principalToOffset;\\n            collToRedistribute = _coll - collToSendToSP;\\n        } else {\\n            debtToOffset = 0;\\n            collToSendToSP = 0;\\n            principalToRedistribute = _principal;\\n            interestToRedistribute = _interest;\\n            collToRedistribute = _coll;\\n        }\\n    }\\n\\n    function _requireAmountGreaterThanZero(uint256 _amount) internal pure {\\n        require(_amount > 0, \\\"TroveManager: Amount must be greater than zero\\\");\\n    }\\n\\n    function _requireValidMaxFeePercentage(\\n        uint256 _maxFeePercentage\\n    ) internal pure {\\n        require(\\n            _maxFeePercentage >= REDEMPTION_FEE_FLOOR &&\\n                _maxFeePercentage <= DECIMAL_PRECISION,\\n            \\\"Max fee percentage must be between 0.5% and 100%\\\"\\n        );\\n    }\\n\\n    // Check whether or not the system *would be* in Recovery Mode, given an collateral:USD price, and the entire system coll and debt.\\n    function _checkPotentialRecoveryMode(\\n        uint256 _entireSystemColl,\\n        uint256 _entireSystemDebt,\\n        uint256 _price\\n    ) internal pure returns (bool) {\\n        uint256 TCR = LiquityMath._computeCR(\\n            _entireSystemColl,\\n            _entireSystemDebt,\\n            _price\\n        );\\n\\n        return TCR < CCR;\\n    }\\n\\n    /*\\n     *  Get its offset coll/debt and collateral gas comp, and close the trove.\\n     */\\n    function _getCappedOffsetVals(\\n        uint256 _entireTroveDebt,\\n        uint256 _entireTroveColl,\\n        uint256 _price\\n    ) internal pure returns (LiquidationValues memory singleLiquidation) {\\n        singleLiquidation.entireTrovePrincipal = _entireTroveDebt;\\n        singleLiquidation.entireTroveColl = _entireTroveColl;\\n        uint256 cappedCollPortion = (_entireTroveDebt * MCR) / _price;\\n\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(\\n            cappedCollPortion\\n        );\\n        singleLiquidation.mUSDGasCompensation = MUSD_GAS_COMPENSATION;\\n\\n        singleLiquidation.debtToOffset = _entireTroveDebt;\\n        singleLiquidation.collToSendToSP =\\n            cappedCollPortion -\\n            singleLiquidation.collGasCompensation;\\n        singleLiquidation.collSurplus = _entireTroveColl - cappedCollPortion;\\n        singleLiquidation.principalToRedistribute = 0;\\n        singleLiquidation.collToRedistribute = 0;\\n    }\\n\\n    function _addLiquidationValuesToTotals(\\n        LiquidationTotals memory oldTotals,\\n        LiquidationValues memory singleLiquidation\\n    ) internal pure returns (LiquidationTotals memory newTotals) {\\n        // Tally all the values with their respective running totals\\n        newTotals.totalCollGasCompensation =\\n            oldTotals.totalCollGasCompensation +\\n            singleLiquidation.collGasCompensation;\\n\\n        newTotals.totalMUSDGasCompensation =\\n            oldTotals.totalMUSDGasCompensation +\\n            singleLiquidation.mUSDGasCompensation;\\n\\n        newTotals.totalPrincipalInSequence =\\n            oldTotals.totalPrincipalInSequence +\\n            singleLiquidation.entireTrovePrincipal;\\n\\n        newTotals.totalInterestInSequence =\\n            oldTotals.totalInterestInSequence +\\n            singleLiquidation.entireTroveInterest;\\n\\n        newTotals.totalCollInSequence =\\n            oldTotals.totalCollInSequence +\\n            singleLiquidation.entireTroveColl;\\n\\n        newTotals.totalDebtToOffset =\\n            oldTotals.totalDebtToOffset +\\n            singleLiquidation.debtToOffset;\\n\\n        newTotals.totalCollToSendToSP =\\n            oldTotals.totalCollToSendToSP +\\n            singleLiquidation.collToSendToSP;\\n\\n        newTotals.totalPrincipalToRedistribute =\\n            oldTotals.totalPrincipalToRedistribute +\\n            singleLiquidation.principalToRedistribute;\\n\\n        newTotals.totalInterestToRedistribute =\\n            oldTotals.totalInterestToRedistribute +\\n            singleLiquidation.interestToRedistribute;\\n\\n        newTotals.totalCollToRedistribute =\\n            oldTotals.totalCollToRedistribute +\\n            singleLiquidation.collToRedistribute;\\n\\n        newTotals.totalCollSurplus =\\n            oldTotals.totalCollSurplus +\\n            singleLiquidation.collSurplus;\\n\\n        return newTotals;\\n    }\\n\\n    function _calcBorrowingFee(\\n        uint256 _borrowingRate,\\n        uint256 _debt\\n    ) internal pure returns (uint) {\\n        return (_borrowingRate * _debt) / DECIMAL_PRECISION;\\n    }\\n\\n    function _calcBorrowingRate(\\n        uint256 _baseRate\\n    ) internal pure returns (uint) {\\n        return\\n            LiquityMath._min(\\n                BORROWING_FEE_FLOOR + _baseRate,\\n                MAX_BORROWING_FEE\\n            );\\n    }\\n\\n    function _calcRedemptionFee(\\n        uint256 _redemptionRate,\\n        uint256 _collateralDrawn\\n    ) internal pure returns (uint) {\\n        uint256 redemptionFee = (_redemptionRate * _collateralDrawn) /\\n            DECIMAL_PRECISION;\\n        require(\\n            redemptionFee < _collateralDrawn,\\n            \\\"TroveManager: Fee would eat up all returned collateral\\\"\\n        );\\n        return redemptionFee;\\n    }\\n\\n    function _calcRedemptionRate(\\n        uint256 _baseRate\\n    ) internal pure returns (uint) {\\n        return\\n            LiquityMath._min(\\n                REDEMPTION_FEE_FLOOR + _baseRate,\\n                DECIMAL_PRECISION // cap at a maximum of 100%\\n            );\\n    }\\n}\\n// slither-disable-end reentrancy-benign\\n// slither-disable-end reentrancy-events\\n// slither-disable-end reentrancy-no-eth\\n\",\"keccak256\":\"0x11f8627970e8fffbd6fc12648b54b6176fc6391fb7af7d1bbbfc408318431b5c\",\"license\":\"MIT\"},\"contracts/dependencies/BaseMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract BaseMath {\\n    uint256 public constant DECIMAL_PRECISION = 1e18;\\n}\\n\",\"keccak256\":\"0x54fab55b6128e51d2ffa3d2b726ce6f08fe5447b41a4880d195bfc7fcd66429f\",\"license\":\"MIT\"},\"contracts/dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\ncontract CheckContract {\\n    /**\\n     * Check that the account is an already deployed non-destroyed contract.\\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n     */\\n    function checkContract(address _account) internal view {\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(_account)\\n        }\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xab260c88c1d2f0ffbbd5d43c4a1df5e48132678e67fc24b65fa2d823f97cbc32\",\"license\":\"MIT\"},\"contracts/dependencies/LiquityBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./BaseMath.sol\\\";\\nimport \\\"./LiquityMath.sol\\\";\\nimport \\\"../interfaces/IActivePool.sol\\\";\\nimport \\\"../interfaces/IDefaultPool.sol\\\";\\nimport \\\"../interfaces/IPriceFeed.sol\\\";\\nimport \\\"../interfaces/ILiquityBase.sol\\\";\\n\\n/*\\n * Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\n * common functions.\\n */\\nabstract contract LiquityBase is BaseMath, ILiquityBase {\\n    uint256 public constant _100pct = 1e18; // 1e18 == 100%\\n\\n    // Minimum collateral ratio for individual troves\\n    uint256 public constant MCR = 1.1e18; // 110%\\n\\n    // Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n    uint256 public constant CCR = 1.5e18; // 150%\\n\\n    // Amount of mUSD to be locked in gas pool on opening troves\\n    uint256 public constant MUSD_GAS_COMPENSATION = 200e18;\\n\\n    // Minimum amount of net mUSD debt a trove must have\\n    uint256 public constant MIN_NET_DEBT = 1800e18;\\n    // uint256 constant public MIN_NET_DEBT = 0;\\n\\n    uint256 public constant PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\n\\n    uint256 public constant BORROWING_FEE_FLOOR = ((DECIMAL_PRECISION * 5) /\\n        1000); // 0.5%\\n\\n    // slither-disable-next-line all\\n    IActivePool public activePool;\\n\\n    // slither-disable-next-line all\\n    IDefaultPool public defaultPool;\\n\\n    // slither-disable-next-line all\\n    IPriceFeed public override priceFeed;\\n\\n    // --- Gas compensation functions ---\\n\\n    function getEntireSystemColl()\\n        public\\n        view\\n        returns (uint256 entireSystemColl)\\n    {\\n        uint256 activeColl = activePool.getCollateralBalance();\\n        uint256 liquidatedColl = defaultPool.getCollateralBalance();\\n\\n        return activeColl + liquidatedColl;\\n    }\\n\\n    function getEntireSystemDebt()\\n        public\\n        view\\n        returns (uint256 entireSystemDebt)\\n    {\\n        uint256 activeDebt = activePool.getDebt();\\n        uint256 closedDebt = defaultPool.getDebt();\\n\\n        return activeDebt + closedDebt;\\n    }\\n\\n    function _getTCR(uint256 _price) internal view returns (uint256 TCR) {\\n        uint256 entireSystemColl = getEntireSystemColl();\\n        uint256 entireSystemDebt = getEntireSystemDebt();\\n\\n        TCR = LiquityMath._computeCR(\\n            entireSystemColl,\\n            entireSystemDebt,\\n            _price\\n        );\\n        return TCR;\\n    }\\n\\n    function _checkRecoveryMode(uint256 _price) internal view returns (bool) {\\n        uint256 TCR = _getTCR(_price);\\n        return TCR < CCR;\\n    }\\n\\n    function _requireUserAcceptsFee(\\n        uint256 _fee,\\n        uint256 _amount,\\n        uint256 _maxFeePercentage\\n    ) internal pure {\\n        uint256 feePercentage = (_fee * DECIMAL_PRECISION) / _amount;\\n        require(\\n            feePercentage <= _maxFeePercentage,\\n            \\\"Fee exceeded provided maximum\\\"\\n        );\\n    }\\n\\n    // Returns the composite debt (drawn debt + gas compensation) of a trove, for the purpose of ICR calculation\\n    function _getCompositeDebt(uint256 _debt) internal pure returns (uint) {\\n        return _debt + MUSD_GAS_COMPENSATION;\\n    }\\n\\n    function _getNetDebt(uint256 _debt) internal pure returns (uint) {\\n        return _debt - MUSD_GAS_COMPENSATION;\\n    }\\n\\n    // Return the amount of collateral to be drawn from a trove's collateral and sent as gas compensation.\\n    function _getCollGasCompensation(\\n        uint256 _entireColl\\n    ) internal pure returns (uint) {\\n        return _entireColl / PERCENT_DIVISOR;\\n    }\\n}\\n\",\"keccak256\":\"0xa9a78271bc378fe4b2d4a0cf412ca95dfebb9be10ea22411ac72901c93decf7e\",\"license\":\"MIT\"},\"contracts/dependencies/LiquityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nlibrary LiquityMath {\\n    uint256 internal constant DECIMAL_PRECISION = 1e18;\\n\\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\\n     *\\n     * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n     * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division.\\n     *\\n     * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 BTC,\\n     * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n     *\\n     */\\n    uint256 internal constant NICR_PRECISION = 1e20;\\n\\n    function _min(uint256 _a, uint256 _b) internal pure returns (uint) {\\n        return (_a < _b) ? _a : _b;\\n    }\\n\\n    /*\\n     * Multiply two decimal numbers and use normal rounding rules:\\n     * -round product up if 19'th mantissa digit >= 5\\n     * -round product down if 19'th mantissa digit < 5\\n     *\\n     * Used only inside the exponentiation, _decPow().\\n     */\\n    function decMul(\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256 decProd) {\\n        uint256 prod_xy = x * y;\\n\\n        decProd = (prod_xy + (DECIMAL_PRECISION / 2)) / DECIMAL_PRECISION;\\n    }\\n\\n    /*\\n     * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n     *\\n     * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n     *\\n     * Called by one function that represent time in units of minutes:\\n     * 1) TroveManager._calcDecayedBaseRate\\n     *\\n     * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n     * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n     *\\n     * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n     * negligibly different from just passing the cap, since:\\n     *\\n     * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n     * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n     */\\n    function _decPow(\\n        uint256 _base,\\n        uint256 _minutes\\n    ) internal pure returns (uint) {\\n        if (_minutes > 5.256e8) {\\n            _minutes = 5.256e8;\\n        } // cap to avoid overflow\\n\\n        if (_minutes == 0) {\\n            return DECIMAL_PRECISION;\\n        }\\n\\n        uint256 y = DECIMAL_PRECISION;\\n        uint256 x = _base;\\n        uint256 n = _minutes;\\n\\n        // Exponentiation-by-squaring\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                x = decMul(x, x);\\n                n = n / 2;\\n            } else {\\n                // if (n % 2 != 0)\\n                y = decMul(x, y);\\n                x = decMul(x, x);\\n                n = (n - 1) / 2;\\n            }\\n        }\\n\\n        return decMul(x, y);\\n    }\\n\\n    function _getAbsoluteDifference(\\n        uint256 _a,\\n        uint256 _b\\n    ) internal pure returns (uint) {\\n        return (_a >= _b) ? _a - _b : _b - _a;\\n    }\\n\\n    function _computeNominalCR(\\n        uint256 _coll,\\n        uint256 _debt\\n    ) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            return (_coll * NICR_PRECISION) / _debt;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else {\\n            // if (_debt == 0)\\n            return type(uint256).max;\\n        }\\n    }\\n\\n    function _computeCR(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint256 _price\\n    ) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            uint256 newCollRatio = (_coll * _price) / _debt;\\n\\n            return newCollRatio;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else {\\n            // if (_debt == 0)\\n            return type(uint256).max;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf0ce4e213ff9da167613bc96f87dab11816081a14f39284bc6bb3ad47a2f0bae\",\"license\":\"MIT\"},\"contracts/interfaces/IActivePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IActivePool is IPool {\\n    // --- Events ---\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolDebtUpdated(uint256 _principal, uint256 _interest);\\n    event ActivePoolCollateralBalanceUpdated(uint256 _collateral);\\n    event CollateralAddressChanged(address _newCollateralAddress);\\n    event CollSurplusPoolAddressChanged(address _newCollSurplusPoolAddress);\\n\\n    // --- Functions ---\\n    function sendCollateral(address _account, uint256 _amount) external;\\n\\n    function collateralAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3b119711f550d5cb7cb51eba4cafca30fced922c633141f04e7faf3468008f4c\",\"license\":\"MIT\"},\"contracts/interfaces/ICollSurplusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\ninterface ICollSurplusPool {\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event CollateralAddressChanged(address _newCollateralAddress);\\n\\n    event CollBalanceUpdated(address indexed _account, uint256 _newBalance);\\n    event CollateralSent(address _to, uint256 _amount);\\n\\n    // --- Contract setters ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _collateralAddress\\n    ) external;\\n\\n    function accountSurplus(address _account, uint256 _amount) external;\\n\\n    function claimColl(address _account) external;\\n\\n    function collateralAddress() external view returns (address);\\n\\n    function getCollateralBalance() external view returns (uint);\\n\\n    function getCollateral(address _account) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x88876632aec941cf5a26379e33a299c04ddfa36ae3b28df14961e1ebbbb2c7a0\",\"license\":\"MIT\"},\"contracts/interfaces/IDefaultPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IDefaultPool is IPool {\\n    // --- Events ---\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event DefaultPoolDebtUpdated(uint256 _principal, uint256 _interest);\\n    event DefaultPoolCollateralBalanceUpdated(uint256 _collateral);\\n    event CollateralAddressChanged(address _newCollateralAddress);\\n\\n    // --- Functions ---\\n    function sendCollateralToActivePool(uint256 _amount) external;\\n\\n    function collateralAddress() external view returns (address);\\n\\n    function getLastInterestUpdatedTime() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x764439d379b9f63c8c326327a8287d3e071f3c37b8907034c36e236b7f739c6a\",\"license\":\"MIT\"},\"contracts/interfaces/IGasPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\ninterface IGasPool {\\n    // --- Events ---\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event MUSDTokenAddressChanged(address _musdTokenAddress);\\n\\n    // --- Functions ---\\n    function sendMUSD(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xfd6c072d1e7f3221a486677602cfea1ae4db1531ec0267d1eba1b41251fc5b60\",\"license\":\"MIT\"},\"contracts/interfaces/IInterestRateManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.24;\\n\\ninterface IInterestRateManager {\\n    struct InterestRateInfo {\\n        uint256 principal;\\n        uint256 interest;\\n        uint256 lastUpdatedTime;\\n    }\\n    event PCVAddressChanged(address _pcvAddress);\\n    event TroveManagerAddressChanged(address _troveManagerAddress);\\n\\n    function interestRate() external view returns (uint16);\\n\\n    function setAddresses(\\n        address _pcvAddress,\\n        address _troveManagerAddress\\n    ) external;\\n\\n    function proposeInterestRate(uint16 _newProposedInterestRate) external;\\n\\n    function approveInterestRate() external;\\n\\n    function setMaxInterestRate(uint16 _newMaxInterestRate) external;\\n\\n    function addPrincipalToRate(uint16 _rate, uint256 _principal) external;\\n\\n    function addInterestToRate(uint16 _rate, uint256 _interest) external;\\n\\n    function removePrincipalFromRate(uint16 _rate, uint256 _principal) external;\\n\\n    function removeInterestFromRate(uint16 _rate, uint256 _interest) external;\\n\\n    function setLastUpdatedTime(uint16 _rate, uint256 _time) external;\\n\\n    function getInterestRateData(\\n        uint16 _rate\\n    ) external view returns (InterestRateInfo memory);\\n\\n    function calculateInterestOwed(\\n        uint256 _principal,\\n        uint16 _interestRate,\\n        uint256 startTime,\\n        uint256 endTime\\n    ) external pure returns (uint256);\\n\\n    function calculateDebtAdjustment(\\n        uint256 _interestOwed,\\n        uint256 _payment\\n    )\\n        external\\n        pure\\n        returns (uint256 principalAdjustment, uint256 interestAdjustment);\\n\\n    function updateSystemInterest(\\n        uint16 _rate\\n    ) external returns (uint256 interest);\\n\\n    function updateTroveDebt(\\n        uint256 _interestOwed,\\n        uint256 _payment,\\n        uint16 _rate\\n    )\\n        external\\n        returns (uint256 principalAdjustment, uint256 interestAdjustment);\\n}\\n\",\"keccak256\":\"0x4be704ff360b19cd63ea3d270e11b9d0d808d51a2ee31782c3773ed7072f22f0\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILiquityBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./IPriceFeed.sol\\\";\\n\\ninterface ILiquityBase {\\n    function priceFeed() external view returns (IPriceFeed);\\n}\\n\",\"keccak256\":\"0x3487979ac84a3324c2e7e7d3a0a5e565a75afa0e464f74f338a9ea2ef212ce23\",\"license\":\"MIT\"},\"contracts/interfaces/IPCV.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/IMUSD.sol\\\";\\n\\ninterface IPCV {\\n    // --- Events --\\n    event MUSDTokenAddressSet(address _musdTokenAddress);\\n    event BorrowerOperationsAddressSet(address _borrowerOperationsAddress);\\n    event CollateralAddressSet(address _collateralAddress);\\n    event RolesSet(address _council, address _treasury);\\n    event MUSDWithdraw(address _recipient, uint256 _amount);\\n    event CollateralWithdraw(address _recipient, uint256 _collateralAmount);\\n    event PCVDebtPaid(uint256 _paidDebt);\\n    event RecipientAdded(address _recipient);\\n    event RecipientRemoved(address _recipient);\\n    event PCVFeePaid(address _recipient, uint256 _amount);\\n\\n    // --- Functions ---\\n\\n    function debtToPay() external returns (uint256);\\n\\n    function payDebt(uint256 _musdToBurn) external;\\n\\n    function setAddresses(\\n        address _musdTokenAddress,\\n        address _borrowerOperations,\\n        address _collateralERC20\\n    ) external;\\n\\n    function initialize() external;\\n\\n    function setFeeRecipient(address _feeRecipient) external;\\n\\n    function setFeeSplit(uint8 _feeSplitPercentage) external;\\n\\n    function withdrawMUSD(address _recipient, uint256 _musdAmount) external;\\n\\n    function withdrawCollateral(\\n        address _recipient,\\n        uint256 _collateralAmount\\n    ) external;\\n\\n    function addRecipientToWhitelist(address _recipient) external;\\n\\n    function addRecipientsToWhitelist(address[] calldata _recipients) external;\\n\\n    function removeRecipientFromWhitelist(address _recipient) external;\\n\\n    function removeRecipientsFromWhitelist(\\n        address[] calldata _recipients\\n    ) external;\\n\\n    function startChangingRoles(address _council, address _treasury) external;\\n\\n    function cancelChangingRoles() external;\\n\\n    function finalizeChangingRoles() external;\\n\\n    function collateralERC20() external view returns (IERC20);\\n\\n    function musd() external view returns (IMUSD);\\n\\n    function council() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf2e5f6afa185a4e8fd73539a29a3d266048ab17fa52e56c4b0bbde0cc88540d5\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\n// Common interface for the Pools.\\ninterface IPool {\\n    // --- Events ---\\n\\n    event CollateralBalanceUpdated(uint256 _newBalance);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event CollateralSent(address _to, uint256 _amount);\\n\\n    // --- Functions ---\\n\\n    function increaseDebt(uint256 _principal, uint256 _interest) external;\\n\\n    function decreaseDebt(uint256 _principal, uint256 _interest) external;\\n\\n    function getCollateralBalance() external view returns (uint);\\n\\n    function getDebt() external view returns (uint);\\n\\n    function getPrincipal() external view returns (uint);\\n\\n    function getInterest() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xfdb6fcad4c0965cf8617ce3db22d9db8661929ec8a1466672397f20fedb68550\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\ninterface IPriceFeed {\\n    // --- Events ---\\n    event LastGoodPriceUpdated(uint256 _lastGoodPrice);\\n\\n    event NewOracleRegistered(address _oracle);\\n\\n    // --- Function ---\\n    function fetchPrice() external returns (uint);\\n\\n    function setOracle(address _oracle) external;\\n}\\n\",\"keccak256\":\"0x2c0d4f671d023fd09105eaccdc68d34db8ec0aac71fdb15a23a279d1d56d9f28\",\"license\":\"MIT\"},\"contracts/interfaces/ISortedTroves.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\n// Common interface for the SortedTroves Doubly Linked List.\\ninterface ISortedTroves {\\n    // --- Events ---\\n\\n    event SortedTrovesAddressChanged(address _sortedDoublyLLAddress);\\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\n    event NodeAdded(address _id, uint256 _NICR);\\n    event NodeRemoved(address _id);\\n\\n    // --- Functions ---\\n\\n    function setParams(\\n        uint256 _size,\\n        address _TroveManagerAddress,\\n        address _borrowerOperationsAddress\\n    ) external;\\n\\n    function insert(\\n        address _id,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    function remove(address _id) external;\\n\\n    function reInsert(\\n        address _id,\\n        uint256 _newNICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    function contains(address _id) external view returns (bool);\\n\\n    function isFull() external view returns (bool);\\n\\n    function isEmpty() external view returns (bool);\\n\\n    function getSize() external view returns (uint256);\\n\\n    function getMaxSize() external view returns (uint256);\\n\\n    function getFirst() external view returns (address);\\n\\n    function getLast() external view returns (address);\\n\\n    function getNext(address _id) external view returns (address);\\n\\n    function getPrev(address _id) external view returns (address);\\n\\n    function validInsertPosition(\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (bool);\\n\\n    function findInsertPosition(\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (address, address);\\n}\\n\",\"keccak256\":\"0xfcc79b16288d5ba5b7001d5dfdac2ad415212d74dddd442d2af7b89f2fd1d5f9\",\"license\":\"MIT\"},\"contracts/interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\n/*\\n * The Stability Pool holds mUSD tokens deposited by Stability Pool depositors.\\n *\\n * When a trove is liquidated, then depending on system conditions, some of its debt gets offset with\\n * mUSD in the Stability Pool: that is, the offset debt evaporates, and an equal amount of mUSD tokens in the Stability Pool are burned.\\n *\\n * Thus, a liquidation causes each depositor to receive a mUSD loss in proportion to their deposit as a share of total deposits.\\n * They also receive an collateral gain, as the collateral of the liquidated trove is distributed among Stability depositors\\n * in the same proportion.\\n *\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\n * of the total mUSD in the Stability Pool, depletes 40% of each deposit.\\n *\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\n * multiplying it by some factor in range ]0,1[\\n *\\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / collateral gain derivations:\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\n *\\n */\\ninterface IStabilityPool {\\n    // --- Events ---\\n\\n    event StabilityPoolCollateralBalanceUpdated(uint256 _newBalance);\\n    event StabilityPoolMUSDBalanceUpdated(uint256 _newBalance);\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event MUSDTokenAddressChanged(address _newMUSDTokenAddress);\\n    event SortedTrovesAddressChanged(address _newSortedTrovesAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event CollateralAddressChanged(address _newCollateralAddress);\\n\\n    event PUpdated(uint256 _P);\\n    event SUpdated(uint256 _S, uint128 _epoch, uint128 _scale);\\n    event EpochUpdated(uint128 _currentEpoch);\\n    event ScaleUpdated(uint128 _currentScale);\\n\\n    event DepositSnapshotUpdated(\\n        address indexed _depositor,\\n        uint256 _P,\\n        uint256 _S\\n    );\\n    event UserDepositChanged(address indexed _depositor, uint256 _newDeposit);\\n\\n    event CollateralGainWithdrawn(\\n        address indexed _depositor,\\n        uint256 _collateral,\\n        uint256 _MUSDLoss\\n    );\\n    event CollateralSent(address _to, uint256 _amount);\\n\\n    // --- Functions ---\\n\\n    /*\\n     * Called only once on init, to set addresses of other Liquity contracts\\n     * Callable only by owner, renounces ownership at the end\\n     */\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _musdTokenAddress,\\n        address _sortedTrovesAddress,\\n        address _priceFeedAddress,\\n        address _collateralAddress\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is not zero\\n     * ---\\n     * - Sends depositor's accumulated gains (collateral) to depositor\\n     */\\n    function provideToSP(uint256 _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is zero or there are no under collateralized troves left in the system\\n     * - User has a non zero deposit\\n     * ---\\n     * - Sends all depositor's accumulated gains (collateral) to depositor\\n     * - Decreases deposit stake, and takes new snapshot.\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(uint256 _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - User has a non zero deposit\\n     * - User has an open trove\\n     * - User has some collateral gain\\n     * ---\\n     * - Transfers the depositor's entire collateral gain from the Stability Pool to the caller's trove\\n     * - Leaves their compounded deposit in the Stability Pool\\n     * - Updates snapshots for deposit\\n     */\\n    function withdrawCollateralGainToTrove(\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Caller is TroveManager\\n     * ---\\n     * Cancels out the specified debt against the mUSD contained in the Stability Pool (as far as possible)\\n     * and transfers the Trove's collateral from ActivePool to StabilityPool.\\n     * Only called by liquidation functions in the TroveManager.\\n     */\\n    function offset(uint256 _debt, uint256 _coll) external;\\n\\n    /*\\n     * Returns the total amount of collateral held by the pool, accounted in an internal variable instead of `balance`,\\n     * to exclude edge cases like collateral received from a self-destruct.\\n     */\\n    function getCollateralBalance() external view returns (uint);\\n\\n    /*\\n     * Returns mUSD held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\n     */\\n    function getTotalMUSDDeposits() external view returns (uint);\\n\\n    /*\\n     * Calculates the collateral gain earned by the deposit since its last snapshots were taken.\\n     */\\n    function getDepositorCollateralGain(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Return the user's compounded deposit.\\n     */\\n    function getCompoundedMUSDDeposit(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Fallback function\\n     * Only callable by Active Pool, it just accounts for BTC received\\n     * receive() external payable;\\n     */\\n\\n    function collateralAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa826c8d5909d57d4eb23c7e4a9c5496c8c41ed759fbaf8a574cf39d26779c08f\",\"license\":\"MIT\"},\"contracts/interfaces/ITroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./IStabilityPool.sol\\\";\\nimport \\\"./IPCV.sol\\\";\\n\\n// Common interface for the Trove Manager.\\ninterface ITroveManager {\\n    enum Status {\\n        nonExistent,\\n        active,\\n        closedByOwner,\\n        closedByLiquidation,\\n        closedByRedemption\\n    }\\n\\n    struct InterestRateChange {\\n        uint16 interestRate;\\n        uint256 blockNumber;\\n    }\\n\\n    // --- Events ---\\n\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event InterestRateManagerAddressChanged(\\n        address _interestRateManagerAddress\\n    );\\n    event MUSDTokenAddressChanged(address _newMUSDTokenAddress);\\n    event PCVAddressChanged(address _pcvAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n\\n    event Liquidation(\\n        uint256 _liquidatedPrincipal,\\n        uint256 _liquidatedInterest,\\n        uint256 _liquidatedColl,\\n        uint256 _collGasCompensation,\\n        uint256 _gasCompensation\\n    );\\n    event Redemption(\\n        uint256 _attemptedAmount,\\n        uint256 _actualAmount,\\n        uint256 _collateralSent,\\n        uint256 _collateralFee\\n    );\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint256 _principal,\\n        uint256 _interest,\\n        uint256 _coll,\\n        uint256 stake,\\n        uint8 operation\\n    );\\n    event TroveLiquidated(\\n        address indexed _borrower,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint8 operation\\n    );\\n    event BaseRateUpdated(uint256 _baseRate);\\n    event LastFeeOpTimeUpdated(uint256 _lastFeeOpTime);\\n    event TotalStakesUpdated(uint256 _newTotalStakes);\\n    event SystemSnapshotsUpdated(\\n        uint256 _totalStakesSnapshot,\\n        uint256 _totalCollateralSnapshot\\n    );\\n    event LTermsUpdated(\\n        uint256 _L_Collateral,\\n        uint256 _L_Principal,\\n        uint256 _L_Interest\\n    );\\n    event TroveSnapshotsUpdated(\\n        uint256 _L_Collateral,\\n        uint256 _L_Principal,\\n        uint256 _L_Interest\\n    );\\n    event TroveIndexUpdated(address _borrower, uint256 _newIndex);\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _activePoolAddress,\\n        address _borrowerOperationsAddress,\\n        address _collSurplusPoolAddress,\\n        address _defaultPoolAddress,\\n        address _gasPoolAddress,\\n        address _interestRateManagerAddress,\\n        address _musdTokenAddress,\\n        address _pcvAddress,\\n        address _priceFeedAddress,\\n        address _sortedTrovesAddress,\\n        address _stabilityPoolAddress\\n    ) external;\\n\\n    function liquidate(address _borrower) external;\\n\\n    function batchLiquidateTroves(address[] calldata _troveArray) external;\\n\\n    function redeemCollateral(\\n        uint256 _amount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint256 _partialRedemptionHintNICR,\\n        uint256 _maxIterations,\\n        uint256 _maxFeePercentage\\n    ) external;\\n\\n    function updateStakeAndTotalStakes(\\n        address _borrower\\n    ) external returns (uint);\\n\\n    function updateTroveRewardSnapshots(address _borrower) external;\\n\\n    function addTroveOwnerToArray(\\n        address _borrower\\n    ) external returns (uint256 index);\\n\\n    function applyPendingRewards(address _borrower) external;\\n\\n    function closeTrove(address _borrower) external;\\n\\n    function removeStake(address _borrower) external;\\n\\n    function decayBaseRateFromBorrowing() external;\\n\\n    function setTroveStatus(address _borrower, Status _status) external;\\n\\n    function setTroveMaxBorrowingCapacity(\\n        address _borrower,\\n        uint256 _maxBorrowingCapacity\\n    ) external;\\n\\n    function updateDefaultPoolInterest() external;\\n\\n    function updateSystemAndTroveInterest(address _borrower) external;\\n\\n    function increaseTroveColl(\\n        address _borrower,\\n        uint256 _collIncrease\\n    ) external returns (uint);\\n\\n    function decreaseTroveColl(\\n        address _borrower,\\n        uint256 _collDecrease\\n    ) external returns (uint);\\n\\n    function increaseTroveDebt(\\n        address _borrower,\\n        uint256 _debtIncrease\\n    ) external returns (uint256);\\n\\n    function decreaseTroveDebt(\\n        address _borrower,\\n        uint256 _debtDecrease\\n    ) external returns (uint256, uint256);\\n\\n    function setTroveInterestRate(address _borrower, uint16 _rate) external;\\n\\n    function setTroveLastInterestUpdateTime(\\n        address _borrower,\\n        uint256 _timestamp\\n    ) external;\\n\\n    function stabilityPool() external view returns (IStabilityPool);\\n\\n    function pcv() external view returns (IPCV);\\n\\n    function getTroveOwnersCount() external view returns (uint);\\n\\n    function getTroveFromTroveOwnersArray(\\n        uint256 _index\\n    ) external view returns (address);\\n\\n    function getTroveInterestOwed(\\n        address _borrower\\n    ) external view returns (uint256);\\n\\n    function getTrovePrincipal(address _borrower) external view returns (uint);\\n\\n    function getNominalICR(address _borrower) external view returns (uint);\\n\\n    function getCurrentICR(\\n        address _borrower,\\n        uint256 _price\\n    ) external view returns (uint);\\n\\n    function getPendingCollateral(\\n        address _borrower\\n    ) external view returns (uint);\\n\\n    function getPendingDebt(\\n        address _borrower\\n    ) external view returns (uint256, uint256);\\n\\n    function hasPendingRewards(address _borrower) external view returns (bool);\\n\\n    function getEntireDebtAndColl(\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 coll,\\n            uint256 principal,\\n            uint256 interest,\\n            uint256 pendingCollateral,\\n            uint256 pendingPrincipal,\\n            uint256 pendingInterest\\n        );\\n\\n    function getRedemptionRate() external view returns (uint);\\n\\n    function getRedemptionRateWithDecay() external view returns (uint);\\n\\n    function getRedemptionFeeWithDecay(\\n        uint256 _collateralDrawn\\n    ) external view returns (uint);\\n\\n    function getBorrowingRate() external view returns (uint);\\n\\n    function getBorrowingRateWithDecay() external view returns (uint);\\n\\n    function getBorrowingFee(uint256 _debt) external view returns (uint);\\n\\n    function getBorrowingFeeWithDecay(\\n        uint256 _debt\\n    ) external view returns (uint);\\n\\n    function getTroveStatus(address _borrower) external view returns (Status);\\n\\n    function getTroveStake(address _borrower) external view returns (uint);\\n\\n    function getTroveDebt(address _borrower) external view returns (uint);\\n\\n    function getTroveInterestRate(\\n        address _borrower\\n    ) external view returns (uint16);\\n\\n    function getTroveLastInterestUpdateTime(\\n        address _borrower\\n    ) external view returns (uint);\\n\\n    function getTroveColl(address _borrower) external view returns (uint);\\n\\n    function getTCR(uint256 _price) external view returns (uint);\\n\\n    function checkRecoveryMode(uint256 _price) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x14774fba145999c49d0fff49dc484ff673e677796dbd55784014bd82ff0c405c\",\"license\":\"MIT\"},\"contracts/token/IMUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\n\\ninterface IMUSD is IERC20Metadata, IERC20Permit {\\n    // --- Events ---\\n    event BorrowerOperationsAddressAdded(address _newBorrowerOperationsAddress);\\n    event BalanceUpdated(address _user, uint256 _amount);\\n    event StabilityPoolAddressAdded(address _newStabilityPoolAddress);\\n    event TroveManagerAddressAdded(address _troveManagerAddress);\\n\\n    // --- Governance Functions ---\\n    function cancelAddContracts() external;\\n\\n    function cancelAddMintList() external;\\n\\n    function cancelRevokeBurnList() external;\\n\\n    function cancelRevokeMintList() external;\\n\\n    function startAddContracts(\\n        address _troveManagerAddress,\\n        address _stabilityPoolAddress,\\n        address _borrowerOperationsAddress\\n    ) external;\\n\\n    function startAddMintList(address _account) external;\\n\\n    function startRevokeBurnList(address _account) external;\\n\\n    function startRevokeMintList(address _account) external;\\n\\n    function finalizeAddContracts() external;\\n\\n    function finalizeAddMintList() external;\\n\\n    function finalizeRevokeBurnList() external;\\n\\n    function finalizeRevokeMintList() external;\\n\\n    // --- External Functions ---\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burnList(address contractAddress) external view returns (bool);\\n\\n    function mintList(address contractAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4014a99bbb60336e6785e26162c262081ef944d5fdc5158030c4ca7248586cce\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5033806200003957604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b62000044816200004b565b506200009d565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b615b2380620000ad6000396000f3fe608060405234801561001057600080fd5b50600436106104e25760003560e01c806385a43ca81161028e578063cda775f911610167578063e07fdf03116100d9578063f36b242511610092578063f36b242514610bde578063f540d3dc14610be6578063f92d343314610651578063fc0d84ee14610bef578063fe2ba84814610c1b578063fe9d032314610c2e57600080fd5b8063e07fdf0314610b44578063e18c513114610b70578063e2ac77b014610b83578063e6cfa17414610b96578063ee266b8714610bc2578063f2fde38b14610bcb57600080fd5b8063d5b356351161012b578063d5b3563514610ae7578063d5b97eea14610afa578063d66a255314610b03578063d9a7244414610b16578063dbcf424d14610b29578063df15cd0d14610b3157600080fd5b8063cda775f914610a9c578063d293c71014610aaf578063d380a37c14610ac2578063d38b055814610acb578063d3d6f84314610ad457600080fd5b8063b0d8e18111610200578063be2909bc116101c4578063be2909bc14610a43578063bf9befb114610a56578063c52861f214610a5f578063c651fd8614610a67578063c7b5548114610a7a578063cbd138ae14610a8957600080fd5b8063b0d8e181146109b7578063b7f8cf9b146109ca578063b82f263d146109dd578063b91af97c146109f0578063bcd3752614610a3057600080fd5b8063953f0bb111610252578063953f0bb11461096257806396d711ff146109755780639976cf451461097e5780639d78d46b14610991578063a20baee614610811578063ae918754146109a457600080fd5b806385a43ca8146108c2578063887105d3146108ee5780638b36fd60146108f65780638da5cb5b1461090957806392b7659b1461091a57600080fd5b806349eefeee116103c057806372fe25aa11610332578063795d26c3116102f6578063795d26c3146108685780637985c5e4146108705780637af110ba146108835780637f7dde4a14610893578063807d138d146108a657806382fe3eb9146108af57600080fd5b806372fe25aa146108115780637412e00814610820578063741bef1a14610833578063756b253e14610846578063794e57241461085957600080fd5b8063631203b011610384578063631203b01461073357806364cee2601461074657806366ca4a21146107725780636ef643381461077a578063715018a6146107f657806372423c17146107fe57600080fd5b806349eefeee146106de5780634e443d9e146106e65780635733d58f146107095780635b9fb3cd146107185780635dba4c4a1461072b57600080fd5b806321e37801116104595780632f8655681161041d5780632f865568146106615780633cc74225146106745780634597f6ed14610687578063477d66cf1461069a578063480cd578146106ad5780634870dd9a146106d657600080fd5b806321e3780114610604578063240926691461064057806328b137201461064857806328d28b5b146106515780632b11551a1461065957600080fd5b806315d549f1116104ab57806315d549f1146105685780631673c79a1461057b57806318f2817a146105c55780631bf43555146105d85780631e8b1c2b146105e85780631f68f20a146105fb57600080fd5b8062f48ae4146104e7578063048c661d14610503578063071a7541146105235780630b0765571461052b57806312610e9214610540575b600080fd5b6104f060145481565b6040519081526020015b60405180910390f35b600554610516906001600160a01b031681565b6040516104fa91906154d0565b6104f0600281565b61053e610539366004615509565b610c41565b005b61055361054e366004615526565b610c71565b604080519283526020830191909152016104fa565b6104f0610576366004615509565b610caf565b6105aa610589366004615509565b60196020526000908152604090208054600182015460029092015490919083565b604080519384526020840192909252908201526060016104fa565b6104f06105d3366004615509565b610cd1565b6104f0686194049f30f720000081565b61053e6105f6366004615568565b610cea565b6104f0600c5481565b610633610612366004615509565b6001600160a01b03166000908152600e602052604090206004015460ff1690565b6040516104fa9190615665565b6104f0611141565b6104f060135481565b6104f0611163565b6104f0611179565b61053e61066f366004615509565b61118b565b600154610516906001600160a01b031681565b600954610516906001600160a01b031681565b6104f06106a8366004615673565b6111f7565b6104f06106bb366004615509565b6001600160a01b03166000908152600e602052604090205490565b6104f060c881565b6015546104f0565b6106f96106f4366004615673565b61120a565b60405190151581526020016104fa565b6104f06714d1120d7b16000081565b600b54610516906001600160a01b031681565b61053e611215565b6104f0610741366004615673565b611281565b6104f0610754366004615509565b6001600160a01b03166000908152600e602052604090206003015490565b6104f061128e565b6107e1610788366004615509565b600e6020526000908152604090208054600182015460028301546003840154600485015460058601546006870154600790970154959694959394929360ff83169361010090930461ffff1692906001600160801b031689565b6040516104fa9998979695949392919061568c565b61053e6112a0565b6104f061080c366004615526565b6112b4565b6104f0670de0b6b3a764000081565b61053e61082e3660046156fc565b611306565b600254610516906001600160a01b031681565b610516610854366004615673565b611346565b6104f0670f43fc2c04ee000081565b6104f0611370565b61053e61087e366004615735565b61146c565b6104f0680ad78ebc5ac620000081565b600054610516906001600160a01b031681565b6104f060105481565b61053e6108bd366004615509565b6117b1565b6104f06108d0366004615509565b6001600160a01b03166000908152600e602052604090206002015490565b6104f06117c2565b61053e610904366004615526565b611887565b6003546001600160a01b0316610516565b61094f610928366004615509565b6001600160a01b03166000908152600e6020526040902060040154610100900461ffff1690565b60405161ffff90911681526020016104fa565b61053e610970366004615813565b6118ae565b6104f060115481565b6104f061098c366004615526565b6118fb565b600854610516906001600160a01b031681565b600a54610516906001600160a01b031681565b6104f06109c5366004615509565b611953565b600454610516906001600160a01b031681565b6104f06109eb366004615673565b61197a565b610a036109fe366004615509565b611985565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016104fa565b61053e610a3e366004615845565b6119f4565b61053e610a51366004615526565b61209a565b6104f0600f5481565b6104f06120c1565b61053e610a75366004615509565b6120d3565b6104f0670ddd4b8c6c7d70d881565b61053e610a97366004615509565b6121b0565b600754610516906001600160a01b031681565b6104f0610abd366004615526565b6121c3565b6104f0600d5481565b6104f060165481565b6104f0610ae2366004615526565b6121ec565b6104f0610af5366004615673565b61221a565b6104f060185481565b6104f0610b11366004615509565b61222d565b610516610b24366004615673565b612238565b61053e612268565b6104f0610b3f366004615509565b612564565b6104f0610b52366004615509565b6001600160a01b03166000908152600e602052604090206006015490565b610553610b7e366004615509565b612615565b6106f9610b91366004615509565b61272a565b6104f0610ba4366004615509565b6001600160a01b03166000908152600e602052604090206001015490565b6104f060125481565b61053e610bd9366004615509565b61278e565b6104f06127c9565b6104f060175481565b6104f0610bfd366004615509565b6001600160a01b03166000908152600e602052604090206005015490565b61053e610c29366004615509565b6127d6565b600654610516906001600160a01b031681565b610c496127e7565b610c51612268565b600054600154610c6e916001600160a01b03908116911683612867565b50565b600080610c7c6127e7565b610c868484612a6e565b5050506001600160a01b03166000908152600e6020526040902060018101546002909101549091565b6000610cb96127e7565b610cc282612b50565b6001600160801b031692915050565b6000610cdb6127e7565b610ce482612be4565b92915050565b8051600003610d5f5760405162461bcd60e51b815260206004820152603660248201527f54726f76654d616e616765723a2043616c6c646174612061646472657373206160448201527572726179206d757374206e6f7420626520656d70747960501b60648201526084015b60405180910390fd5b60005b8151811015610d9b576000828281518110610d7f57610d7f6158b3565b60200260200101519050610d92816120d3565b50600101610d62565b5060008054600154600554604080516080810182528581526020810186905290810185905260608101949094526001600160a01b0392831693918316921690610de261542e565b600260009054906101000a90046001600160a01b03166001600160a01b0316630fdb11cf6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5b91906158c9565b826000018181525050826001600160a01b031663309077b36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ea2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec691906158c9565b60208301528151610ed690612c86565b15156040830152610ee5612268565b816040015115610f0b57610f048585846000015185602001518a612ca3565b9050610f23565b610f208585846000015185602001518a612ee3565b90505b6000816020015111610f825760405162461bcd60e51b815260206004820152602260248201527f54726f76654d616e616765723a206e6f7468696e6720746f206c697175696461604482015261746560f01b6064820152608401610d56565b60a081015160c082015160405163335525ad60e01b81526001600160a01b0386169263335525ad92610fbf92600401918252602082015260400190565b600060405180830381600087803b158015610fd957600080fd5b505af1158015610fed573d6000803e3d6000fd5b5050505061100c85858360e00151846101000151856101200151612fb8565b6101408101511561108357600754610140820151604051636250216960e01b81526001600160a01b03888116936362502169936110509392909116916004016158e2565b600060405180830381600087803b15801561106a57600080fd5b505af115801561107e573d6000803e3d6000fd5b505050505b611091858260600151613286565b610140810151606082015182516110a89190615911565b6110b29190615911565b6060808401829052602083015160408085015192850151608086015191517f5823f33ee3da2874398138f21ff2fcd7078180caf18ccb37ac445d9a5abfa75f9561111d9593909291948552602085019390935260408401919091526060830152608082015260a00190565b60405180910390a16111398533836080015184606001516133d1565b505050505050565b6064611156670de0b6b3a76400006005615924565b6111609190615951565b81565b6103e8611156670de0b6b3a76400006005615924565b6000611186600c546134a8565b905090565b611194816134e6565b6040805160018082528183019092526000916020808301908036833701905050905081816000815181106111ca576111ca6158b3565b60200260200101906001600160a01b031690816001600160a01b0316815250506111f381610cea565b5050565b6000610ce461120461128e565b8361357e565b6000610ce482612c86565b61121d6127e7565b60006112276135a4565b9050670de0b6b3a764000081111561124157611241615965565b600c8190556040518181527fc454ee9b76c52f782a256af821b857ca6e125d1e3333bcede402fec2bed9600c9060200160405180910390a1610c6e6135e8565b6000610ce46112046127c9565b600061118661129b6135a4565b61363f565b6112a8613693565b6112b260006136c0565b565b60006112be6127e7565b6001600160a01b0383166000908152600e60205260408120546112e290849061597b565b6001600160a01b0385166000908152600e6020526040902081905591505092915050565b61130e6127e7565b6001600160a01b039091166000908152600e60205260409020600401805461ffff9092166101000262ffff0019909216919091179055565b6015818154811061135657600080fd5b6000918252602090912001546001600160a01b0316905081565b60008054604080516314a6bf0f60e01b8152905183926001600160a01b0316916314a6bf0f9160048083019260209291908290030181865afa1580156113ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113de91906158c9565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166314a6bf0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611435573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145991906158c9565b9050611465818361597b565b9250505090565b611474613693565b61147d8b613712565b6114868a613712565b61148f89613712565b61149888613712565b6114a187613712565b6114aa85613712565b6114b384613712565b6114bc83613712565b6114c582613712565b6114ce81613712565b6114d786613712565b600480546001600160a01b03199081166001600160a01b038d8116919091179092556000805482168e84161790556001805482168b84161790556005805482168484161790556006805482168a84161790556007805482168c8416179055600280548216868416179055600880548216888416179055600a80548216858416179055600980548216878416179055600b80549091169188169190911790556040517f3ca631ffcd2a9b5d9ae18543fc82f58eb4ca33af9e6ab01b7a8e95331e6ed985906115a5908c906154d0565b60405180910390a17f78f058b189175430c48dc02699e3a0031ea4ff781536dc2fab847de4babdd8828b6040516115dc91906154d0565b60405180910390a17f5ee0cae2f063ed938bb55046f6a932fb6ae792bf43624806bb90abe68a50be9b8860405161161391906154d0565b60405180910390a17f82966d27eea39b038ee0fa30cd16532bb24f6e65d31cb58fb227aa5766cdcc7f8160405161164a91906154d0565b60405180910390a17fcfb07d791fcafc032b35837b50eb84b74df518cf4cc287e8084f47630fa70fa08760405161168191906154d0565b60405180910390a17fe67f36a6e961157d6eff83b91f3af5a62131ceb6f04954ef74f51c1c05e7f88d896040516116b891906154d0565b60405180910390a17f8c537274438aa850a330284665d81a85dd38267d09e4050d416bfc94142db264836040516116ef91906154d0565b60405180910390a17f547e9055f019d1e165f0ca2133494723cb248f8536192c218254285fc43c56688560405161172691906154d0565b60405180910390a17f65f4cf077bc01e4742eb5ad98326f6e95b63548ea24b17f8d5e823111fe788008260405161175d91906154d0565b60405180910390a17f38335c64466e2376ab931166337e19127650d842036ebe01da1ba3e5c1255ebb8460405161179491906154d0565b60405180910390a16117a46112a0565b5050505050505050505050565b6117b96127e7565b610c6e816137b7565b6000805460408051631529a63960e01b8152905183926001600160a01b031691631529a6399160048083019260209291908290030181865afa15801561180c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183091906158c9565b90506000600160009054906101000a90046001600160a01b03166001600160a01b0316631529a6396040518163ffffffff1660e01b8152600401602060405180830381865afa158015611435573d6000803e3d6000fd5b61188f6127e7565b6001600160a01b039091166000908152600e6020526040902060050155565b6118b66127e7565b6001600160a01b0382166000908152600e6020526040902060049081018054839260ff199091169060019084908111156118f2576118f261562d565b02179055505050565b60006119056127e7565b6001600160a01b0383166000908152600e602052604081206001015461192c90849061597b565b6001600160a01b0385166000908152600e6020526040902060010181905591505092915050565b600080600061196184613828565b9150915060006119718383613898565b95945050505050565b6000610ce4826138ce565b6001600160a01b0381166000908152600e6020526040812080546001820154600290920154909280806119b787612564565b92506119c287612615565b90925090506119d1838761597b565b95506119dd828661597b565b94506119e9818561597b565b935091939550919395565b6040805160e08082018352600080546001600160a01b03908116845260015481166020808601919091526008548216858701526009548216606080870191909152600a548316608080880191909152600754841660a08089019190915260065490941660c080890191909152885161010081018a5286815293840186905297830185905290820184905281018390529081018290529384018190529083015290611a9d836138fa565b600260009054906101000a90046001600160a01b03166001600160a01b0316630fdb11cf6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1691906158c9565b60c08201819052611b2690613996565b611b2f89613a09565b611b3e8260400151338b613a70565b611b46611370565b60e0820152888152608082015160c0820151600091611b66918b90613b6f565b15611b72575087611c84565b82608001516001600160a01b0316634d6228316040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd8919061598e565b90505b6001600160a01b03811615801590611c075750670f43fc2c04ee0000611c05828460c001516121c3565b105b15611c845782608001516001600160a01b031663b72703ac826040518263ffffffff1660e01b8152600401611c3c91906154d0565b602060405180830381865afa158015611c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7d919061598e565b9050611bdb565b84600003611c925760001994505b611c9a612268565b6001600160a01b03811615801590611cb25750815115155b8015611cbe5750600085115b15611dd15784611ccd816159ab565b955050600083608001516001600160a01b031663b72703ac836040518263ffffffff1660e01b8152600401611d0291906154d0565b602060405180830381865afa158015611d1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d43919061598e565b9050611d588460000151856020015184612867565b6000611d71858486600001518760c001518e8e8e613cb9565b9050806040015115611d84575050611dd1565b8051602085018051611d9790839061597b565b9052506020810151604085018051611db090839061597b565b905250805184518590611dc4908390615911565b905250909150611c9a9050565b6000826040015111611e375760405162461bcd60e51b815260206004820152602960248201527f54726f76654d616e616765723a20556e61626c6520746f2072656465656d20616044820152681b9e48185b5bdd5b9d60ba1b6064820152608401610d56565b611e4e82604001518360c001518460e001516140a6565b50611e5c8260400151614149565b606083018190526040830151611e73919086614156565b825160608085015190840151604051636250216960e01b81526001600160a01b0390931692636250216992611eac9290916004016158e2565b600060405180830381600087803b158015611ec657600080fd5b505af1158015611eda573d6000803e3d6000fd5b50505060608301516040840151611ef19250615911565b60808301526020820151604080840151606085015191517f43a3f4082a4dbc33d78e317d2497d3a730bc7fc3574159dcea1056e62e5d9ad893611f4d938f93919293845260208401929092526040830152606082015260800190565b60405180910390a182604001516001600160a01b0316639dc29fac3384602001516040518363ffffffff1660e01b8152600401611f8b9291906158e2565b600060405180830381600087803b158015611fa557600080fd5b505af1158015611fb9573d6000803e3d6000fd5b50508451602085015160405163ab11fadd60e01b81526004810191909152600060248201526001600160a01b03909116925063ab11fadd9150604401600060405180830381600087803b15801561200f57600080fd5b505af1158015612023573d6000803e3d6000fd5b505084516080850151604051636250216960e01b81526001600160a01b0390921693506362502169925061205c913391906004016158e2565b600060405180830381600087803b15801561207657600080fd5b505af115801561208a573d6000803e3d6000fd5b5050505050505050505050505050565b6120a26127e7565b6001600160a01b039091166000908152600e6020526040902060060155565b60006111866120ce6135a4565b6134a8565b6001600160a01b0381166000908152600e60205260409020600481015461210290610100900461ffff166141c7565b600b546001820154600480840154600585015460405163ac3058ad60e01b81526001600160a01b039095169463ac3058ad9461214d949093610100900461ffff1692914291016159c2565b602060405180830381865afa15801561216a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218e91906158c9565b8160020160008282546121a1919061597b565b90915550504260059091015550565b6121b86127e7565b610c6e816002614305565b60008060006121d185613828565b9150915060006121e28383876144be565b9695505050505050565b60006121f66127e7565b6001600160a01b0383166000908152600e60205260408120546112e2908490615911565b6000610ce46122276120c1565b836144ef565b6000610ce48261457f565b60006015828154811061224d5761224d6158b3565b6000918252602090912001546001600160a01b031692915050565b600f54156112b257600b546001546040805163534def8b60e11b815290516000936001600160a01b039081169363ac3058ad9391169163a69bdf16916004808201926020929091908290030181865afa1580156122c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ed91906158c9565b600b60009054906101000a90046001600160a01b03166001600160a01b0316637c3a00fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612340573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236491906159e1565b600160009054906101000a90046001600160a01b03166001600160a01b03166310710f726040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123db91906158c9565b426040518563ffffffff1660e01b81526004016123fb94939291906159c2565b602060405180830381865afa158015612418573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243c91906158c9565b90506000601854670de0b6b3a7640000836124579190615924565b612461919061597b565b90506000600f54826124739190615951565b9050600f54816124839190615924565b61248d9083615911565b60188190555080601460008282546124a5919061597b565b90915550506001546040516354c4666160e01b815260006004820152602481018590526001600160a01b03909116906354c4666190604401600060405180830381600087803b1580156124f757600080fd5b505af115801561250b573d6000803e3d6000fd5b50506012546013546014546040517f16406a7d6b3c0e446c1c3b66751ebc9bae57378f3b6eeaf3685f3c2f1ee8cafc955061255794509283526020830191909152604082015260600190565b60405180910390a1505050565b6001600160a01b038116600090815260196020526040812054601254829061258d908390615911565b90508015806125cd575060016001600160a01b0385166000908152600e6020526040902060049081015460ff16908111156125ca576125ca61562d565b14155b156125dc575060009392505050565b6001600160a01b0384166000908152600e6020526040902060030154670de0b6b3a764000061260b8383615924565b6119719190615951565b6001600160a01b0381166000908152601960205260408120600101546013548291908290612644908390615911565b6001600160a01b03861660009081526019602052604081206002015460145492935091612672908390615911565b90508215806126b2575060016001600160a01b0388166000908152600e6020526040902060049081015460ff16908111156126af576126af61562d565b14155b156126c65750600096879650945050505050565b6001600160a01b0387166000908152600e6020526040902060030154670de0b6b3a76400006126f58583615924565b6126ff9190615951565b9650670de0b6b3a76400006127148383615924565b61271e9190615951565b95505050505050915091565b600060016001600160a01b0383166000908152600e6020526040902060049081015460ff169081111561275f5761275f61562d565b1461276c57506000919050565b506012546001600160a01b039091166000908152601960205260409020541090565b612796613693565b6001600160a01b0381166127c0576000604051631e4fbdf760e01b8152600401610d5691906154d0565b610c6e816136c0565b6000611186600c5461363f565b6127de6127e7565b610c6e81614657565b6004546001600160a01b031633146112b25760405162461bcd60e51b815260206004820152603b60248201527f54726f76654d616e616765723a2043616c6c6572206973206e6f74207468652060448201527f426f72726f7765724f7065726174696f6e7320636f6e747261637400000000006064820152608401610d56565b6001600160a01b0381166000908152600e602052604090206128888261272a565b15612a6857612896826134e6565b60006128a183612564565b90506000806128af85612615565b915091506128bc856120d3565b828460000160008282546128d0919061597b565b92505081905550818460010160008282546128eb919061597b565b9250508190555080846002016000828254612906919061597b565b9091555050600b546004858101546040516379b381e360e01b815261010090910461ffff1691810191909152602481018490526001600160a01b03909116906379b381e390604401600060405180830381600087803b15801561296857600080fd5b505af115801561297c573d6000803e3d6000fd5b5050600b54600487810154604051635b5e7c1960e11b815261010090910461ffff1691810191909152602481018590526001600160a01b03909116925063b6bcf8329150604401600060405180830381600087803b1580156129dd57600080fd5b505af11580156129f1573d6000803e3d6000fd5b505050506129fe856137b7565b612a0b87878585856146a9565b846001600160a01b0316600080516020615ace833981519152856001015486600201548760000154886003015460006003811115612a4b57612a4b61562d565b604051612a5c9594939291906159fe565b60405180910390a25050505b50505050565b6001600160a01b038281166000908152600e6020526040808220600b54600282015460048084015494516327678dbd60e01b8152908101919091526024810187905261010090930461ffff166044840152909383929116906327678dbd9060640160408051808303816000875af1158015612aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b119190615a24565b9150915081836001016000828254612b299190615911565b9250508190555080836002016000828254612b449190615911565b90915550505050505050565b601580546001808201835560008381527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec47590920180546001600160a01b0319166001600160a01b03861617905591549091612baa91615911565b6001600160a01b03929092166000908152600e6020526040902060070180546001600160801b0319166001600160801b0384161790555090565b6001600160a01b0381166000908152600e60205260408120548190612c08906147cc565b6001600160a01b0384166000908152600e60205260409020600301805490829055600f54919250908290612c3d908390615911565b612c47919061597b565b600f8190556040519081527f6bac5e0eb3c44eb03a60ab11ec3a2c051771616aecadbcfff2630aabae5203829060200160405180910390a15092915050565b600080612c92836138ce565b6714d1120d7b160000119392505050565b612cab61542e565b612cb3615488565b612cbb61542e565b84825260006080830152612ccd611370565b60a0830152612cda6117c2565b60c0830152600060208301525b835182602001511015612ed85783826020015181518110612d0a57612d0a6158b3565b60209081029190910101516001600160a01b03166060830152600160608301516001600160a01b03166000908152600e6020526040902060049081015460ff1690811115612d5a57612d5a61562d565b03612ec057612d6d8260600151876121c3565b60408301526080820151612e6357670f43fc2c04ee0000826040015110158015612d9657508151155b612ec0576000612daf8360c001518460a00151896144be565b9050612dcc8989856060015186604001518760000151868d614802565b91508160a0015183600001818151612de49190615911565b90525060a0808301519084018051612dfd908390615911565b905250610140820151606083015160c0840151612e1a919061597b565b612e24919061597b565b8360c001818151612e359190615911565b905250612e428483614b12565b9350612e578360c001518460a0015189614c34565b15608084015250612ec0565b81608001518015612e7f5750670f43fc2c04ee00008260400151105b15612ec057612e98888884606001518560000151614c55565b90508060a0015182600001818151612eb09190615911565b905250612ebd8382614b12565b92505b60208201805190612ed082615a48565b905250612ce7565b505095945050505050565b612eeb61542e565b612ef3615488565b612efb61542e565b848252600060208301525b835182602001511015612ed85783826020015181518110612f2957612f296158b3565b60209081029190910101516001600160a01b031660608301819052612f4e90876121c3565b60408301819052670f43fc2c04ee00001115612fa057612f78888884606001518560000151614c55565b90508060a0015182600001818151612f909190615911565b905250612f9d8382614b12565b92505b60208201805190612fb082615a48565b905250612f06565b82158015612fc4575081155b61327f57612fd0612268565b601654600090612fe8670de0b6b3a764000084615924565b612ff2919061597b565b90506000601754670de0b6b3a76400008661300d9190615924565b613017919061597b565b90506000601854670de0b6b3a7640000866130329190615924565b61303c919061597b565b90506000600f548461304e9190615951565b90506000600f54846130609190615951565b90506000600f54846130729190615951565b9050600f54836130829190615924565b61308c9087615911565b601655600f5461309c9083615924565b6130a69086615911565b601755600f546130b69082615924565b6130c09085615911565b60188190555082601260008282546130d8919061597b565b9250508190555081601360008282546130f1919061597b565b92505081905550806014600082825461310a919061597b565b909155505060125460135460145460408051938452602084019290925282820152517f16406a7d6b3c0e446c1c3b66751ebc9bae57378f3b6eeaf3685f3c2f1ee8cafc9181900360600190a160405163ab11fadd60e01b8152600481018a9052602481018990526001600160a01b038c169063ab11fadd90604401600060405180830381600087803b15801561319f57600080fd5b505af11580156131b3573d6000803e3d6000fd5b50506040516354c4666160e01b8152600481018c9052602481018b90526001600160a01b038d1692506354c466619150604401600060405180830381600087803b15801561320057600080fd5b505af1158015613214573d6000803e3d6000fd5b5050604051636250216960e01b81526001600160a01b038e16925063625021699150613246908d908b906004016158e2565b600060405180830381600087803b15801561326057600080fd5b505af1158015613274573d6000803e3d6000fd5b505050505050505050505b5050505050565b600f546010819055506000826001600160a01b0316631529a6396040518163ffffffff1660e01b8152600401602060405180830381865afa1580156132cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132f391906158c9565b90506000600160009054906101000a90046001600160a01b03166001600160a01b0316631529a6396040518163ffffffff1660e01b8152600401602060405180830381865afa15801561334a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061336e91906158c9565b90508061337b8484615911565b613385919061597b565b60118190556010546040517f51bf4c63ec3cba9d03d43238abbdd979dd91bd16d9895c74ceea9118c7baaf60926133c3928252602082015260400190565b60405180910390a150505050565b811561343c5760065460405163264786dd60e01b81526001600160a01b039091169063264786dd9061340990869086906004016158e2565b600060405180830381600087803b15801561342357600080fd5b505af1158015613437573d6000803e3d6000fd5b505050505b8015612a6857604051636250216960e01b81526001600160a01b0385169063625021699061347090869085906004016158e2565b600060405180830381600087803b15801561348a57600080fd5b505af115801561349e573d6000803e3d6000fd5b5050505050505050565b6000610ce4826103e86134c4670de0b6b3a76400006005615924565b6134ce9190615951565b6134d8919061597b565b670de0b6b3a7640000614dc8565b60016001600160a01b0382166000908152600e6020526040902060049081015460ff16908111156135195761351961562d565b14610c6e5760405162461bcd60e51b815260206004820152602f60248201527f54726f76654d616e616765723a2054726f766520646f6573206e6f742065786960448201526e1cdd081bdc881a5cc818db1bdcd959608a1b6064820152608401610d56565b6000670de0b6b3a76400006135938385615924565b61359d9190615951565b9392505050565b6000806135af614dde565b905060006135c5670ddd4b8c6c7d70d883614dfa565b9050670de0b6b3a764000081600c546135de9190615924565b6114659190615951565b6000600d54426135f89190615911565b9050603c8110610c6e5742600d8190556040519081527f860f8d2f0c74dd487e89e2883e3b25b8159ce1e1b3433a291cba7b82c508f3bc906020015b60405180910390a150565b6000610ce4826103e861365b670de0b6b3a76400006005615924565b6136659190615951565b61366f919061597b565b6064613684670de0b6b3a76400006005615924565b61368e9190615951565b614dc8565b6003546001600160a01b031633146112b2573360405163118cdaa760e01b8152600401610d5691906154d0565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0381166137685760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f206164647265737300006044820152606401610d56565b803b806111f35760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f6044820152606401610d56565b601280546001600160a01b0383166000908152601960209081526040918290209283556013805460018501556014546002909401849055935493548251948552908401528201527fe083b7310cc9f9afc538d812522bbf1964db34ca10a6a4ffa9713025f4b3297190606001613634565b600080600061383684612564565b905060008061384486612615565b6001600160a01b0388166000908152600e6020526040902054919350915061386d90849061597b565b9450808261387a8861457f565b613884919061597b565b61388e919061597b565b9350505050915091565b600081156138c557816138b468056bc75e2d6310000085615924565b6138be9190615951565b9050610ce4565b50600019610ce4565b6000806138d96117c2565b905060006138e5611370565b90506138f28282866144be565b949350505050565b6103e8613910670de0b6b3a76400006005615924565b61391a9190615951565b81101580156139315750670de0b6b3a76400008111155b610c6e5760405162461bcd60e51b815260206004820152603060248201527f4d6178206665652070657263656e74616765206d75737420626520626574776560448201526f656e20302e352520616e64203130302560801b6064820152608401610d56565b670f43fc2c04ee00006139a8826138ce565b1015610c6e5760405162461bcd60e51b815260206004820152602a60248201527f54726f76654d616e616765723a2043616e6e6f742072656465656d207768656e604482015269102a21a9101e1026a1a960b11b6064820152608401610d56565b60008111610c6e5760405162461bcd60e51b815260206004820152602e60248201527f54726f76654d616e616765723a20416d6f756e74206d7573742062652067726560448201526d61746572207468616e207a65726f60901b6064820152608401610d56565b6040516370a0823160e01b815281906001600160a01b038516906370a0823190613a9e9086906004016154d0565b602060405180830381865afa158015613abb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613adf91906158c9565b1015613b6a5760405162461bcd60e51b815260206004820152604e60248201527f54726f76654d616e616765723a2052657175657374656420726564656d70746960448201527f6f6e20616d6f756e74206d757374206265203c3d20757365722773206d55534460648201526d20746f6b656e2062616c616e636560901b608482015260a401610d56565b505050565b60006001600160a01b0383161580613bf15750604051630bb7c8fd60e31b81526001600160a01b03851690635dbe47e890613bae9086906004016154d0565b602060405180830381865afa158015613bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bef9190615a61565b155b80613c0c5750670f43fc2c04ee0000613c0a84846121c3565b105b15613c195750600061359d565b60405163765e015960e01b81526000906001600160a01b0386169063765e015990613c489087906004016154d0565b602060405180830381865afa158015613c65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c89919061598e565b90506001600160a01b03811615806119715750670f43fc2c04ee0000613caf82856121c3565b1095945050505050565b613cdf604051806060016040528060008152602001600081526020016000151581525090565b613d0a6040518060800160405280600081526020016000815260200160008152602001600081525090565b613d2b87680ad78ebc5ac6200000613d218b61457f565b61368e9190615911565b8083528690613d4390670de0b6b3a764000090615924565b613d4d9190615951565b60208301528151613d5d8961457f565b613d679190615911565b81526020808301516001600160a01b038a166000908152600e909252604090912054613d939190615911565b60208201528051680ad78ebc5ac61fffff1901613e1657613db388614657565b613dbe886004614305565b613dd78989680ad78ebc5ac62000008460200151614ea5565b6001600160a01b038816600080516020615ace833981519152600080808060035b604051613e099594939291906159fe565b60405180910390a2614099565b602080820151600b546001600160a01b038b81166000908152600e8552604090819020600101548151637c3a00fd60e01b81529151613f2596939094169363ac3058ad9391928592637c3a00fd926004808401938290030181865afa158015613e83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ea791906159e1565b613eb361025842615911565b426040518563ffffffff1660e01b8152600401613ed394939291906159c2565b602060405180830381865afa158015613ef0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f1491906158c9565b8351613f209190615911565b613898565b604082015260208101518151613f3b9190613898565b60608201819052831080613f525750806040015183115b80613f715750686194049f30f7200000613f6f826000015161500b565b105b15613f8357506001604082015261409b565b6080890151606082015160405163015f109360e51b81526001600160a01b038b81166004830152602482019290925287821660448201528682166064820152911690632be2126090608401600060405180830381600087803b158015613fe857600080fd5b505af1158015613ffc573d6000803e3d6000fd5b50505050614009886120d3565b614017888360000151612a6e565b6020808201516001600160a01b038a166000908152600e90925260409091205561404088612be4565b506001600160a01b0388166000818152600e602090815260409182902060018101546002820154928601516003928301549451600080516020615ace8339815191529561409095939490916159fe565b60405180910390a25b505b979650505050505050565b6000806140b16135a4565b90506000836140c08688615924565b6140ca9190615951565b905060006140d9600283615951565b6140e3908461597b565b90506140f781670de0b6b3a7640000614dc8565b90506000811161410957614109615965565b600c8190556040518181527fc454ee9b76c52f782a256af821b857ca6e125d1e3333bcede402fec2bed9600c9060200160405180910390a16121e26135e8565b6000610ce4612227611179565b60008261416b670de0b6b3a764000086615924565b6141759190615951565b905081811115612a685760405162461bcd60e51b815260206004820152601d60248201527f4665652065786365656465642070726f7669646564206d6178696d756d0000006044820152606401610d56565b600b5460405163fd50a56760e01b815261ffff831660048201526000916001600160a01b03169063fd50a567906024016020604051808303816000875af1158015614216573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061423a91906158c9565b6008546009546040516340c10f1960e01b81529293506001600160a01b03918216926340c10f199261427292169085906004016158e2565b600060405180830381600087803b15801561428c57600080fd5b505af11580156142a0573d6000803e3d6000fd5b5050600080546040516354c4666160e01b81526004810192909252602482018590526001600160a01b031692506354c466619150604401600060405180830381600087803b1580156142f157600080fd5b505af1158015611139573d6000803e3d6000fd5b60008160048111156143195761431961562d565b14158015614339575060018160048111156143365761433661562d565b14155b61434557614345615965565b60155460085460048054604051635f7a196360e11b81526001600160a01b039384169363bef432c69361437c9390911691016154d0565b602060405180830381865afa158015614399573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143bd9190615a61565b156143cb576143cb81615020565b6001600160a01b0383166000908152600e6020526040902060049081018054849260ff199091169060019084908111156144075761440761562d565b02179055506001600160a01b0383166000908152600e60209081526040808320838155600180820185905560029182018590556019909352908320838155918201839055015561445783826150fa565b600a54604051631484968760e11b81526001600160a01b03909116906329092d0e906144879086906004016154d0565b600060405180830381600087803b1580156144a157600080fd5b505af11580156144b5573d6000803e3d6000fd5b50505050505050565b600082156144e6576000836144d38487615924565b6144dd9190615951565b915061359d9050565b5060001961359d565b600080670de0b6b3a76400006145058486615924565b61450f9190615951565b905082811061359d5760405162461bcd60e51b815260206004820152603660248201527f54726f76654d616e616765723a2046656520776f756c642065617420757020616044820152751b1b081c995d1d5c9b99590818dbdb1b185d195c985b60521b6064820152608401610d56565b600b546001600160a01b038281166000908152600e60205260408082206001810154600480830154600590930154935163ac3058ad60e01b81529496959095169463ac3058ad946145df949293610100900461ffff1692914291016159c2565b602060405180830381865afa1580156145fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061462091906158c9565b6001600160a01b0383166000908152600e60205260409020600281015460019091015461464d919061597b565b610ce4919061597b565b6001600160a01b0381166000908152600e6020526040812060030154600f805491928392614686908490615911565b9091555050506001600160a01b03166000908152600e6020526040812060030155565b60405163ab11fadd60e01b815260048101839052602481018290526001600160a01b0385169063ab11fadd90604401600060405180830381600087803b1580156146f257600080fd5b505af1158015614706573d6000803e3d6000fd5b50506040516354c4666160e01b815260048101859052602481018490526001600160a01b03881692506354c466619150604401600060405180830381600087803b15801561475357600080fd5b505af1158015614767573d6000803e3d6000fd5b5050604051633ef8ba8160e11b8152600481018690526001600160a01b0387169250637df175029150602401600060405180830381600087803b1580156147ad57600080fd5b505af11580156147c1573d6000803e3d6000fd5b505050505050505050565b6000806011546000036147e0575081610ce4565b6000601054116147f2576147f2615965565b6011546010546135939085615924565b61480a61542e565b6148356040518060800160405280600081526020016000815260200160008152602001600081525090565b601554600110614845575061409b565b61484e87611985565b606087015260408681019190915260208681019290925290860191909152908452830181905261487d906152bd565b60608301819052680ad78ebc5ac6200000608084015260408301516148a29190615911565b8152670de0b6b3a76400008611614968576148bc87614657565b6148d589898360200151846040015185606001516146a9565b600060a0830181905260c0830152815160e083015280516101208301526148fd876003614305565b815160408301516001600160a01b03891691600080516020615aae8339815191529160025b60408051938452602084019290925260ff169082015260600160405180910390a26001600160a01b038716600080516020615ace83398151915260008080806002613df8565b670de0b6b3a7640000861180156149865750670f43fc2c04ee000086105b156149e85761499487614657565b6149ad89898360200151846040015185606001516146a9565b8151602083015182516149c2929190886152ca565b61012087015261010086015260e085015260c084015260a08301526148fd876003614305565b670f43fc2c04ee000086101580156149ff57508386105b8015614a0c575081518510155b15614b0157614a1a87614657565b614a3389898360200151846040015185606001516146a9565b84600003614a4357614a43615965565b614a568260000151836040015185615368565b9150614a63876003614305565b61014082015115614ad857600754610140830151604051633f10abab60e01b81526001600160a01b0390921691633f10abab91614aa5918b91906004016158e2565b600060405180830381600087803b158015614abf57600080fd5b505af1158015614ad3573d6000803e3d6000fd5b505050505b815160c08301516001600160a01b03891691600080516020615aae833981519152916002614922565b614b0961542e565b915061409b9050565b614b1a61542e565b81606001518360600151614b2e919061597b565b606082015260808083015190840151614b47919061597b565b608082015281516020840151614b5d919061597b565b6020808301919091528201516040840151614b78919061597b565b6040808301919091528201518351614b90919061597b565b815260a08083015190840151614ba6919061597b565b60a082015260c08083015190840151614bbf919061597b565b60c082015260e08083015190840151614bd8919061597b565b60e08201526101008083015190840151614bf2919061597b565b6101008201526101208083015190840151614c0d919061597b565b6101208201526101408083015190840151614c28919061597b565b61014082015292915050565b600080614c428585856144be565b6714d1120d7b1600001195945050505050565b614c5d61542e565b614c886040518060800160405280600081526020016000815260200160008152602001600081525090565b614c9184611985565b606087015260408681019190915260208681019290925290860191909152908452830152614cbe84614657565b614cd786868360200151846040015185606001516146a9565b614ce482604001516152bd565b60608301819052680ad78ebc5ac620000060808401526040830151600091614d0b91615911565b9050614d218360000151846020015183876152ca565b61012088015261010087015260e086015260c085015260a0840152614d47856003614305565b8251604080850151815192835260208301526001908201526001600160a01b03861690600080516020615aae8339815191529060600160405180910390a26001600160a01b038516600080516020615ace83398151915260008080806001604051614db69594939291906159fe565b60405180910390a25050949350505050565b6000818310614dd7578161359d565b5090919050565b6000603c600d5442614df09190615911565b6111869190615951565b6000631f540500821115614e1057631f54050091505b81600003614e275750670de0b6b3a7640000610ce4565b670de0b6b3a764000083835b6001811115614e9b57614e47600282615a83565b600003614e6c57614e5882836153f7565b9150614e65600282615951565b9050614e33565b614e7682846153f7565b9250614e8282836153f7565b91506002614e91600183615911565b614e659190615951565b6121e282846153f7565b6040808501516006549151632770a7eb60e21b81526001600160a01b0391821692639dc29fac92614edd9291169086906004016158e2565b600060405180830381600087803b158015614ef757600080fd5b505af1158015614f0b573d6000803e3d6000fd5b5050855160405163ab11fadd60e01b815260048101869052600060248201526001600160a01b03909116925063ab11fadd9150604401600060405180830381600087803b158015614f5b57600080fd5b505af1158015614f6f573d6000803e3d6000fd5b505050508360a001516001600160a01b0316633f10abab84836040518363ffffffff1660e01b8152600401614fa59291906158e2565b600060405180830381600087803b158015614fbf57600080fd5b505af1158015614fd3573d6000803e3d6000fd5b5050855160a0870151604051636250216960e01b81526001600160a01b039092169350636250216992506134709185906004016158e2565b6000610ce4680ad78ebc5ac620000083615911565b60018111801561509b5750600a546040805163de8fa43160e01b815290516001926001600160a01b03169163de8fa4319160048083019260209291908290030181865afa158015615075573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061509991906158c9565b115b610c6e5760405162461bcd60e51b815260206004820152602a60248201527f54726f76654d616e616765723a204f6e6c79206f6e652074726f766520696e206044820152697468652073797374656d60b01b6064820152608401610d56565b6001600160a01b0382166000908152600e602052604081206004015460ff169081600481111561512c5761512c61562d565b1415801561514c575060018160048111156151495761514961562d565b14155b61515857615158615965565b6001600160a01b0383166000908152600e60205260408120600701546001600160801b031690839061518b600183615911565b905080836001600160801b031611156151a6576151a6615965565b6000601582815481106151bb576151bb6158b3565b600091825260209091200154601580546001600160a01b03909216925082916001600160801b0387169081106151f3576151f36158b3565b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055918316808252600e835260409182902060070180546001600160801b0319166001600160801b0389169081179091558251918252928101929092527f02b04ae5f7be9ca7c103293a2aa15f3c339d15d6eda53b721fef7b0e609c831a910160405180910390a1601580548061529257615292615a97565b600082815260209020810160001990810180546001600160a01b031916905501905550505050505050565b6000610ce460c883615951565b600080808080851561534d5760006152e28988614dc8565b905060006152f48b61368e848b615911565b9050615300828261597b565b965061530c8a8c61597b565b615316888b615924565b6153209190615951565b955061532c828b615911565b9350615338818c615911565b9450615344868a615911565b9250505061535d565b5060009350839250879150869050855b945094509450945094565b61537061542e565b8381526040810183905260008261538f670f43fc2c04ee000087615924565b6153999190615951565b90506153a4816152bd565b60608301819052680ad78ebc5ac6200000608084015260a083018690526153cb9082615911565b60c08301526153da8185615911565b61014083015250600060e082018190526101208201529392505050565b6000806154048385615924565b9050670de0b6b3a764000061541a600282615951565b615424908361597b565b6138f29190615951565b60405180610160016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060e0016040528060008152602001600081526020016000815260200160006001600160a01b0316815260200160001515815260200160008152602001600081525090565b6001600160a01b0391909116815260200190565b6001600160a01b0381168114610c6e57600080fd5b8035615504816154e4565b919050565b60006020828403121561551b57600080fd5b813561359d816154e4565b6000806040838503121561553957600080fd5b8235615544816154e4565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561557b57600080fd5b823567ffffffffffffffff8082111561559357600080fd5b818501915085601f8301126155a757600080fd5b8135818111156155b9576155b9615552565b8060051b604051601f19603f830116810181811085821117156155de576155de615552565b6040529182528482019250838101850191888311156155fc57600080fd5b938501935b8285101561562157615612856154f9565b84529385019392850192615601565b98975050505050505050565b634e487b7160e01b600052602160045260246000fd5b6005811061566157634e487b7160e01b600052602160045260246000fd5b9052565b60208101610ce48284615643565b60006020828403121561568557600080fd5b5035919050565b6000610120820190508a82528960208301528860408301528760608301526156b76080830188615643565b61ffff9590951660a082015260c081019390935260e08301919091526001600160801b03166101009091015295945050505050565b61ffff81168114610c6e57600080fd5b6000806040838503121561570f57600080fd5b823561571a816154e4565b9150602083013561572a816156ec565b809150509250929050565b60008060008060008060008060008060006101608c8e03121561575757600080fd5b8b35615762816154e4565b9a5060208c0135615772816154e4565b995060408c0135615782816154e4565b985060608c0135615792816154e4565b975060808c01356157a2816154e4565b965060a08c01356157b2816154e4565b955060c08c01356157c2816154e4565b945060e08c01356157d2816154e4565b93506101008c01356157e3816154e4565b92506157f26101208d016154f9565b91506158016101408d016154f9565b90509295989b509295989b9093969950565b6000806040838503121561582657600080fd5b8235615831816154e4565b915060208301356005811061572a57600080fd5b600080600080600080600060e0888a03121561586057600080fd5b873596506020880135615872816154e4565b95506040880135615882816154e4565b94506060880135615892816154e4565b9699959850939660808101359560a0820135955060c0909101359350915050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156158db57600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b634e487b7160e01b600052601160045260246000fd5b81810381811115610ce457610ce46158fb565b8082028115828204841417610ce457610ce46158fb565b634e487b7160e01b600052601260045260246000fd5b6000826159605761596061593b565b500490565b634e487b7160e01b600052600160045260246000fd5b80820180821115610ce457610ce46158fb565b6000602082840312156159a057600080fd5b815161359d816154e4565b6000816159ba576159ba6158fb565b506000190190565b93845261ffff9290921660208401526040830152606082015260800190565b6000602082840312156159f357600080fd5b815161359d816156ec565b94855260208501939093526040840191909152606083015260ff16608082015260a00190565b60008060408385031215615a3757600080fd5b505080516020909101519092909150565b600060018201615a5a57615a5a6158fb565b5060010190565b600060208284031215615a7357600080fd5b8151801515811461359d57600080fd5b600082615a9257615a9261593b565b500690565b634e487b7160e01b600052603160045260246000fdfeea67486ed7ebe3eea8ab3390efd4a3c8aae48be5bea27df104a8af786c408434f575eb5cdee005607f56587351e18943ddacd11756b9d37980ec251797ff136ca26469706673582212201f4381f6a418ecc087f98a912cc1f3c986c757a19697527729c09d9fc431ea6564736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106104e25760003560e01c806385a43ca81161028e578063cda775f911610167578063e07fdf03116100d9578063f36b242511610092578063f36b242514610bde578063f540d3dc14610be6578063f92d343314610651578063fc0d84ee14610bef578063fe2ba84814610c1b578063fe9d032314610c2e57600080fd5b8063e07fdf0314610b44578063e18c513114610b70578063e2ac77b014610b83578063e6cfa17414610b96578063ee266b8714610bc2578063f2fde38b14610bcb57600080fd5b8063d5b356351161012b578063d5b3563514610ae7578063d5b97eea14610afa578063d66a255314610b03578063d9a7244414610b16578063dbcf424d14610b29578063df15cd0d14610b3157600080fd5b8063cda775f914610a9c578063d293c71014610aaf578063d380a37c14610ac2578063d38b055814610acb578063d3d6f84314610ad457600080fd5b8063b0d8e18111610200578063be2909bc116101c4578063be2909bc14610a43578063bf9befb114610a56578063c52861f214610a5f578063c651fd8614610a67578063c7b5548114610a7a578063cbd138ae14610a8957600080fd5b8063b0d8e181146109b7578063b7f8cf9b146109ca578063b82f263d146109dd578063b91af97c146109f0578063bcd3752614610a3057600080fd5b8063953f0bb111610252578063953f0bb11461096257806396d711ff146109755780639976cf451461097e5780639d78d46b14610991578063a20baee614610811578063ae918754146109a457600080fd5b806385a43ca8146108c2578063887105d3146108ee5780638b36fd60146108f65780638da5cb5b1461090957806392b7659b1461091a57600080fd5b806349eefeee116103c057806372fe25aa11610332578063795d26c3116102f6578063795d26c3146108685780637985c5e4146108705780637af110ba146108835780637f7dde4a14610893578063807d138d146108a657806382fe3eb9146108af57600080fd5b806372fe25aa146108115780637412e00814610820578063741bef1a14610833578063756b253e14610846578063794e57241461085957600080fd5b8063631203b011610384578063631203b01461073357806364cee2601461074657806366ca4a21146107725780636ef643381461077a578063715018a6146107f657806372423c17146107fe57600080fd5b806349eefeee146106de5780634e443d9e146106e65780635733d58f146107095780635b9fb3cd146107185780635dba4c4a1461072b57600080fd5b806321e37801116104595780632f8655681161041d5780632f865568146106615780633cc74225146106745780634597f6ed14610687578063477d66cf1461069a578063480cd578146106ad5780634870dd9a146106d657600080fd5b806321e3780114610604578063240926691461064057806328b137201461064857806328d28b5b146106515780632b11551a1461065957600080fd5b806315d549f1116104ab57806315d549f1146105685780631673c79a1461057b57806318f2817a146105c55780631bf43555146105d85780631e8b1c2b146105e85780631f68f20a146105fb57600080fd5b8062f48ae4146104e7578063048c661d14610503578063071a7541146105235780630b0765571461052b57806312610e9214610540575b600080fd5b6104f060145481565b6040519081526020015b60405180910390f35b600554610516906001600160a01b031681565b6040516104fa91906154d0565b6104f0600281565b61053e610539366004615509565b610c41565b005b61055361054e366004615526565b610c71565b604080519283526020830191909152016104fa565b6104f0610576366004615509565b610caf565b6105aa610589366004615509565b60196020526000908152604090208054600182015460029092015490919083565b604080519384526020840192909252908201526060016104fa565b6104f06105d3366004615509565b610cd1565b6104f0686194049f30f720000081565b61053e6105f6366004615568565b610cea565b6104f0600c5481565b610633610612366004615509565b6001600160a01b03166000908152600e602052604090206004015460ff1690565b6040516104fa9190615665565b6104f0611141565b6104f060135481565b6104f0611163565b6104f0611179565b61053e61066f366004615509565b61118b565b600154610516906001600160a01b031681565b600954610516906001600160a01b031681565b6104f06106a8366004615673565b6111f7565b6104f06106bb366004615509565b6001600160a01b03166000908152600e602052604090205490565b6104f060c881565b6015546104f0565b6106f96106f4366004615673565b61120a565b60405190151581526020016104fa565b6104f06714d1120d7b16000081565b600b54610516906001600160a01b031681565b61053e611215565b6104f0610741366004615673565b611281565b6104f0610754366004615509565b6001600160a01b03166000908152600e602052604090206003015490565b6104f061128e565b6107e1610788366004615509565b600e6020526000908152604090208054600182015460028301546003840154600485015460058601546006870154600790970154959694959394929360ff83169361010090930461ffff1692906001600160801b031689565b6040516104fa9998979695949392919061568c565b61053e6112a0565b6104f061080c366004615526565b6112b4565b6104f0670de0b6b3a764000081565b61053e61082e3660046156fc565b611306565b600254610516906001600160a01b031681565b610516610854366004615673565b611346565b6104f0670f43fc2c04ee000081565b6104f0611370565b61053e61087e366004615735565b61146c565b6104f0680ad78ebc5ac620000081565b600054610516906001600160a01b031681565b6104f060105481565b61053e6108bd366004615509565b6117b1565b6104f06108d0366004615509565b6001600160a01b03166000908152600e602052604090206002015490565b6104f06117c2565b61053e610904366004615526565b611887565b6003546001600160a01b0316610516565b61094f610928366004615509565b6001600160a01b03166000908152600e6020526040902060040154610100900461ffff1690565b60405161ffff90911681526020016104fa565b61053e610970366004615813565b6118ae565b6104f060115481565b6104f061098c366004615526565b6118fb565b600854610516906001600160a01b031681565b600a54610516906001600160a01b031681565b6104f06109c5366004615509565b611953565b600454610516906001600160a01b031681565b6104f06109eb366004615673565b61197a565b610a036109fe366004615509565b611985565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016104fa565b61053e610a3e366004615845565b6119f4565b61053e610a51366004615526565b61209a565b6104f0600f5481565b6104f06120c1565b61053e610a75366004615509565b6120d3565b6104f0670ddd4b8c6c7d70d881565b61053e610a97366004615509565b6121b0565b600754610516906001600160a01b031681565b6104f0610abd366004615526565b6121c3565b6104f0600d5481565b6104f060165481565b6104f0610ae2366004615526565b6121ec565b6104f0610af5366004615673565b61221a565b6104f060185481565b6104f0610b11366004615509565b61222d565b610516610b24366004615673565b612238565b61053e612268565b6104f0610b3f366004615509565b612564565b6104f0610b52366004615509565b6001600160a01b03166000908152600e602052604090206006015490565b610553610b7e366004615509565b612615565b6106f9610b91366004615509565b61272a565b6104f0610ba4366004615509565b6001600160a01b03166000908152600e602052604090206001015490565b6104f060125481565b61053e610bd9366004615509565b61278e565b6104f06127c9565b6104f060175481565b6104f0610bfd366004615509565b6001600160a01b03166000908152600e602052604090206005015490565b61053e610c29366004615509565b6127d6565b600654610516906001600160a01b031681565b610c496127e7565b610c51612268565b600054600154610c6e916001600160a01b03908116911683612867565b50565b600080610c7c6127e7565b610c868484612a6e565b5050506001600160a01b03166000908152600e6020526040902060018101546002909101549091565b6000610cb96127e7565b610cc282612b50565b6001600160801b031692915050565b6000610cdb6127e7565b610ce482612be4565b92915050565b8051600003610d5f5760405162461bcd60e51b815260206004820152603660248201527f54726f76654d616e616765723a2043616c6c646174612061646472657373206160448201527572726179206d757374206e6f7420626520656d70747960501b60648201526084015b60405180910390fd5b60005b8151811015610d9b576000828281518110610d7f57610d7f6158b3565b60200260200101519050610d92816120d3565b50600101610d62565b5060008054600154600554604080516080810182528581526020810186905290810185905260608101949094526001600160a01b0392831693918316921690610de261542e565b600260009054906101000a90046001600160a01b03166001600160a01b0316630fdb11cf6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5b91906158c9565b826000018181525050826001600160a01b031663309077b36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ea2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec691906158c9565b60208301528151610ed690612c86565b15156040830152610ee5612268565b816040015115610f0b57610f048585846000015185602001518a612ca3565b9050610f23565b610f208585846000015185602001518a612ee3565b90505b6000816020015111610f825760405162461bcd60e51b815260206004820152602260248201527f54726f76654d616e616765723a206e6f7468696e6720746f206c697175696461604482015261746560f01b6064820152608401610d56565b60a081015160c082015160405163335525ad60e01b81526001600160a01b0386169263335525ad92610fbf92600401918252602082015260400190565b600060405180830381600087803b158015610fd957600080fd5b505af1158015610fed573d6000803e3d6000fd5b5050505061100c85858360e00151846101000151856101200151612fb8565b6101408101511561108357600754610140820151604051636250216960e01b81526001600160a01b03888116936362502169936110509392909116916004016158e2565b600060405180830381600087803b15801561106a57600080fd5b505af115801561107e573d6000803e3d6000fd5b505050505b611091858260600151613286565b610140810151606082015182516110a89190615911565b6110b29190615911565b6060808401829052602083015160408085015192850151608086015191517f5823f33ee3da2874398138f21ff2fcd7078180caf18ccb37ac445d9a5abfa75f9561111d9593909291948552602085019390935260408401919091526060830152608082015260a00190565b60405180910390a16111398533836080015184606001516133d1565b505050505050565b6064611156670de0b6b3a76400006005615924565b6111609190615951565b81565b6103e8611156670de0b6b3a76400006005615924565b6000611186600c546134a8565b905090565b611194816134e6565b6040805160018082528183019092526000916020808301908036833701905050905081816000815181106111ca576111ca6158b3565b60200260200101906001600160a01b031690816001600160a01b0316815250506111f381610cea565b5050565b6000610ce461120461128e565b8361357e565b6000610ce482612c86565b61121d6127e7565b60006112276135a4565b9050670de0b6b3a764000081111561124157611241615965565b600c8190556040518181527fc454ee9b76c52f782a256af821b857ca6e125d1e3333bcede402fec2bed9600c9060200160405180910390a1610c6e6135e8565b6000610ce46112046127c9565b600061118661129b6135a4565b61363f565b6112a8613693565b6112b260006136c0565b565b60006112be6127e7565b6001600160a01b0383166000908152600e60205260408120546112e290849061597b565b6001600160a01b0385166000908152600e6020526040902081905591505092915050565b61130e6127e7565b6001600160a01b039091166000908152600e60205260409020600401805461ffff9092166101000262ffff0019909216919091179055565b6015818154811061135657600080fd5b6000918252602090912001546001600160a01b0316905081565b60008054604080516314a6bf0f60e01b8152905183926001600160a01b0316916314a6bf0f9160048083019260209291908290030181865afa1580156113ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113de91906158c9565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166314a6bf0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611435573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145991906158c9565b9050611465818361597b565b9250505090565b611474613693565b61147d8b613712565b6114868a613712565b61148f89613712565b61149888613712565b6114a187613712565b6114aa85613712565b6114b384613712565b6114bc83613712565b6114c582613712565b6114ce81613712565b6114d786613712565b600480546001600160a01b03199081166001600160a01b038d8116919091179092556000805482168e84161790556001805482168b84161790556005805482168484161790556006805482168a84161790556007805482168c8416179055600280548216868416179055600880548216888416179055600a80548216858416179055600980548216878416179055600b80549091169188169190911790556040517f3ca631ffcd2a9b5d9ae18543fc82f58eb4ca33af9e6ab01b7a8e95331e6ed985906115a5908c906154d0565b60405180910390a17f78f058b189175430c48dc02699e3a0031ea4ff781536dc2fab847de4babdd8828b6040516115dc91906154d0565b60405180910390a17f5ee0cae2f063ed938bb55046f6a932fb6ae792bf43624806bb90abe68a50be9b8860405161161391906154d0565b60405180910390a17f82966d27eea39b038ee0fa30cd16532bb24f6e65d31cb58fb227aa5766cdcc7f8160405161164a91906154d0565b60405180910390a17fcfb07d791fcafc032b35837b50eb84b74df518cf4cc287e8084f47630fa70fa08760405161168191906154d0565b60405180910390a17fe67f36a6e961157d6eff83b91f3af5a62131ceb6f04954ef74f51c1c05e7f88d896040516116b891906154d0565b60405180910390a17f8c537274438aa850a330284665d81a85dd38267d09e4050d416bfc94142db264836040516116ef91906154d0565b60405180910390a17f547e9055f019d1e165f0ca2133494723cb248f8536192c218254285fc43c56688560405161172691906154d0565b60405180910390a17f65f4cf077bc01e4742eb5ad98326f6e95b63548ea24b17f8d5e823111fe788008260405161175d91906154d0565b60405180910390a17f38335c64466e2376ab931166337e19127650d842036ebe01da1ba3e5c1255ebb8460405161179491906154d0565b60405180910390a16117a46112a0565b5050505050505050505050565b6117b96127e7565b610c6e816137b7565b6000805460408051631529a63960e01b8152905183926001600160a01b031691631529a6399160048083019260209291908290030181865afa15801561180c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183091906158c9565b90506000600160009054906101000a90046001600160a01b03166001600160a01b0316631529a6396040518163ffffffff1660e01b8152600401602060405180830381865afa158015611435573d6000803e3d6000fd5b61188f6127e7565b6001600160a01b039091166000908152600e6020526040902060050155565b6118b66127e7565b6001600160a01b0382166000908152600e6020526040902060049081018054839260ff199091169060019084908111156118f2576118f261562d565b02179055505050565b60006119056127e7565b6001600160a01b0383166000908152600e602052604081206001015461192c90849061597b565b6001600160a01b0385166000908152600e6020526040902060010181905591505092915050565b600080600061196184613828565b9150915060006119718383613898565b95945050505050565b6000610ce4826138ce565b6001600160a01b0381166000908152600e6020526040812080546001820154600290920154909280806119b787612564565b92506119c287612615565b90925090506119d1838761597b565b95506119dd828661597b565b94506119e9818561597b565b935091939550919395565b6040805160e08082018352600080546001600160a01b03908116845260015481166020808601919091526008548216858701526009548216606080870191909152600a548316608080880191909152600754841660a08089019190915260065490941660c080890191909152885161010081018a5286815293840186905297830185905290820184905281018390529081018290529384018190529083015290611a9d836138fa565b600260009054906101000a90046001600160a01b03166001600160a01b0316630fdb11cf6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1691906158c9565b60c08201819052611b2690613996565b611b2f89613a09565b611b3e8260400151338b613a70565b611b46611370565b60e0820152888152608082015160c0820151600091611b66918b90613b6f565b15611b72575087611c84565b82608001516001600160a01b0316634d6228316040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd8919061598e565b90505b6001600160a01b03811615801590611c075750670f43fc2c04ee0000611c05828460c001516121c3565b105b15611c845782608001516001600160a01b031663b72703ac826040518263ffffffff1660e01b8152600401611c3c91906154d0565b602060405180830381865afa158015611c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7d919061598e565b9050611bdb565b84600003611c925760001994505b611c9a612268565b6001600160a01b03811615801590611cb25750815115155b8015611cbe5750600085115b15611dd15784611ccd816159ab565b955050600083608001516001600160a01b031663b72703ac836040518263ffffffff1660e01b8152600401611d0291906154d0565b602060405180830381865afa158015611d1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d43919061598e565b9050611d588460000151856020015184612867565b6000611d71858486600001518760c001518e8e8e613cb9565b9050806040015115611d84575050611dd1565b8051602085018051611d9790839061597b565b9052506020810151604085018051611db090839061597b565b905250805184518590611dc4908390615911565b905250909150611c9a9050565b6000826040015111611e375760405162461bcd60e51b815260206004820152602960248201527f54726f76654d616e616765723a20556e61626c6520746f2072656465656d20616044820152681b9e48185b5bdd5b9d60ba1b6064820152608401610d56565b611e4e82604001518360c001518460e001516140a6565b50611e5c8260400151614149565b606083018190526040830151611e73919086614156565b825160608085015190840151604051636250216960e01b81526001600160a01b0390931692636250216992611eac9290916004016158e2565b600060405180830381600087803b158015611ec657600080fd5b505af1158015611eda573d6000803e3d6000fd5b50505060608301516040840151611ef19250615911565b60808301526020820151604080840151606085015191517f43a3f4082a4dbc33d78e317d2497d3a730bc7fc3574159dcea1056e62e5d9ad893611f4d938f93919293845260208401929092526040830152606082015260800190565b60405180910390a182604001516001600160a01b0316639dc29fac3384602001516040518363ffffffff1660e01b8152600401611f8b9291906158e2565b600060405180830381600087803b158015611fa557600080fd5b505af1158015611fb9573d6000803e3d6000fd5b50508451602085015160405163ab11fadd60e01b81526004810191909152600060248201526001600160a01b03909116925063ab11fadd9150604401600060405180830381600087803b15801561200f57600080fd5b505af1158015612023573d6000803e3d6000fd5b505084516080850151604051636250216960e01b81526001600160a01b0390921693506362502169925061205c913391906004016158e2565b600060405180830381600087803b15801561207657600080fd5b505af115801561208a573d6000803e3d6000fd5b5050505050505050505050505050565b6120a26127e7565b6001600160a01b039091166000908152600e6020526040902060060155565b60006111866120ce6135a4565b6134a8565b6001600160a01b0381166000908152600e60205260409020600481015461210290610100900461ffff166141c7565b600b546001820154600480840154600585015460405163ac3058ad60e01b81526001600160a01b039095169463ac3058ad9461214d949093610100900461ffff1692914291016159c2565b602060405180830381865afa15801561216a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218e91906158c9565b8160020160008282546121a1919061597b565b90915550504260059091015550565b6121b86127e7565b610c6e816002614305565b60008060006121d185613828565b9150915060006121e28383876144be565b9695505050505050565b60006121f66127e7565b6001600160a01b0383166000908152600e60205260408120546112e2908490615911565b6000610ce46122276120c1565b836144ef565b6000610ce48261457f565b60006015828154811061224d5761224d6158b3565b6000918252602090912001546001600160a01b031692915050565b600f54156112b257600b546001546040805163534def8b60e11b815290516000936001600160a01b039081169363ac3058ad9391169163a69bdf16916004808201926020929091908290030181865afa1580156122c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ed91906158c9565b600b60009054906101000a90046001600160a01b03166001600160a01b0316637c3a00fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612340573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236491906159e1565b600160009054906101000a90046001600160a01b03166001600160a01b03166310710f726040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123db91906158c9565b426040518563ffffffff1660e01b81526004016123fb94939291906159c2565b602060405180830381865afa158015612418573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243c91906158c9565b90506000601854670de0b6b3a7640000836124579190615924565b612461919061597b565b90506000600f54826124739190615951565b9050600f54816124839190615924565b61248d9083615911565b60188190555080601460008282546124a5919061597b565b90915550506001546040516354c4666160e01b815260006004820152602481018590526001600160a01b03909116906354c4666190604401600060405180830381600087803b1580156124f757600080fd5b505af115801561250b573d6000803e3d6000fd5b50506012546013546014546040517f16406a7d6b3c0e446c1c3b66751ebc9bae57378f3b6eeaf3685f3c2f1ee8cafc955061255794509283526020830191909152604082015260600190565b60405180910390a1505050565b6001600160a01b038116600090815260196020526040812054601254829061258d908390615911565b90508015806125cd575060016001600160a01b0385166000908152600e6020526040902060049081015460ff16908111156125ca576125ca61562d565b14155b156125dc575060009392505050565b6001600160a01b0384166000908152600e6020526040902060030154670de0b6b3a764000061260b8383615924565b6119719190615951565b6001600160a01b0381166000908152601960205260408120600101546013548291908290612644908390615911565b6001600160a01b03861660009081526019602052604081206002015460145492935091612672908390615911565b90508215806126b2575060016001600160a01b0388166000908152600e6020526040902060049081015460ff16908111156126af576126af61562d565b14155b156126c65750600096879650945050505050565b6001600160a01b0387166000908152600e6020526040902060030154670de0b6b3a76400006126f58583615924565b6126ff9190615951565b9650670de0b6b3a76400006127148383615924565b61271e9190615951565b95505050505050915091565b600060016001600160a01b0383166000908152600e6020526040902060049081015460ff169081111561275f5761275f61562d565b1461276c57506000919050565b506012546001600160a01b039091166000908152601960205260409020541090565b612796613693565b6001600160a01b0381166127c0576000604051631e4fbdf760e01b8152600401610d5691906154d0565b610c6e816136c0565b6000611186600c5461363f565b6127de6127e7565b610c6e81614657565b6004546001600160a01b031633146112b25760405162461bcd60e51b815260206004820152603b60248201527f54726f76654d616e616765723a2043616c6c6572206973206e6f74207468652060448201527f426f72726f7765724f7065726174696f6e7320636f6e747261637400000000006064820152608401610d56565b6001600160a01b0381166000908152600e602052604090206128888261272a565b15612a6857612896826134e6565b60006128a183612564565b90506000806128af85612615565b915091506128bc856120d3565b828460000160008282546128d0919061597b565b92505081905550818460010160008282546128eb919061597b565b9250508190555080846002016000828254612906919061597b565b9091555050600b546004858101546040516379b381e360e01b815261010090910461ffff1691810191909152602481018490526001600160a01b03909116906379b381e390604401600060405180830381600087803b15801561296857600080fd5b505af115801561297c573d6000803e3d6000fd5b5050600b54600487810154604051635b5e7c1960e11b815261010090910461ffff1691810191909152602481018590526001600160a01b03909116925063b6bcf8329150604401600060405180830381600087803b1580156129dd57600080fd5b505af11580156129f1573d6000803e3d6000fd5b505050506129fe856137b7565b612a0b87878585856146a9565b846001600160a01b0316600080516020615ace833981519152856001015486600201548760000154886003015460006003811115612a4b57612a4b61562d565b604051612a5c9594939291906159fe565b60405180910390a25050505b50505050565b6001600160a01b038281166000908152600e6020526040808220600b54600282015460048084015494516327678dbd60e01b8152908101919091526024810187905261010090930461ffff166044840152909383929116906327678dbd9060640160408051808303816000875af1158015612aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b119190615a24565b9150915081836001016000828254612b299190615911565b9250508190555080836002016000828254612b449190615911565b90915550505050505050565b601580546001808201835560008381527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec47590920180546001600160a01b0319166001600160a01b03861617905591549091612baa91615911565b6001600160a01b03929092166000908152600e6020526040902060070180546001600160801b0319166001600160801b0384161790555090565b6001600160a01b0381166000908152600e60205260408120548190612c08906147cc565b6001600160a01b0384166000908152600e60205260409020600301805490829055600f54919250908290612c3d908390615911565b612c47919061597b565b600f8190556040519081527f6bac5e0eb3c44eb03a60ab11ec3a2c051771616aecadbcfff2630aabae5203829060200160405180910390a15092915050565b600080612c92836138ce565b6714d1120d7b160000119392505050565b612cab61542e565b612cb3615488565b612cbb61542e565b84825260006080830152612ccd611370565b60a0830152612cda6117c2565b60c0830152600060208301525b835182602001511015612ed85783826020015181518110612d0a57612d0a6158b3565b60209081029190910101516001600160a01b03166060830152600160608301516001600160a01b03166000908152600e6020526040902060049081015460ff1690811115612d5a57612d5a61562d565b03612ec057612d6d8260600151876121c3565b60408301526080820151612e6357670f43fc2c04ee0000826040015110158015612d9657508151155b612ec0576000612daf8360c001518460a00151896144be565b9050612dcc8989856060015186604001518760000151868d614802565b91508160a0015183600001818151612de49190615911565b90525060a0808301519084018051612dfd908390615911565b905250610140820151606083015160c0840151612e1a919061597b565b612e24919061597b565b8360c001818151612e359190615911565b905250612e428483614b12565b9350612e578360c001518460a0015189614c34565b15608084015250612ec0565b81608001518015612e7f5750670f43fc2c04ee00008260400151105b15612ec057612e98888884606001518560000151614c55565b90508060a0015182600001818151612eb09190615911565b905250612ebd8382614b12565b92505b60208201805190612ed082615a48565b905250612ce7565b505095945050505050565b612eeb61542e565b612ef3615488565b612efb61542e565b848252600060208301525b835182602001511015612ed85783826020015181518110612f2957612f296158b3565b60209081029190910101516001600160a01b031660608301819052612f4e90876121c3565b60408301819052670f43fc2c04ee00001115612fa057612f78888884606001518560000151614c55565b90508060a0015182600001818151612f909190615911565b905250612f9d8382614b12565b92505b60208201805190612fb082615a48565b905250612f06565b82158015612fc4575081155b61327f57612fd0612268565b601654600090612fe8670de0b6b3a764000084615924565b612ff2919061597b565b90506000601754670de0b6b3a76400008661300d9190615924565b613017919061597b565b90506000601854670de0b6b3a7640000866130329190615924565b61303c919061597b565b90506000600f548461304e9190615951565b90506000600f54846130609190615951565b90506000600f54846130729190615951565b9050600f54836130829190615924565b61308c9087615911565b601655600f5461309c9083615924565b6130a69086615911565b601755600f546130b69082615924565b6130c09085615911565b60188190555082601260008282546130d8919061597b565b9250508190555081601360008282546130f1919061597b565b92505081905550806014600082825461310a919061597b565b909155505060125460135460145460408051938452602084019290925282820152517f16406a7d6b3c0e446c1c3b66751ebc9bae57378f3b6eeaf3685f3c2f1ee8cafc9181900360600190a160405163ab11fadd60e01b8152600481018a9052602481018990526001600160a01b038c169063ab11fadd90604401600060405180830381600087803b15801561319f57600080fd5b505af11580156131b3573d6000803e3d6000fd5b50506040516354c4666160e01b8152600481018c9052602481018b90526001600160a01b038d1692506354c466619150604401600060405180830381600087803b15801561320057600080fd5b505af1158015613214573d6000803e3d6000fd5b5050604051636250216960e01b81526001600160a01b038e16925063625021699150613246908d908b906004016158e2565b600060405180830381600087803b15801561326057600080fd5b505af1158015613274573d6000803e3d6000fd5b505050505050505050505b5050505050565b600f546010819055506000826001600160a01b0316631529a6396040518163ffffffff1660e01b8152600401602060405180830381865afa1580156132cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132f391906158c9565b90506000600160009054906101000a90046001600160a01b03166001600160a01b0316631529a6396040518163ffffffff1660e01b8152600401602060405180830381865afa15801561334a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061336e91906158c9565b90508061337b8484615911565b613385919061597b565b60118190556010546040517f51bf4c63ec3cba9d03d43238abbdd979dd91bd16d9895c74ceea9118c7baaf60926133c3928252602082015260400190565b60405180910390a150505050565b811561343c5760065460405163264786dd60e01b81526001600160a01b039091169063264786dd9061340990869086906004016158e2565b600060405180830381600087803b15801561342357600080fd5b505af1158015613437573d6000803e3d6000fd5b505050505b8015612a6857604051636250216960e01b81526001600160a01b0385169063625021699061347090869085906004016158e2565b600060405180830381600087803b15801561348a57600080fd5b505af115801561349e573d6000803e3d6000fd5b5050505050505050565b6000610ce4826103e86134c4670de0b6b3a76400006005615924565b6134ce9190615951565b6134d8919061597b565b670de0b6b3a7640000614dc8565b60016001600160a01b0382166000908152600e6020526040902060049081015460ff16908111156135195761351961562d565b14610c6e5760405162461bcd60e51b815260206004820152602f60248201527f54726f76654d616e616765723a2054726f766520646f6573206e6f742065786960448201526e1cdd081bdc881a5cc818db1bdcd959608a1b6064820152608401610d56565b6000670de0b6b3a76400006135938385615924565b61359d9190615951565b9392505050565b6000806135af614dde565b905060006135c5670ddd4b8c6c7d70d883614dfa565b9050670de0b6b3a764000081600c546135de9190615924565b6114659190615951565b6000600d54426135f89190615911565b9050603c8110610c6e5742600d8190556040519081527f860f8d2f0c74dd487e89e2883e3b25b8159ce1e1b3433a291cba7b82c508f3bc906020015b60405180910390a150565b6000610ce4826103e861365b670de0b6b3a76400006005615924565b6136659190615951565b61366f919061597b565b6064613684670de0b6b3a76400006005615924565b61368e9190615951565b614dc8565b6003546001600160a01b031633146112b2573360405163118cdaa760e01b8152600401610d5691906154d0565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0381166137685760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f206164647265737300006044820152606401610d56565b803b806111f35760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f6044820152606401610d56565b601280546001600160a01b0383166000908152601960209081526040918290209283556013805460018501556014546002909401849055935493548251948552908401528201527fe083b7310cc9f9afc538d812522bbf1964db34ca10a6a4ffa9713025f4b3297190606001613634565b600080600061383684612564565b905060008061384486612615565b6001600160a01b0388166000908152600e6020526040902054919350915061386d90849061597b565b9450808261387a8861457f565b613884919061597b565b61388e919061597b565b9350505050915091565b600081156138c557816138b468056bc75e2d6310000085615924565b6138be9190615951565b9050610ce4565b50600019610ce4565b6000806138d96117c2565b905060006138e5611370565b90506138f28282866144be565b949350505050565b6103e8613910670de0b6b3a76400006005615924565b61391a9190615951565b81101580156139315750670de0b6b3a76400008111155b610c6e5760405162461bcd60e51b815260206004820152603060248201527f4d6178206665652070657263656e74616765206d75737420626520626574776560448201526f656e20302e352520616e64203130302560801b6064820152608401610d56565b670f43fc2c04ee00006139a8826138ce565b1015610c6e5760405162461bcd60e51b815260206004820152602a60248201527f54726f76654d616e616765723a2043616e6e6f742072656465656d207768656e604482015269102a21a9101e1026a1a960b11b6064820152608401610d56565b60008111610c6e5760405162461bcd60e51b815260206004820152602e60248201527f54726f76654d616e616765723a20416d6f756e74206d7573742062652067726560448201526d61746572207468616e207a65726f60901b6064820152608401610d56565b6040516370a0823160e01b815281906001600160a01b038516906370a0823190613a9e9086906004016154d0565b602060405180830381865afa158015613abb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613adf91906158c9565b1015613b6a5760405162461bcd60e51b815260206004820152604e60248201527f54726f76654d616e616765723a2052657175657374656420726564656d70746960448201527f6f6e20616d6f756e74206d757374206265203c3d20757365722773206d55534460648201526d20746f6b656e2062616c616e636560901b608482015260a401610d56565b505050565b60006001600160a01b0383161580613bf15750604051630bb7c8fd60e31b81526001600160a01b03851690635dbe47e890613bae9086906004016154d0565b602060405180830381865afa158015613bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bef9190615a61565b155b80613c0c5750670f43fc2c04ee0000613c0a84846121c3565b105b15613c195750600061359d565b60405163765e015960e01b81526000906001600160a01b0386169063765e015990613c489087906004016154d0565b602060405180830381865afa158015613c65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c89919061598e565b90506001600160a01b03811615806119715750670f43fc2c04ee0000613caf82856121c3565b1095945050505050565b613cdf604051806060016040528060008152602001600081526020016000151581525090565b613d0a6040518060800160405280600081526020016000815260200160008152602001600081525090565b613d2b87680ad78ebc5ac6200000613d218b61457f565b61368e9190615911565b8083528690613d4390670de0b6b3a764000090615924565b613d4d9190615951565b60208301528151613d5d8961457f565b613d679190615911565b81526020808301516001600160a01b038a166000908152600e909252604090912054613d939190615911565b60208201528051680ad78ebc5ac61fffff1901613e1657613db388614657565b613dbe886004614305565b613dd78989680ad78ebc5ac62000008460200151614ea5565b6001600160a01b038816600080516020615ace833981519152600080808060035b604051613e099594939291906159fe565b60405180910390a2614099565b602080820151600b546001600160a01b038b81166000908152600e8552604090819020600101548151637c3a00fd60e01b81529151613f2596939094169363ac3058ad9391928592637c3a00fd926004808401938290030181865afa158015613e83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ea791906159e1565b613eb361025842615911565b426040518563ffffffff1660e01b8152600401613ed394939291906159c2565b602060405180830381865afa158015613ef0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f1491906158c9565b8351613f209190615911565b613898565b604082015260208101518151613f3b9190613898565b60608201819052831080613f525750806040015183115b80613f715750686194049f30f7200000613f6f826000015161500b565b105b15613f8357506001604082015261409b565b6080890151606082015160405163015f109360e51b81526001600160a01b038b81166004830152602482019290925287821660448201528682166064820152911690632be2126090608401600060405180830381600087803b158015613fe857600080fd5b505af1158015613ffc573d6000803e3d6000fd5b50505050614009886120d3565b614017888360000151612a6e565b6020808201516001600160a01b038a166000908152600e90925260409091205561404088612be4565b506001600160a01b0388166000818152600e602090815260409182902060018101546002820154928601516003928301549451600080516020615ace8339815191529561409095939490916159fe565b60405180910390a25b505b979650505050505050565b6000806140b16135a4565b90506000836140c08688615924565b6140ca9190615951565b905060006140d9600283615951565b6140e3908461597b565b90506140f781670de0b6b3a7640000614dc8565b90506000811161410957614109615965565b600c8190556040518181527fc454ee9b76c52f782a256af821b857ca6e125d1e3333bcede402fec2bed9600c9060200160405180910390a16121e26135e8565b6000610ce4612227611179565b60008261416b670de0b6b3a764000086615924565b6141759190615951565b905081811115612a685760405162461bcd60e51b815260206004820152601d60248201527f4665652065786365656465642070726f7669646564206d6178696d756d0000006044820152606401610d56565b600b5460405163fd50a56760e01b815261ffff831660048201526000916001600160a01b03169063fd50a567906024016020604051808303816000875af1158015614216573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061423a91906158c9565b6008546009546040516340c10f1960e01b81529293506001600160a01b03918216926340c10f199261427292169085906004016158e2565b600060405180830381600087803b15801561428c57600080fd5b505af11580156142a0573d6000803e3d6000fd5b5050600080546040516354c4666160e01b81526004810192909252602482018590526001600160a01b031692506354c466619150604401600060405180830381600087803b1580156142f157600080fd5b505af1158015611139573d6000803e3d6000fd5b60008160048111156143195761431961562d565b14158015614339575060018160048111156143365761433661562d565b14155b61434557614345615965565b60155460085460048054604051635f7a196360e11b81526001600160a01b039384169363bef432c69361437c9390911691016154d0565b602060405180830381865afa158015614399573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143bd9190615a61565b156143cb576143cb81615020565b6001600160a01b0383166000908152600e6020526040902060049081018054849260ff199091169060019084908111156144075761440761562d565b02179055506001600160a01b0383166000908152600e60209081526040808320838155600180820185905560029182018590556019909352908320838155918201839055015561445783826150fa565b600a54604051631484968760e11b81526001600160a01b03909116906329092d0e906144879086906004016154d0565b600060405180830381600087803b1580156144a157600080fd5b505af11580156144b5573d6000803e3d6000fd5b50505050505050565b600082156144e6576000836144d38487615924565b6144dd9190615951565b915061359d9050565b5060001961359d565b600080670de0b6b3a76400006145058486615924565b61450f9190615951565b905082811061359d5760405162461bcd60e51b815260206004820152603660248201527f54726f76654d616e616765723a2046656520776f756c642065617420757020616044820152751b1b081c995d1d5c9b99590818dbdb1b185d195c985b60521b6064820152608401610d56565b600b546001600160a01b038281166000908152600e60205260408082206001810154600480830154600590930154935163ac3058ad60e01b81529496959095169463ac3058ad946145df949293610100900461ffff1692914291016159c2565b602060405180830381865afa1580156145fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061462091906158c9565b6001600160a01b0383166000908152600e60205260409020600281015460019091015461464d919061597b565b610ce4919061597b565b6001600160a01b0381166000908152600e6020526040812060030154600f805491928392614686908490615911565b9091555050506001600160a01b03166000908152600e6020526040812060030155565b60405163ab11fadd60e01b815260048101839052602481018290526001600160a01b0385169063ab11fadd90604401600060405180830381600087803b1580156146f257600080fd5b505af1158015614706573d6000803e3d6000fd5b50506040516354c4666160e01b815260048101859052602481018490526001600160a01b03881692506354c466619150604401600060405180830381600087803b15801561475357600080fd5b505af1158015614767573d6000803e3d6000fd5b5050604051633ef8ba8160e11b8152600481018690526001600160a01b0387169250637df175029150602401600060405180830381600087803b1580156147ad57600080fd5b505af11580156147c1573d6000803e3d6000fd5b505050505050505050565b6000806011546000036147e0575081610ce4565b6000601054116147f2576147f2615965565b6011546010546135939085615924565b61480a61542e565b6148356040518060800160405280600081526020016000815260200160008152602001600081525090565b601554600110614845575061409b565b61484e87611985565b606087015260408681019190915260208681019290925290860191909152908452830181905261487d906152bd565b60608301819052680ad78ebc5ac6200000608084015260408301516148a29190615911565b8152670de0b6b3a76400008611614968576148bc87614657565b6148d589898360200151846040015185606001516146a9565b600060a0830181905260c0830152815160e083015280516101208301526148fd876003614305565b815160408301516001600160a01b03891691600080516020615aae8339815191529160025b60408051938452602084019290925260ff169082015260600160405180910390a26001600160a01b038716600080516020615ace83398151915260008080806002613df8565b670de0b6b3a7640000861180156149865750670f43fc2c04ee000086105b156149e85761499487614657565b6149ad89898360200151846040015185606001516146a9565b8151602083015182516149c2929190886152ca565b61012087015261010086015260e085015260c084015260a08301526148fd876003614305565b670f43fc2c04ee000086101580156149ff57508386105b8015614a0c575081518510155b15614b0157614a1a87614657565b614a3389898360200151846040015185606001516146a9565b84600003614a4357614a43615965565b614a568260000151836040015185615368565b9150614a63876003614305565b61014082015115614ad857600754610140830151604051633f10abab60e01b81526001600160a01b0390921691633f10abab91614aa5918b91906004016158e2565b600060405180830381600087803b158015614abf57600080fd5b505af1158015614ad3573d6000803e3d6000fd5b505050505b815160c08301516001600160a01b03891691600080516020615aae833981519152916002614922565b614b0961542e565b915061409b9050565b614b1a61542e565b81606001518360600151614b2e919061597b565b606082015260808083015190840151614b47919061597b565b608082015281516020840151614b5d919061597b565b6020808301919091528201516040840151614b78919061597b565b6040808301919091528201518351614b90919061597b565b815260a08083015190840151614ba6919061597b565b60a082015260c08083015190840151614bbf919061597b565b60c082015260e08083015190840151614bd8919061597b565b60e08201526101008083015190840151614bf2919061597b565b6101008201526101208083015190840151614c0d919061597b565b6101208201526101408083015190840151614c28919061597b565b61014082015292915050565b600080614c428585856144be565b6714d1120d7b1600001195945050505050565b614c5d61542e565b614c886040518060800160405280600081526020016000815260200160008152602001600081525090565b614c9184611985565b606087015260408681019190915260208681019290925290860191909152908452830152614cbe84614657565b614cd786868360200151846040015185606001516146a9565b614ce482604001516152bd565b60608301819052680ad78ebc5ac620000060808401526040830151600091614d0b91615911565b9050614d218360000151846020015183876152ca565b61012088015261010087015260e086015260c085015260a0840152614d47856003614305565b8251604080850151815192835260208301526001908201526001600160a01b03861690600080516020615aae8339815191529060600160405180910390a26001600160a01b038516600080516020615ace83398151915260008080806001604051614db69594939291906159fe565b60405180910390a25050949350505050565b6000818310614dd7578161359d565b5090919050565b6000603c600d5442614df09190615911565b6111869190615951565b6000631f540500821115614e1057631f54050091505b81600003614e275750670de0b6b3a7640000610ce4565b670de0b6b3a764000083835b6001811115614e9b57614e47600282615a83565b600003614e6c57614e5882836153f7565b9150614e65600282615951565b9050614e33565b614e7682846153f7565b9250614e8282836153f7565b91506002614e91600183615911565b614e659190615951565b6121e282846153f7565b6040808501516006549151632770a7eb60e21b81526001600160a01b0391821692639dc29fac92614edd9291169086906004016158e2565b600060405180830381600087803b158015614ef757600080fd5b505af1158015614f0b573d6000803e3d6000fd5b5050855160405163ab11fadd60e01b815260048101869052600060248201526001600160a01b03909116925063ab11fadd9150604401600060405180830381600087803b158015614f5b57600080fd5b505af1158015614f6f573d6000803e3d6000fd5b505050508360a001516001600160a01b0316633f10abab84836040518363ffffffff1660e01b8152600401614fa59291906158e2565b600060405180830381600087803b158015614fbf57600080fd5b505af1158015614fd3573d6000803e3d6000fd5b5050855160a0870151604051636250216960e01b81526001600160a01b039092169350636250216992506134709185906004016158e2565b6000610ce4680ad78ebc5ac620000083615911565b60018111801561509b5750600a546040805163de8fa43160e01b815290516001926001600160a01b03169163de8fa4319160048083019260209291908290030181865afa158015615075573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061509991906158c9565b115b610c6e5760405162461bcd60e51b815260206004820152602a60248201527f54726f76654d616e616765723a204f6e6c79206f6e652074726f766520696e206044820152697468652073797374656d60b01b6064820152608401610d56565b6001600160a01b0382166000908152600e602052604081206004015460ff169081600481111561512c5761512c61562d565b1415801561514c575060018160048111156151495761514961562d565b14155b61515857615158615965565b6001600160a01b0383166000908152600e60205260408120600701546001600160801b031690839061518b600183615911565b905080836001600160801b031611156151a6576151a6615965565b6000601582815481106151bb576151bb6158b3565b600091825260209091200154601580546001600160a01b03909216925082916001600160801b0387169081106151f3576151f36158b3565b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055918316808252600e835260409182902060070180546001600160801b0319166001600160801b0389169081179091558251918252928101929092527f02b04ae5f7be9ca7c103293a2aa15f3c339d15d6eda53b721fef7b0e609c831a910160405180910390a1601580548061529257615292615a97565b600082815260209020810160001990810180546001600160a01b031916905501905550505050505050565b6000610ce460c883615951565b600080808080851561534d5760006152e28988614dc8565b905060006152f48b61368e848b615911565b9050615300828261597b565b965061530c8a8c61597b565b615316888b615924565b6153209190615951565b955061532c828b615911565b9350615338818c615911565b9450615344868a615911565b9250505061535d565b5060009350839250879150869050855b945094509450945094565b61537061542e565b8381526040810183905260008261538f670f43fc2c04ee000087615924565b6153999190615951565b90506153a4816152bd565b60608301819052680ad78ebc5ac6200000608084015260a083018690526153cb9082615911565b60c08301526153da8185615911565b61014083015250600060e082018190526101208201529392505050565b6000806154048385615924565b9050670de0b6b3a764000061541a600282615951565b615424908361597b565b6138f29190615951565b60405180610160016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060e0016040528060008152602001600081526020016000815260200160006001600160a01b0316815260200160001515815260200160008152602001600081525090565b6001600160a01b0391909116815260200190565b6001600160a01b0381168114610c6e57600080fd5b8035615504816154e4565b919050565b60006020828403121561551b57600080fd5b813561359d816154e4565b6000806040838503121561553957600080fd5b8235615544816154e4565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561557b57600080fd5b823567ffffffffffffffff8082111561559357600080fd5b818501915085601f8301126155a757600080fd5b8135818111156155b9576155b9615552565b8060051b604051601f19603f830116810181811085821117156155de576155de615552565b6040529182528482019250838101850191888311156155fc57600080fd5b938501935b8285101561562157615612856154f9565b84529385019392850192615601565b98975050505050505050565b634e487b7160e01b600052602160045260246000fd5b6005811061566157634e487b7160e01b600052602160045260246000fd5b9052565b60208101610ce48284615643565b60006020828403121561568557600080fd5b5035919050565b6000610120820190508a82528960208301528860408301528760608301526156b76080830188615643565b61ffff9590951660a082015260c081019390935260e08301919091526001600160801b03166101009091015295945050505050565b61ffff81168114610c6e57600080fd5b6000806040838503121561570f57600080fd5b823561571a816154e4565b9150602083013561572a816156ec565b809150509250929050565b60008060008060008060008060008060006101608c8e03121561575757600080fd5b8b35615762816154e4565b9a5060208c0135615772816154e4565b995060408c0135615782816154e4565b985060608c0135615792816154e4565b975060808c01356157a2816154e4565b965060a08c01356157b2816154e4565b955060c08c01356157c2816154e4565b945060e08c01356157d2816154e4565b93506101008c01356157e3816154e4565b92506157f26101208d016154f9565b91506158016101408d016154f9565b90509295989b509295989b9093969950565b6000806040838503121561582657600080fd5b8235615831816154e4565b915060208301356005811061572a57600080fd5b600080600080600080600060e0888a03121561586057600080fd5b873596506020880135615872816154e4565b95506040880135615882816154e4565b94506060880135615892816154e4565b9699959850939660808101359560a0820135955060c0909101359350915050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156158db57600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b634e487b7160e01b600052601160045260246000fd5b81810381811115610ce457610ce46158fb565b8082028115828204841417610ce457610ce46158fb565b634e487b7160e01b600052601260045260246000fd5b6000826159605761596061593b565b500490565b634e487b7160e01b600052600160045260246000fd5b80820180821115610ce457610ce46158fb565b6000602082840312156159a057600080fd5b815161359d816154e4565b6000816159ba576159ba6158fb565b506000190190565b93845261ffff9290921660208401526040830152606082015260800190565b6000602082840312156159f357600080fd5b815161359d816156ec565b94855260208501939093526040840191909152606083015260ff16608082015260a00190565b60008060408385031215615a3757600080fd5b505080516020909101519092909150565b600060018201615a5a57615a5a6158fb565b5060010190565b600060208284031215615a7357600080fd5b8151801515811461359d57600080fd5b600082615a9257615a9261593b565b500690565b634e487b7160e01b600052603160045260246000fdfeea67486ed7ebe3eea8ab3390efd4a3c8aae48be5bea27df104a8af786c408434f575eb5cdee005607f56587351e18943ddacd11756b9d37980ec251797ff136ca26469706673582212201f4381f6a418ecc087f98a912cc1f3c986c757a19697527729c09d9fc431ea6564736f6c63430008180033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 27200,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "activePool",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IActivePool)27761"
      },
      {
        "astId": 27203,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "defaultPool",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IDefaultPool)28100"
      },
      {
        "astId": 27207,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPriceFeed)28494"
      },
      {
        "astId": 8,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 12678,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "borrowerOperationsAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 12682,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "stabilityPool",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IStabilityPool)28803"
      },
      {
        "astId": 12684,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "gasPoolAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 12687,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "collSurplusPool",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ICollSurplusPool)28061"
      },
      {
        "astId": 12690,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "musdToken",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IMUSD)29790"
      },
      {
        "astId": 12694,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "pcv",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IPCV)28414"
      },
      {
        "astId": 12697,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "sortedTroves",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(ISortedTroves)28642"
      },
      {
        "astId": 12700,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "interestRateManager",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IInterestRateManager)28248"
      },
      {
        "astId": 12724,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "baseRate",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 12726,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "lastFeeOperationTime",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 12731,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "Troves",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_struct(Trove)12536_storage)"
      },
      {
        "astId": 12733,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "totalStakes",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 12735,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "totalStakesSnapshot",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 12737,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "totalCollateralSnapshot",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 12739,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "L_Collateral",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 12741,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "L_Principal",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 12743,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "L_Interest",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 12746,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "TroveOwners",
        "offset": 0,
        "slot": "21",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 12748,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "lastCollateralError_Redistribution",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 12750,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "lastPrincipalError_Redistribution",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 12752,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "lastInterestError_Redistribution",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 12757,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "rewardSnapshots",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_struct(RewardSnapshot)12543_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(IActivePool)27761": {
        "encoding": "inplace",
        "label": "contract IActivePool",
        "numberOfBytes": "20"
      },
      "t_contract(ICollSurplusPool)28061": {
        "encoding": "inplace",
        "label": "contract ICollSurplusPool",
        "numberOfBytes": "20"
      },
      "t_contract(IDefaultPool)28100": {
        "encoding": "inplace",
        "label": "contract IDefaultPool",
        "numberOfBytes": "20"
      },
      "t_contract(IInterestRateManager)28248": {
        "encoding": "inplace",
        "label": "contract IInterestRateManager",
        "numberOfBytes": "20"
      },
      "t_contract(IMUSD)29790": {
        "encoding": "inplace",
        "label": "contract IMUSD",
        "numberOfBytes": "20"
      },
      "t_contract(IPCV)28414": {
        "encoding": "inplace",
        "label": "contract IPCV",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)28494": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(ISortedTroves)28642": {
        "encoding": "inplace",
        "label": "contract ISortedTroves",
        "numberOfBytes": "20"
      },
      "t_contract(IStabilityPool)28803": {
        "encoding": "inplace",
        "label": "contract IStabilityPool",
        "numberOfBytes": "20"
      },
      "t_enum(Status)28813": {
        "encoding": "inplace",
        "label": "enum ITroveManager.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(RewardSnapshot)12543_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TroveManager.RewardSnapshot)",
        "numberOfBytes": "32",
        "value": "t_struct(RewardSnapshot)12543_storage"
      },
      "t_mapping(t_address,t_struct(Trove)12536_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TroveManager.Trove)",
        "numberOfBytes": "32",
        "value": "t_struct(Trove)12536_storage"
      },
      "t_struct(RewardSnapshot)12543_storage": {
        "encoding": "inplace",
        "label": "struct TroveManager.RewardSnapshot",
        "members": [
          {
            "astId": 12538,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "collateral",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12540,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "principal",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12542,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "interest",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Trove)12536_storage": {
        "encoding": "inplace",
        "label": "struct TroveManager.Trove",
        "members": [
          {
            "astId": 12518,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "coll",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12520,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "principal",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12522,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "interestOwed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12524,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "stake",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 12527,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "status",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(Status)28813"
          },
          {
            "astId": 12529,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "interestRate",
            "offset": 1,
            "slot": "4",
            "type": "t_uint16"
          },
          {
            "astId": 12531,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "lastInterestUpdateTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 12533,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "maxBorrowingCapacity",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 12535,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "arrayIndex",
            "offset": 0,
            "slot": "7",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}