{
  "address": "0x46A5D13423d5dD6A344360f8c76a97dFB81a5208",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newActivePoolAddress",
          "type": "address"
        }
      ],
      "name": "ActivePoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_collateral",
          "type": "uint256"
        }
      ],
      "name": "ActivePoolCollateralBalanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_principal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_interest",
          "type": "uint256"
        }
      ],
      "name": "ActivePoolDebtUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newBorrowerOperationsAddress",
          "type": "address"
        }
      ],
      "name": "BorrowerOperationsAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newCollSurplusPoolAddress",
          "type": "address"
        }
      ],
      "name": "CollSurplusPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newCollateralAddress",
          "type": "address"
        }
      ],
      "name": "CollateralAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newBalance",
          "type": "uint256"
        }
      ],
      "name": "CollateralBalanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "CollateralSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newDefaultPoolAddress",
          "type": "address"
        }
      ],
      "name": "DefaultPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newStabilityPoolAddress",
          "type": "address"
        }
      ],
      "name": "StabilityPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newTroveManagerAddress",
          "type": "address"
        }
      ],
      "name": "TroveManagerAddressChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "borrowerOperationsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collSurplusPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interest",
          "type": "uint256"
        }
      ],
      "name": "decreaseDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrincipal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interest",
          "type": "uint256"
        }
      ],
      "name": "increaseDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sendCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrowerOperationsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collSurplusPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_defaultPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_troveManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stabilityPoolAddress",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "troveManagerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0ad139d1d14a9715fe0538534670e0accc66a0cea004383ffba51b4b365c44fe",
  "receipt": {
    "to": null,
    "from": "0x6e80164ea60673D64d5d6228beb684a1274Bb017",
    "contractAddress": "0x46A5D13423d5dD6A344360f8c76a97dFB81a5208",
    "transactionIndex": 0,
    "gasUsed": "1163782",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000001000000000000000000000000000000000000021000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000020000000000000",
    "blockHash": "0xf2180c0360fca3e4a9422534f2c23616f5999756904f1ac2c3a81434757a2a0e",
    "transactionHash": "0x0ad139d1d14a9715fe0538534670e0accc66a0cea004383ffba51b4b365c44fe",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 987108,
        "transactionHash": "0x0ad139d1d14a9715fe0538534670e0accc66a0cea004383ffba51b4b365c44fe",
        "address": "0x46A5D13423d5dD6A344360f8c76a97dFB81a5208",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006e80164ea60673d64d5d6228beb684a1274bb017"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf2180c0360fca3e4a9422534f2c23616f5999756904f1ac2c3a81434757a2a0e"
      }
    ],
    "blockNumber": 987108,
    "cumulativeGasUsed": "1163782",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8d0bf0a003873aec33a51656649ba1f0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newActivePoolAddress\",\"type\":\"address\"}],\"name\":\"ActivePoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collateral\",\"type\":\"uint256\"}],\"name\":\"ActivePoolCollateralBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_interest\",\"type\":\"uint256\"}],\"name\":\"ActivePoolDebtUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newBorrowerOperationsAddress\",\"type\":\"address\"}],\"name\":\"BorrowerOperationsAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newCollSurplusPoolAddress\",\"type\":\"address\"}],\"name\":\"CollSurplusPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newCollateralAddress\",\"type\":\"address\"}],\"name\":\"CollateralAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBalance\",\"type\":\"uint256\"}],\"name\":\"CollateralBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CollateralSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newDefaultPoolAddress\",\"type\":\"address\"}],\"name\":\"DefaultPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newStabilityPoolAddress\",\"type\":\"address\"}],\"name\":\"StabilityPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newTroveManagerAddress\",\"type\":\"address\"}],\"name\":\"TroveManagerAddressChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"borrowerOperationsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collSurplusPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interest\",\"type\":\"uint256\"}],\"name\":\"decreaseDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrincipal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interest\",\"type\":\"uint256\"}],\"name\":\"increaseDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collSurplusPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ActivePool.sol\":\"ActivePool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/ActivePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./dependencies/CheckContract.sol\\\";\\nimport \\\"./dependencies/SendCollateral.sol\\\";\\nimport \\\"./interfaces/IActivePool.sol\\\";\\nimport \\\"./interfaces/IBorrowerOperations.sol\\\";\\nimport \\\"./interfaces/ICollSurplusPool.sol\\\";\\nimport \\\"./interfaces/IDefaultPool.sol\\\";\\nimport \\\"./interfaces/IStabilityPool.sol\\\";\\n\\n/*\\n * The Active Pool holds the collateral and debt (but not mUSD tokens) for all active troves.\\n *\\n * When a trove is liquidated, it's collateral and debt are transferred from the Active Pool, to either the\\n * Stability Pool, the Default Pool, or both, depending on the liquidation conditions.\\n *\\n */\\ncontract ActivePool is Ownable, CheckContract, SendCollateral, IActivePool {\\n    address public borrowerOperationsAddress;\\n    address public collateralAddress;\\n    address public collSurplusPoolAddress;\\n    address public defaultPoolAddress;\\n    address public stabilityPoolAddress;\\n    address public troveManagerAddress;\\n    uint256 internal collateral; // deposited collateral tracker\\n    uint256 internal principal;\\n    uint256 internal interest;\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    // --- Fallback function ---\\n\\n    // This executes when the contract receives BTC\\n    // solhint-disable no-complex-fallback\\n    receive() external payable {\\n        _requireCallerIsBorrowerOperationsOrDefaultPool();\\n        require(\\n            collateralAddress == address(0),\\n            \\\"ActivePool: ERC20 collateral needed, not BTC\\\"\\n        );\\n        collateral += msg.value;\\n        emit ActivePoolCollateralBalanceUpdated(collateral);\\n    }\\n\\n    // --- Contract setters ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _collateralAddress,\\n        address _collSurplusPoolAddress,\\n        address _defaultPoolAddress,\\n        address _troveManagerAddress,\\n        address _stabilityPoolAddress\\n    ) external onlyOwner {\\n        checkContract(_borrowerOperationsAddress);\\n        if (_collateralAddress != address(0)) {\\n            checkContract(_collateralAddress);\\n        }\\n        checkContract(_collSurplusPoolAddress);\\n        checkContract(_defaultPoolAddress);\\n        checkContract(_stabilityPoolAddress);\\n        checkContract(_troveManagerAddress);\\n\\n        // slither-disable-next-line missing-zero-check\\n        borrowerOperationsAddress = _borrowerOperationsAddress;\\n        collateralAddress = _collateralAddress;\\n        // slither-disable-next-line missing-zero-check\\n        collSurplusPoolAddress = _collSurplusPoolAddress;\\n        // slither-disable-next-line missing-zero-check\\n        defaultPoolAddress = _defaultPoolAddress;\\n        // slither-disable-next-line missing-zero-check\\n        stabilityPoolAddress = _stabilityPoolAddress;\\n        // slither-disable-next-line missing-zero-check\\n        troveManagerAddress = _troveManagerAddress;\\n\\n        require(\\n            (Ownable(_borrowerOperationsAddress).owner() != address(0) ||\\n                IBorrowerOperations(_borrowerOperationsAddress)\\n                    .collateralAddress() ==\\n                _collateralAddress) &&\\n                (Ownable(_collSurplusPoolAddress).owner() != address(0) ||\\n                    ICollSurplusPool(_collSurplusPoolAddress)\\n                        .collateralAddress() ==\\n                    _collateralAddress) &&\\n                (Ownable(_defaultPoolAddress).owner() != address(0) ||\\n                    IDefaultPool(_defaultPoolAddress).collateralAddress() ==\\n                    _collateralAddress) &&\\n                (Ownable(_stabilityPoolAddress).owner() != address(0) ||\\n                    IStabilityPool(stabilityPoolAddress).collateralAddress() ==\\n                    _collateralAddress),\\n            \\\"The same collateral address must be used for the entire set of contracts\\\"\\n        );\\n\\n        emit BorrowerOperationsAddressChanged(_borrowerOperationsAddress);\\n        emit CollateralAddressChanged(_collateralAddress);\\n        emit CollSurplusPoolAddressChanged(_collSurplusPoolAddress);\\n        emit DefaultPoolAddressChanged(_defaultPoolAddress);\\n        emit StabilityPoolAddressChanged(_stabilityPoolAddress);\\n        emit TroveManagerAddressChanged(_troveManagerAddress);\\n\\n        renounceOwnership();\\n    }\\n\\n    function increaseDebt(\\n        uint256 _principal,\\n        uint256 _interest\\n    ) external override {\\n        _requireCallerIsBorrowerOperationsOrTroveManager();\\n        principal += _principal;\\n        interest += _interest;\\n        emit ActivePoolDebtUpdated(principal, interest);\\n    }\\n\\n    function decreaseDebt(\\n        uint256 _principal,\\n        uint256 _interest\\n    ) external override {\\n        _requireCallerIsBOorTroveMorSP();\\n        principal -= _principal;\\n        interest -= _interest;\\n        emit ActivePoolDebtUpdated(principal, interest);\\n    }\\n\\n    function sendCollateral(\\n        address _account,\\n        uint256 _amount\\n    ) external override {\\n        _requireCallerIsBOorTroveMorSP();\\n        collateral -= _amount;\\n        emit ActivePoolCollateralBalanceUpdated(collateral);\\n        emit CollateralSent(_account, _amount);\\n\\n        sendCollateral(IERC20(collateralAddress), _account, _amount);\\n    }\\n\\n    /*\\n     * Returns the collateral state variable.\\n     *\\n     * Not necessarily equal to the the contract's raw collateral balance - collateral can be forcibly sent to contracts.\\n     */\\n    function getCollateralBalance() external view override returns (uint) {\\n        return collateral;\\n    }\\n\\n    function getDebt() external view override returns (uint) {\\n        return principal + interest;\\n    }\\n\\n    function getPrincipal() external view override returns (uint) {\\n        return principal;\\n    }\\n\\n    function getInterest() external view override returns (uint) {\\n        return interest;\\n    }\\n\\n    function _requireCallerIsBorrowerOperationsOrDefaultPool() internal view {\\n        require(\\n            msg.sender == borrowerOperationsAddress ||\\n                msg.sender == defaultPoolAddress,\\n            \\\"ActivePool: Caller is neither BorrowerOperations nor Default Pool\\\"\\n        );\\n    }\\n\\n    function _requireCallerIsBorrowerOperationsOrTroveManager() internal view {\\n        require(\\n            msg.sender == borrowerOperationsAddress ||\\n                msg.sender == troveManagerAddress,\\n            \\\"ActivePool: Caller is neither BorrowerOperations nor TroveManager\\\"\\n        );\\n    }\\n\\n    function _requireCallerIsBOorTroveMorSP() internal view {\\n        require(\\n            msg.sender == borrowerOperationsAddress ||\\n                msg.sender == troveManagerAddress ||\\n                msg.sender == stabilityPoolAddress,\\n            \\\"ActivePool: Caller is neither BorrowerOperations nor TroveManager nor StabilityPool\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x4dc9cfaceaee4e5cbfc10de4b31fe2e37238ee34a5a4b6b1e66e78bf3d37f3ca\",\"license\":\"MIT\"},\"contracts/dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\ncontract CheckContract {\\n    /**\\n     * Check that the account is an already deployed non-destroyed contract.\\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n     */\\n    function checkContract(address _account) internal view {\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(_account)\\n        }\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xab260c88c1d2f0ffbbd5d43c4a1df5e48132678e67fc24b65fa2d823f97cbc32\",\"license\":\"MIT\"},\"contracts/dependencies/SendCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract SendCollateral {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * Sends collateral to recipient\\n     */\\n    function sendCollateral(\\n        IERC20 _collateralERC20,\\n        address _recipient,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_collateralERC20) == address(0)) {\\n            // BTC\\n            // slither-disable-next-line low-level-calls\\n            (bool success, ) = _recipient.call{value: _amount}(\\\"\\\"); // re-entry is fine here\\n            require(success, \\\"Sending BTC failed\\\");\\n        } else {\\n            // ERC20\\n            _collateralERC20.safeTransfer(_recipient, _amount);\\n        }\\n    }\\n\\n    /**\\n     * Sends collateral to recipient\\n     */\\n    function sendCollateralFrom(\\n        IERC20 _collateralERC20,\\n        address _from,\\n        address _recipient,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_collateralERC20) == address(0)) {\\n            // BTC\\n            // slither-disable-next-line low-level-calls\\n            (bool success, ) = _recipient.call{value: _amount}(\\\"\\\"); // re-entry is fine here\\n            require(success, \\\"Sending BTC failed\\\");\\n        } else {\\n            // ERC20\\n            // slither-disable-next-line arbitrary-send-erc20\\n            _collateralERC20.safeTransferFrom(_from, _recipient, _amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9e921fc2b3babcb115a4e033f85b36f61b974e7a559f577a9fe8e1f9a354c4e0\",\"license\":\"MIT\"},\"contracts/interfaces/IActivePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IActivePool is IPool {\\n    // --- Events ---\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolDebtUpdated(uint256 _principal, uint256 _interest);\\n    event ActivePoolCollateralBalanceUpdated(uint256 _collateral);\\n    event CollateralAddressChanged(address _newCollateralAddress);\\n    event CollSurplusPoolAddressChanged(address _newCollSurplusPoolAddress);\\n\\n    // --- Functions ---\\n    function sendCollateral(address _account, uint256 _amount) external;\\n\\n    function collateralAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3b119711f550d5cb7cb51eba4cafca30fced922c633141f04e7faf3468008f4c\",\"license\":\"MIT\"},\"contracts/interfaces/IBorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\n// Common interface for the Trove Manager.\\ninterface IBorrowerOperations {\\n    // --- Events ---\\n\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event MUSDTokenAddressChanged(address _musdTokenAddress);\\n    event PCVAddressChanged(address _pcvAddress);\\n    event CollateralAddressChanged(address _newCollateralAddress);\\n\\n    event TroveCreated(address indexed _borrower, uint256 arrayIndex);\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint256 _principal,\\n        uint256 _interest,\\n        uint256 _coll,\\n        uint256 stake,\\n        uint8 operation\\n    );\\n    event BorrowingFeePaid(address indexed _borrower, uint256 _fee);\\n    event RefinancingFeePaid(address indexed _borrower, uint256 _fee);\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _activePoolAddress,\\n        address _collateralAddress,\\n        address _collSurplusPoolAddress,\\n        address _defaultPoolAddress,\\n        address _gasPoolAddress,\\n        address _interestRateManagerAddress,\\n        address _musdTokenAddress,\\n        address _pcvAddress,\\n        address _priceFeedAddress,\\n        address _stabilityPoolAddress,\\n        address _sortedTrovesAddress,\\n        address _troveManagerAddress\\n    ) external;\\n\\n    function setRefinancingFeePercentage(\\n        uint8 _refinanceFeePercentage\\n    ) external;\\n\\n    function openTrove(\\n        uint256 _maxFeePercentage,\\n        uint256 _debtAmount,\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    function addColl(\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    function moveCollateralGainToTrove(\\n        address _borrower,\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    function withdrawColl(\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function withdrawMUSD(\\n        uint256 _maxFeePercentage,\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function repayMUSD(\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function closeTrove() external;\\n\\n    function refinance(uint256 _maxFeePercentage) external;\\n\\n    function adjustTrove(\\n        uint256 _maxFeePercentage,\\n        uint256 _collWithdrawal,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease,\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    function claimCollateral() external;\\n\\n    function collateralAddress() external view returns (address);\\n\\n    function getCompositeDebt(uint256 _debt) external pure returns (uint);\\n}\\n\",\"keccak256\":\"0xd52b2e73557f53796cbb3081425e236ee015e4c8e868bdd8a51d7d4dc89aa19b\",\"license\":\"MIT\"},\"contracts/interfaces/ICollSurplusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\ninterface ICollSurplusPool {\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event CollateralAddressChanged(address _newCollateralAddress);\\n\\n    event CollBalanceUpdated(address indexed _account, uint256 _newBalance);\\n    event CollateralSent(address _to, uint256 _amount);\\n\\n    // --- Contract setters ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _collateralAddress\\n    ) external;\\n\\n    function accountSurplus(address _account, uint256 _amount) external;\\n\\n    function claimColl(address _account) external;\\n\\n    function collateralAddress() external view returns (address);\\n\\n    function getCollateralBalance() external view returns (uint);\\n\\n    function getCollateral(address _account) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x88876632aec941cf5a26379e33a299c04ddfa36ae3b28df14961e1ebbbb2c7a0\",\"license\":\"MIT\"},\"contracts/interfaces/IDefaultPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IDefaultPool is IPool {\\n    // --- Events ---\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event DefaultPoolDebtUpdated(uint256 _principal, uint256 _interest);\\n    event DefaultPoolCollateralBalanceUpdated(uint256 _collateral);\\n    event CollateralAddressChanged(address _newCollateralAddress);\\n\\n    // --- Functions ---\\n    function sendCollateralToActivePool(uint256 _amount) external;\\n\\n    function collateralAddress() external view returns (address);\\n\\n    function getLastInterestUpdatedTime() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x764439d379b9f63c8c326327a8287d3e071f3c37b8907034c36e236b7f739c6a\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\n// Common interface for the Pools.\\ninterface IPool {\\n    // --- Events ---\\n\\n    event CollateralBalanceUpdated(uint256 _newBalance);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event CollateralSent(address _to, uint256 _amount);\\n\\n    // --- Functions ---\\n\\n    function increaseDebt(uint256 _principal, uint256 _interest) external;\\n\\n    function decreaseDebt(uint256 _principal, uint256 _interest) external;\\n\\n    function getCollateralBalance() external view returns (uint);\\n\\n    function getDebt() external view returns (uint);\\n\\n    function getPrincipal() external view returns (uint);\\n\\n    function getInterest() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xfdb6fcad4c0965cf8617ce3db22d9db8661929ec8a1466672397f20fedb68550\",\"license\":\"MIT\"},\"contracts/interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\n/*\\n * The Stability Pool holds mUSD tokens deposited by Stability Pool depositors.\\n *\\n * When a trove is liquidated, then depending on system conditions, some of its debt gets offset with\\n * mUSD in the Stability Pool: that is, the offset debt evaporates, and an equal amount of mUSD tokens in the Stability Pool are burned.\\n *\\n * Thus, a liquidation causes each depositor to receive a mUSD loss in proportion to their deposit as a share of total deposits.\\n * They also receive an collateral gain, as the collateral of the liquidated trove is distributed among Stability depositors\\n * in the same proportion.\\n *\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\n * of the total mUSD in the Stability Pool, depletes 40% of each deposit.\\n *\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\n * multiplying it by some factor in range ]0,1[\\n *\\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / collateral gain derivations:\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\n *\\n */\\ninterface IStabilityPool {\\n    // --- Events ---\\n\\n    event StabilityPoolCollateralBalanceUpdated(uint256 _newBalance);\\n    event StabilityPoolMUSDBalanceUpdated(uint256 _newBalance);\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event MUSDTokenAddressChanged(address _newMUSDTokenAddress);\\n    event SortedTrovesAddressChanged(address _newSortedTrovesAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event CollateralAddressChanged(address _newCollateralAddress);\\n\\n    event PUpdated(uint256 _P);\\n    event SUpdated(uint256 _S, uint128 _epoch, uint128 _scale);\\n    event EpochUpdated(uint128 _currentEpoch);\\n    event ScaleUpdated(uint128 _currentScale);\\n\\n    event DepositSnapshotUpdated(\\n        address indexed _depositor,\\n        uint256 _P,\\n        uint256 _S\\n    );\\n    event UserDepositChanged(address indexed _depositor, uint256 _newDeposit);\\n\\n    event CollateralGainWithdrawn(\\n        address indexed _depositor,\\n        uint256 _collateral,\\n        uint256 _MUSDLoss\\n    );\\n    event CollateralSent(address _to, uint256 _amount);\\n\\n    // --- Functions ---\\n\\n    /*\\n     * Called only once on init, to set addresses of other Liquity contracts\\n     * Callable only by owner, renounces ownership at the end\\n     */\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _musdTokenAddress,\\n        address _sortedTrovesAddress,\\n        address _priceFeedAddress,\\n        address _collateralAddress\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is not zero\\n     * ---\\n     * - Sends depositor's accumulated gains (collateral) to depositor\\n     */\\n    function provideToSP(uint256 _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is zero or there are no under collateralized troves left in the system\\n     * - User has a non zero deposit\\n     * ---\\n     * - Sends all depositor's accumulated gains (collateral) to depositor\\n     * - Decreases deposit stake, and takes new snapshot.\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(uint256 _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - User has a non zero deposit\\n     * - User has an open trove\\n     * - User has some collateral gain\\n     * ---\\n     * - Transfers the depositor's entire collateral gain from the Stability Pool to the caller's trove\\n     * - Leaves their compounded deposit in the Stability Pool\\n     * - Updates snapshots for deposit\\n     */\\n    function withdrawCollateralGainToTrove(\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Caller is TroveManager\\n     * ---\\n     * Cancels out the specified debt against the mUSD contained in the Stability Pool (as far as possible)\\n     * and transfers the Trove's collateral from ActivePool to StabilityPool.\\n     * Only called by liquidation functions in the TroveManager.\\n     */\\n    function offset(uint256 _debt, uint256 _coll) external;\\n\\n    /*\\n     * Returns the total amount of collateral held by the pool, accounted in an internal variable instead of `balance`,\\n     * to exclude edge cases like collateral received from a self-destruct.\\n     */\\n    function getCollateralBalance() external view returns (uint);\\n\\n    /*\\n     * Returns mUSD held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\n     */\\n    function getTotalMUSDDeposits() external view returns (uint);\\n\\n    /*\\n     * Calculates the collateral gain earned by the deposit since its last snapshots were taken.\\n     */\\n    function getDepositorCollateralGain(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Return the user's compounded deposit.\\n     */\\n    function getCompoundedMUSDDeposit(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Fallback function\\n     * Only callable by Active Pool, it just accounts for BTC received\\n     * receive() external payable;\\n     */\\n\\n    function collateralAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa826c8d5909d57d4eb23c7e4a9c5496c8c41ed759fbaf8a574cf39d26779c08f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50338061003757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61004081610046565b50610096565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61139c806100a56000396000f3fe6080604052600436106100e25760003560e01c80636cfb6bf9116100855780636cfb6bf9146102c6578063715018a6146102e65780638da5cb5b146102fb578063a69bdf1614610319578063aac1846f1461032e578063ab11fadd1461034e578063b7f8cf9b1461036e578063e5a4bed31461038e578063f2fde38b146103a357600080fd5b80630b622ab2146101b657806314a6bf0f146101ec5780631529a6391461020f5780632a9043ec1461022457806348d399e71461024457806354c46661146102645780635a4d28bb1461028657806362502169146102a657600080fd5b366101b1576100ef6103c3565b6002546001600160a01b0316156101625760405162461bcd60e51b815260206004820152602c60248201527f416374697665506f6f6c3a20455243323020636f6c6c61746572616c206e656560448201526b6465642c206e6f742042544360a01b60648201526084015b60405180910390fd5b3460076000828254610174919061119c565b90915550506007546040519081527f51e7c30439c76308c020a84ca2a666735d3baa69d070e13beaf83e15bb697eb39060200160405180910390a1005b600080fd5b3480156101c257600080fd5b506005546101d6906001600160a01b031681565b6040516101e391906111af565b60405180910390f35b3480156101f857600080fd5b50610201610452565b6040519081526020016101e3565b34801561021b57600080fd5b50600754610201565b34801561023057600080fd5b506003546101d6906001600160a01b031681565b34801561025057600080fd5b506002546101d6906001600160a01b031681565b34801561027057600080fd5b5061028461027f3660046111c3565b610469565b005b34801561029257600080fd5b506006546101d6906001600160a01b031681565b3480156102b257600080fd5b506102846102c13660046111fa565b6104ea565b3480156102d257600080fd5b506102846102e1366004611226565b61059c565b3480156102f257600080fd5b50610284610c06565b34801561030757600080fd5b506000546001600160a01b03166101d6565b34801561032557600080fd5b50600854610201565b34801561033a57600080fd5b506004546101d6906001600160a01b031681565b34801561035a57600080fd5b506102846103693660046111c3565b610c18565b34801561037a57600080fd5b506001546101d6906001600160a01b031681565b34801561039a57600080fd5b50600954610201565b3480156103af57600080fd5b506102846103be3660046112a8565b610c4b565b6001546001600160a01b03163314806103e657506004546001600160a01b031633145b6104505760405162461bcd60e51b8152602060048201526041602482015260008051602061134783398151915260448201527f72726f7765724f7065726174696f6e73206e6f722044656661756c7420506f6f6064820152601b60fa1b608482015260a401610159565b565b6000600954600854610464919061119c565b905090565b610471610c89565b8160086000828254610483919061119c565b92505081905550806009600082825461049c919061119c565b90915550506008546009546040517f9c9231087215d0ccca20a3c98640429f2ea8bdd6498c53843c06d1138b8c94fa926104de92908252602082015260400190565b60405180910390a15050565b6104f2610d16565b806007600082825461050491906112c5565b90915550506007546040519081527f51e7c30439c76308c020a84ca2a666735d3baa69d070e13beaf83e15bb697eb39060200160405180910390a1604080516001600160a01b0384168152602081018390527f342693d2465f6f44931e41128424a0227e0cbc69d1c3917a839e6de71696d44c910160405180910390a1600254610598906001600160a01b03168383610dca565b5050565b6105a4610e8f565b6105ad86610ebc565b6001600160a01b038516156105c5576105c585610ebc565b6105ce84610ebc565b6105d783610ebc565b6105e081610ebc565b6105e982610ebc565b600180546001600160a01b03199081166001600160a01b03898116918217909355600280548316898516179055600380548316888516179055600480548316878516178155600580548416868616179055600680549093169386169390931790915560408051638da5cb5b60e01b81529051600093638da5cb5b928082019260209290918290030181865afa158015610686573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106aa91906112d8565b6001600160a01b03161415806107325750846001600160a01b0316866001600160a01b03166348d399e76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610703573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072791906112d8565b6001600160a01b0316145b801561082e575060006001600160a01b0316846001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610782573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a691906112d8565b6001600160a01b031614158061082e5750846001600160a01b0316846001600160a01b03166348d399e76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082391906112d8565b6001600160a01b0316145b801561092a575060006001600160a01b0316836001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561087e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a291906112d8565b6001600160a01b031614158061092a5750846001600160a01b0316836001600160a01b03166348d399e76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091f91906112d8565b6001600160a01b0316145b8015610a29575060006001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561097a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099e91906112d8565b6001600160a01b0316141580610a295750600554604080516348d399e760e01b815290516001600160a01b038089169316916348d399e79160048083019260209291908290030181865afa1580156109fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1e91906112d8565b6001600160a01b0316145b610aac5760405162461bcd60e51b815260206004820152604860248201527f5468652073616d6520636f6c6c61746572616c2061646472657373206d75737460448201527f206265207573656420666f722074686520656e7469726520736574206f6620636064820152676f6e74726163747360c01b608482015260a401610159565b7f3ca631ffcd2a9b5d9ae18543fc82f58eb4ca33af9e6ab01b7a8e95331e6ed98586604051610adb91906111af565b60405180910390a17ffba7421f3d1a98e80d72491a6e0523133444a5842cc7310951d8b82d075a7dff85604051610b1291906111af565b60405180910390a17fe67f36a6e961157d6eff83b91f3af5a62131ceb6f04954ef74f51c1c05e7f88d84604051610b4991906111af565b60405180910390a17f5ee0cae2f063ed938bb55046f6a932fb6ae792bf43624806bb90abe68a50be9b83604051610b8091906111af565b60405180910390a17f82966d27eea39b038ee0fa30cd16532bb24f6e65d31cb58fb227aa5766cdcc7f81604051610bb791906111af565b60405180910390a17f143219c9e69b09e07e095fcc889b43d8f46ca892bba65f08dc3a0050869a567882604051610bee91906111af565b60405180910390a1610bfe610c06565b505050505050565b610c0e610e8f565b6104506000610f61565b610c20610d16565b8160086000828254610c3291906112c5565b92505081905550806009600082825461049c91906112c5565b610c53610e8f565b6001600160a01b038116610c7d576000604051631e4fbdf760e01b815260040161015991906111af565b610c8681610f61565b50565b6001546001600160a01b0316331480610cac57506006546001600160a01b031633145b6104505760405162461bcd60e51b8152602060048201526041602482015260008051602061134783398151915260448201527f72726f7765724f7065726174696f6e73206e6f722054726f76654d616e6167656064820152603960f91b608482015260a401610159565b6001546001600160a01b0316331480610d3957506006546001600160a01b031633145b80610d4e57506005546001600160a01b031633145b6104505760405162461bcd60e51b8152602060048201526053602482015260008051602061134783398151915260448201527f72726f7765724f7065726174696f6e73206e6f722054726f76654d616e6167656064820152721c881b9bdc8814dd18589a5b1a5d1e541bdbdb606a1b608482015260a401610159565b6001600160a01b038316610e76576000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610e25576040519150601f19603f3d011682016040523d82523d6000602084013e610e2a565b606091505b5050905080610e705760405162461bcd60e51b815260206004820152601260248201527114d95b991a5b99c8109510c819985a5b195960721b6044820152606401610159565b50505050565b610e8a6001600160a01b0384168383610fb1565b505050565b6000546001600160a01b03163314610450573360405163118cdaa760e01b815260040161015991906111af565b6001600160a01b038116610f125760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f206164647265737300006044820152606401610159565b803b806105985760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f6044820152606401610159565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092019092526020810180516001600160e01b031663a9059cbb60e01b179052610e8a9185919060009061100f90841683611054565b9050805160001415801561103457508080602001905181019061103291906112f5565b155b15610e8a5782604051635274afe760e01b815260040161015991906111af565b60606110628383600061106b565b90505b92915050565b606081471015611090573060405163cd78605960e01b815260040161015991906111af565b600080856001600160a01b031684866040516110ac9190611317565b60006040518083038185875af1925050503d80600081146110e9576040519150601f19603f3d011682016040523d82523d6000602084013e6110ee565b606091505b50915091506110fe86838361110a565b925050505b9392505050565b60608261111f5761111a8261115d565b611103565b815115801561113657506001600160a01b0384163b155b156111565783604051639996b31560e01b815260040161015991906111af565b5080611103565b80511561116d5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561106557611065611186565b6001600160a01b0391909116815260200190565b600080604083850312156111d657600080fd5b50508035926020909101359150565b6001600160a01b0381168114610c8657600080fd5b6000806040838503121561120d57600080fd5b8235611218816111e5565b946020939093013593505050565b60008060008060008060c0878903121561123f57600080fd5b863561124a816111e5565b9550602087013561125a816111e5565b9450604087013561126a816111e5565b9350606087013561127a816111e5565b9250608087013561128a816111e5565b915060a087013561129a816111e5565b809150509295509295509295565b6000602082840312156112ba57600080fd5b8135611103816111e5565b8181038181111561106557611065611186565b6000602082840312156112ea57600080fd5b8151611103816111e5565b60006020828403121561130757600080fd5b8151801515811461110357600080fd5b6000825160005b81811015611338576020818601810151858301520161131e565b50600092019182525091905056fe416374697665506f6f6c3a2043616c6c6572206973206e65697468657220426fa2646970667358221220c3a47b83a73564bbfa050b87741aeaef5ab5481fae2a25643db0f55c4197308e64736f6c63430008180033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/ActivePool.sol:ActivePool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4170,
        "contract": "contracts/ActivePool.sol:ActivePool",
        "label": "borrowerOperationsAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4172,
        "contract": "contracts/ActivePool.sol:ActivePool",
        "label": "collateralAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4174,
        "contract": "contracts/ActivePool.sol:ActivePool",
        "label": "collSurplusPoolAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4176,
        "contract": "contracts/ActivePool.sol:ActivePool",
        "label": "defaultPoolAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 4178,
        "contract": "contracts/ActivePool.sol:ActivePool",
        "label": "stabilityPoolAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4180,
        "contract": "contracts/ActivePool.sol:ActivePool",
        "label": "troveManagerAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4182,
        "contract": "contracts/ActivePool.sol:ActivePool",
        "label": "collateral",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4184,
        "contract": "contracts/ActivePool.sol:ActivePool",
        "label": "principal",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4186,
        "contract": "contracts/ActivePool.sol:ActivePool",
        "label": "interest",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}