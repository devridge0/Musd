{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/dependencies/BaseMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ncontract BaseMath {\n    uint256 public constant DECIMAL_PRECISION = 1e18;\n}\n"
    },
    "contracts/dependencies/CheckContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.24;\n\ncontract CheckContract {\n    /**\n     * Check that the account is an already deployed non-destroyed contract.\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\n     */\n    function checkContract(address _account) internal view {\n        require(_account != address(0), \"Account cannot be zero address\");\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(_account)\n        }\n        require(size > 0, \"Account code size cannot be zero\");\n    }\n}\n"
    },
    "contracts/dependencies/LiquityBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.24;\n\nimport \"./BaseMath.sol\";\nimport \"./LiquityMath.sol\";\nimport \"../interfaces/IActivePool.sol\";\nimport \"../interfaces/IDefaultPool.sol\";\nimport \"../interfaces/IPriceFeed.sol\";\nimport \"../interfaces/ILiquityBase.sol\";\n\n/*\n * Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\n * common functions.\n */\nabstract contract LiquityBase is BaseMath, ILiquityBase {\n    uint256 public constant _100pct = 1e18; // 1e18 == 100%\n\n    // Minimum collateral ratio for individual troves\n    uint256 public constant MCR = 1.1e18; // 110%\n\n    // Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\n    uint256 public constant CCR = 1.5e18; // 150%\n\n    // Amount of mUSD to be locked in gas pool on opening troves\n    uint256 public constant MUSD_GAS_COMPENSATION = 200e18;\n\n    // Minimum amount of net mUSD debt a trove must have\n    uint256 public constant MIN_NET_DEBT = 1800e18;\n    // uint256 constant public MIN_NET_DEBT = 0;\n\n    uint256 public constant PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\n\n    uint256 public constant BORROWING_FEE_FLOOR = ((DECIMAL_PRECISION * 5) /\n        1000); // 0.5%\n\n    // slither-disable-next-line all\n    IActivePool public activePool;\n\n    // slither-disable-next-line all\n    IDefaultPool public defaultPool;\n\n    // slither-disable-next-line all\n    IPriceFeed public override priceFeed;\n\n    // --- Gas compensation functions ---\n\n    function getEntireSystemColl()\n        public\n        view\n        returns (uint256 entireSystemColl)\n    {\n        uint256 activeColl = activePool.getCollateralBalance();\n        uint256 liquidatedColl = defaultPool.getCollateralBalance();\n\n        return activeColl + liquidatedColl;\n    }\n\n    function getEntireSystemDebt()\n        public\n        view\n        returns (uint256 entireSystemDebt)\n    {\n        uint256 activeDebt = activePool.getDebt();\n        uint256 closedDebt = defaultPool.getDebt();\n\n        return activeDebt + closedDebt;\n    }\n\n    function _getTCR(uint256 _price) internal view returns (uint256 TCR) {\n        uint256 entireSystemColl = getEntireSystemColl();\n        uint256 entireSystemDebt = getEntireSystemDebt();\n\n        TCR = LiquityMath._computeCR(\n            entireSystemColl,\n            entireSystemDebt,\n            _price\n        );\n        return TCR;\n    }\n\n    function _checkRecoveryMode(uint256 _price) internal view returns (bool) {\n        uint256 TCR = _getTCR(_price);\n        return TCR < CCR;\n    }\n\n    function _requireUserAcceptsFee(\n        uint256 _fee,\n        uint256 _amount,\n        uint256 _maxFeePercentage\n    ) internal pure {\n        uint256 feePercentage = (_fee * DECIMAL_PRECISION) / _amount;\n        require(\n            feePercentage <= _maxFeePercentage,\n            \"Fee exceeded provided maximum\"\n        );\n    }\n\n    // Returns the composite debt (drawn debt + gas compensation) of a trove, for the purpose of ICR calculation\n    function _getCompositeDebt(uint256 _debt) internal pure returns (uint) {\n        return _debt + MUSD_GAS_COMPENSATION;\n    }\n\n    function _getNetDebt(uint256 _debt) internal pure returns (uint) {\n        return _debt - MUSD_GAS_COMPENSATION;\n    }\n\n    // Return the amount of collateral to be drawn from a trove's collateral and sent as gas compensation.\n    function _getCollGasCompensation(\n        uint256 _entireColl\n    ) internal pure returns (uint) {\n        return _entireColl / PERCENT_DIVISOR;\n    }\n}\n"
    },
    "contracts/dependencies/LiquityMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.24;\n\nlibrary LiquityMath {\n    uint256 internal constant DECIMAL_PRECISION = 1e18;\n\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\n     *\n     * - Making it “too high” could lead to overflows.\n     * - Making it “too low” could lead to an ICR equal to zero, due to truncation from Solidity floor division.\n     *\n     * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 BTC,\n     * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\n     *\n     */\n    uint256 internal constant NICR_PRECISION = 1e20;\n\n    function _min(uint256 _a, uint256 _b) internal pure returns (uint) {\n        return (_a < _b) ? _a : _b;\n    }\n\n    /*\n     * Multiply two decimal numbers and use normal rounding rules:\n     * -round product up if 19'th mantissa digit >= 5\n     * -round product down if 19'th mantissa digit < 5\n     *\n     * Used only inside the exponentiation, _decPow().\n     */\n    function decMul(\n        uint256 x,\n        uint256 y\n    ) internal pure returns (uint256 decProd) {\n        uint256 prod_xy = x * y;\n\n        decProd = (prod_xy + (DECIMAL_PRECISION / 2)) / DECIMAL_PRECISION;\n    }\n\n    /*\n     * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\n     *\n     * Uses the efficient \"exponentiation by squaring\" algorithm. O(log(n)) complexity.\n     *\n     * Called by one function that represent time in units of minutes:\n     * 1) TroveManager._calcDecayedBaseRate\n     *\n     * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\n     * \"minutes in 1000 years\": 60 * 24 * 365 * 1000\n     *\n     * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\n     * negligibly different from just passing the cap, since:\n     *\n     * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\n     * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\n     */\n    function _decPow(\n        uint256 _base,\n        uint256 _minutes\n    ) internal pure returns (uint) {\n        if (_minutes > 5.256e8) {\n            _minutes = 5.256e8;\n        } // cap to avoid overflow\n\n        if (_minutes == 0) {\n            return DECIMAL_PRECISION;\n        }\n\n        uint256 y = DECIMAL_PRECISION;\n        uint256 x = _base;\n        uint256 n = _minutes;\n\n        // Exponentiation-by-squaring\n        while (n > 1) {\n            if (n % 2 == 0) {\n                x = decMul(x, x);\n                n = n / 2;\n            } else {\n                // if (n % 2 != 0)\n                y = decMul(x, y);\n                x = decMul(x, x);\n                n = (n - 1) / 2;\n            }\n        }\n\n        return decMul(x, y);\n    }\n\n    function _getAbsoluteDifference(\n        uint256 _a,\n        uint256 _b\n    ) internal pure returns (uint) {\n        return (_a >= _b) ? _a - _b : _b - _a;\n    }\n\n    function _computeNominalCR(\n        uint256 _coll,\n        uint256 _debt\n    ) internal pure returns (uint) {\n        if (_debt > 0) {\n            return (_coll * NICR_PRECISION) / _debt;\n        }\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \"infinite\" CR.\n        else {\n            // if (_debt == 0)\n            return type(uint256).max;\n        }\n    }\n\n    function _computeCR(\n        uint256 _coll,\n        uint256 _debt,\n        uint256 _price\n    ) internal pure returns (uint) {\n        if (_debt > 0) {\n            uint256 newCollRatio = (_coll * _price) / _debt;\n\n            return newCollRatio;\n        }\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \"infinite\" CR.\n        else {\n            // if (_debt == 0)\n            return type(uint256).max;\n        }\n    }\n}\n"
    },
    "contracts/HintHelpers.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.24;\n\nimport \"./dependencies/CheckContract.sol\";\nimport \"./dependencies/LiquityBase.sol\";\nimport \"./interfaces/ISortedTroves.sol\";\nimport \"./interfaces/ITroveManager.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract HintHelpers is LiquityBase, Ownable, CheckContract {\n    string public constant NAME = \"HintHelpers\";\n\n    ISortedTroves public sortedTroves;\n    ITroveManager public troveManager;\n\n    // --- Events ---\n\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\n    event TroveManagerAddressChanged(address _troveManagerAddress);\n\n    constructor() Ownable(msg.sender) {}\n\n    // --- Dependency setters ---\n\n    function setAddresses(\n        address _sortedTrovesAddress,\n        address _troveManagerAddress\n    ) external onlyOwner {\n        checkContract(_sortedTrovesAddress);\n        checkContract(_troveManagerAddress);\n\n        sortedTroves = ISortedTroves(_sortedTrovesAddress);\n        troveManager = ITroveManager(_troveManagerAddress);\n\n        emit SortedTrovesAddressChanged(_sortedTrovesAddress);\n        emit TroveManagerAddressChanged(_troveManagerAddress);\n\n        renounceOwnership();\n    }\n\n    // --- Functions ---\n\n    /* getRedemptionHints() - Helper function for finding the right hints to pass to redeemCollateral().\n     *\n     * It simulates a redemption of `_amount` to figure out where the redemption sequence will start and what state the final Trove\n     * of the sequence will end up in.\n     *\n     * Returns three hints:\n     *  - `firstRedemptionHint` is the address of the first Trove with ICR >= MCR (i.e. the first Trove that will be redeemed).\n     *  - `partialRedemptionHintNICR` is the final nominal ICR of the last Trove of the sequence after being hit by partial redemption,\n     *     or zero in case of no partial redemption.\n     *  - `truncatedAmount` is the maximum amount that can be redeemed out of the the provided `_amount`. This can be lower than\n     *    `_amount` when redeeming the full amount would leave the last Trove of the redemption sequence with less net debt than the\n     *    minimum allowed value (i.e. MIN_NET_DEBT).\n     *\n     * The number of Troves to consider for redemption can be capped by passing a non-zero value as `_maxIterations`, while passing zero\n     * will leave it uncapped.\n     */\n\n    function getRedemptionHints(\n        uint256 _amount,\n        uint256 _price,\n        uint256 _maxIterations\n    )\n        external\n        view\n        returns (\n            address firstRedemptionHint,\n            uint256 partialRedemptionHintNICR,\n            uint256 truncatedAmount\n        )\n    {\n        ISortedTroves sortedTrovesCached = sortedTroves;\n\n        uint256 remainingMUSD = _amount;\n        address currentTroveuser = sortedTrovesCached.getLast();\n\n        // slither-disable-start calls-loop\n        while (\n            currentTroveuser != address(0) &&\n            troveManager.getCurrentICR(currentTroveuser, _price) < MCR\n        ) {\n            currentTroveuser = sortedTrovesCached.getPrev(currentTroveuser);\n        }\n\n        firstRedemptionHint = currentTroveuser;\n\n        if (_maxIterations == 0) {\n            _maxIterations = type(uint256).max;\n        }\n\n        while (\n            currentTroveuser != address(0) &&\n            remainingMUSD > 0 &&\n            _maxIterations > 0\n        ) {\n            _maxIterations--;\n\n            (uint256 pendingPrincipal, uint256 pendingInterest) = troveManager\n                .getPendingDebt(currentTroveuser);\n\n            uint256 netDebt = _getNetDebt(\n                troveManager.getTroveDebt(currentTroveuser)\n            ) +\n                pendingPrincipal +\n                pendingInterest;\n\n            if (netDebt > remainingMUSD) {\n                if (netDebt > MIN_NET_DEBT) {\n                    uint256 maxRedeemableMUSD = LiquityMath._min(\n                        remainingMUSD,\n                        netDebt - MIN_NET_DEBT\n                    );\n\n                    uint256 collateral = troveManager.getTroveColl(\n                        currentTroveuser\n                    ) + troveManager.getPendingCollateral(currentTroveuser);\n\n                    uint256 newColl = collateral -\n                        ((maxRedeemableMUSD * DECIMAL_PRECISION) / _price);\n                    uint256 newDebt = netDebt - maxRedeemableMUSD;\n\n                    uint256 compositeDebt = _getCompositeDebt(newDebt);\n                    partialRedemptionHintNICR = LiquityMath._computeNominalCR(\n                        newColl,\n                        compositeDebt\n                    );\n\n                    remainingMUSD -= maxRedeemableMUSD;\n                }\n                break;\n            } else {\n                remainingMUSD -= netDebt;\n            }\n\n            currentTroveuser = sortedTrovesCached.getPrev(currentTroveuser);\n        }\n        // slither-disable-end calls-loop\n\n        truncatedAmount = _amount - remainingMUSD;\n    }\n\n    /* getApproxHint() - return address of a Trove that is, on average, (length / numTrials) positions away in the\n    sortedTroves list from the correct insert position of the Trove to be inserted.\n\n    Note: The output address is worst-case O(n) positions away from the correct insert position, however, the function\n    is probabilistic. Input can be tuned to guarantee results to a high degree of confidence, e.g:\n\n    Submitting numTrials = k * sqrt(length), with k = 15 makes it very, very likely that the ouput address will\n    be <= sqrt(length) positions away from the correct insert position.\n    */\n    function getApproxHint(\n        uint256 _CR,\n        uint256 _numTrials,\n        uint256 _inputRandomSeed\n    )\n        external\n        view\n        returns (address hintAddress, uint256 diff, uint256 latestRandomSeed)\n    {\n        uint256 arrayLength = troveManager.getTroveOwnersCount();\n\n        if (arrayLength == 0) {\n            return (address(0), 0, _inputRandomSeed);\n        }\n\n        hintAddress = sortedTroves.getLast();\n        diff = LiquityMath._getAbsoluteDifference(\n            _CR,\n            troveManager.getNominalICR(hintAddress)\n        );\n        latestRandomSeed = _inputRandomSeed;\n\n        uint256 i = 1;\n\n        // slither-disable-start calls-loop\n        while (i < _numTrials) {\n            latestRandomSeed = uint(\n                keccak256(abi.encodePacked(latestRandomSeed))\n            );\n\n            uint256 arrayIndex = latestRandomSeed % arrayLength;\n            address currentAddress = troveManager.getTroveFromTroveOwnersArray(\n                arrayIndex\n            );\n            uint256 currentNICR = troveManager.getNominalICR(currentAddress);\n\n            // check if abs(current - CR) > abs(closest - CR), and update closest if current is closer\n            uint256 currentDiff = LiquityMath._getAbsoluteDifference(\n                currentNICR,\n                _CR\n            );\n\n            if (currentDiff < diff) {\n                diff = currentDiff;\n                hintAddress = currentAddress;\n            }\n            i++;\n        }\n        // slither-disable-end calls-loop\n    }\n\n    function computeNominalCR(\n        uint256 _coll,\n        uint256 _debt\n    ) external pure returns (uint) {\n        return LiquityMath._computeNominalCR(_coll, _debt);\n    }\n\n    function computeCR(\n        uint256 _coll,\n        uint256 _debt,\n        uint256 _price\n    ) external pure returns (uint) {\n        return LiquityMath._computeCR(_coll, _debt, _price);\n    }\n}\n"
    },
    "contracts/interfaces/ChainlinkAggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.24;\n\ninterface ChainlinkAggregatorV3Interface {\n    function decimals() external view returns (uint8);\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n}\n"
    },
    "contracts/interfaces/IActivePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.24;\n\nimport \"./IPool.sol\";\n\ninterface IActivePool is IPool {\n    // --- Events ---\n    event BorrowerOperationsAddressChanged(\n        address _newBorrowerOperationsAddress\n    );\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\n    event ActivePoolDebtUpdated(uint256 _principal, uint256 _interest);\n    event ActivePoolCollateralBalanceUpdated(uint256 _collateral);\n    event CollateralAddressChanged(address _newCollateralAddress);\n    event CollSurplusPoolAddressChanged(address _newCollSurplusPoolAddress);\n\n    // --- Functions ---\n    function sendCollateral(address _account, uint256 _amount) external;\n\n    function collateralAddress() external view returns (address);\n}\n"
    },
    "contracts/interfaces/IDefaultPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.24;\n\nimport \"./IPool.sol\";\n\ninterface IDefaultPool is IPool {\n    // --- Events ---\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\n    event DefaultPoolDebtUpdated(uint256 _principal, uint256 _interest);\n    event DefaultPoolCollateralBalanceUpdated(uint256 _collateral);\n    event CollateralAddressChanged(address _newCollateralAddress);\n\n    // --- Functions ---\n    function sendCollateralToActivePool(uint256 _amount) external;\n\n    function collateralAddress() external view returns (address);\n\n    function getLastInterestUpdatedTime() external view returns (uint);\n}\n"
    },
    "contracts/interfaces/ILiquityBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.24;\n\nimport \"./IPriceFeed.sol\";\n\ninterface ILiquityBase {\n    function priceFeed() external view returns (IPriceFeed);\n}\n"
    },
    "contracts/interfaces/IPCV.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.24;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../token/IMUSD.sol\";\n\ninterface IPCV {\n    // --- Events --\n    event MUSDTokenAddressSet(address _musdTokenAddress);\n    event BorrowerOperationsAddressSet(address _borrowerOperationsAddress);\n    event CollateralAddressSet(address _collateralAddress);\n    event RolesSet(address _council, address _treasury);\n    event MUSDWithdraw(address _recipient, uint256 _amount);\n    event CollateralWithdraw(address _recipient, uint256 _collateralAmount);\n    event PCVDebtPaid(uint256 _paidDebt);\n    event RecipientAdded(address _recipient);\n    event RecipientRemoved(address _recipient);\n    event PCVFeePaid(address _recipient, uint256 _amount);\n\n    // --- Functions ---\n\n    function debtToPay() external returns (uint256);\n\n    function payDebt(uint256 _musdToBurn) external;\n\n    function setAddresses(\n        address _musdTokenAddress,\n        address _borrowerOperations,\n        address _collateralERC20\n    ) external;\n\n    function initialize() external;\n\n    function setFeeRecipient(address _feeRecipient) external;\n\n    function setFeeSplit(uint8 _feeSplitPercentage) external;\n\n    function withdrawMUSD(address _recipient, uint256 _musdAmount) external;\n\n    function withdrawCollateral(\n        address _recipient,\n        uint256 _collateralAmount\n    ) external;\n\n    function addRecipientToWhitelist(address _recipient) external;\n\n    function addRecipientsToWhitelist(address[] calldata _recipients) external;\n\n    function removeRecipientFromWhitelist(address _recipient) external;\n\n    function removeRecipientsFromWhitelist(\n        address[] calldata _recipients\n    ) external;\n\n    function startChangingRoles(address _council, address _treasury) external;\n\n    function cancelChangingRoles() external;\n\n    function finalizeChangingRoles() external;\n\n    function collateralERC20() external view returns (IERC20);\n\n    function musd() external view returns (IMUSD);\n\n    function council() external view returns (address);\n\n    function treasury() external view returns (address);\n}\n"
    },
    "contracts/interfaces/IPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.24;\n\n// Common interface for the Pools.\ninterface IPool {\n    // --- Events ---\n\n    event CollateralBalanceUpdated(uint256 _newBalance);\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\n    event CollateralSent(address _to, uint256 _amount);\n\n    // --- Functions ---\n\n    function increaseDebt(uint256 _principal, uint256 _interest) external;\n\n    function decreaseDebt(uint256 _principal, uint256 _interest) external;\n\n    function getCollateralBalance() external view returns (uint);\n\n    function getDebt() external view returns (uint);\n\n    function getPrincipal() external view returns (uint);\n\n    function getInterest() external view returns (uint);\n}\n"
    },
    "contracts/interfaces/IPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.24;\n\ninterface IPriceFeed {\n    // --- Events ---\n    event LastGoodPriceUpdated(uint256 _lastGoodPrice);\n\n    event NewOracleRegistered(address _oracle);\n\n    // --- Function ---\n    function fetchPrice() external returns (uint);\n\n    function setOracle(address _oracle) external;\n}\n"
    },
    "contracts/interfaces/ISortedTroves.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.24;\n\n// Common interface for the SortedTroves Doubly Linked List.\ninterface ISortedTroves {\n    // --- Events ---\n\n    event SortedTrovesAddressChanged(address _sortedDoublyLLAddress);\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\n    event NodeAdded(address _id, uint256 _NICR);\n    event NodeRemoved(address _id);\n\n    // --- Functions ---\n\n    function setParams(\n        uint256 _size,\n        address _TroveManagerAddress,\n        address _borrowerOperationsAddress\n    ) external;\n\n    function insert(\n        address _id,\n        uint256 _NICR,\n        address _prevId,\n        address _nextId\n    ) external;\n\n    function remove(address _id) external;\n\n    function reInsert(\n        address _id,\n        uint256 _newNICR,\n        address _prevId,\n        address _nextId\n    ) external;\n\n    function contains(address _id) external view returns (bool);\n\n    function isFull() external view returns (bool);\n\n    function isEmpty() external view returns (bool);\n\n    function getSize() external view returns (uint256);\n\n    function getMaxSize() external view returns (uint256);\n\n    function getFirst() external view returns (address);\n\n    function getLast() external view returns (address);\n\n    function getNext(address _id) external view returns (address);\n\n    function getPrev(address _id) external view returns (address);\n\n    function validInsertPosition(\n        uint256 _NICR,\n        address _prevId,\n        address _nextId\n    ) external view returns (bool);\n\n    function findInsertPosition(\n        uint256 _NICR,\n        address _prevId,\n        address _nextId\n    ) external view returns (address, address);\n}\n"
    },
    "contracts/interfaces/IStabilityPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.24;\n\n/*\n * The Stability Pool holds mUSD tokens deposited by Stability Pool depositors.\n *\n * When a trove is liquidated, then depending on system conditions, some of its debt gets offset with\n * mUSD in the Stability Pool: that is, the offset debt evaporates, and an equal amount of mUSD tokens in the Stability Pool are burned.\n *\n * Thus, a liquidation causes each depositor to receive a mUSD loss in proportion to their deposit as a share of total deposits.\n * They also receive an collateral gain, as the collateral of the liquidated trove is distributed among Stability depositors\n * in the same proportion.\n *\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\n * of the total mUSD in the Stability Pool, depletes 40% of each deposit.\n *\n * A deposit that has experienced a series of liquidations is termed a \"compounded deposit\": each liquidation depletes the deposit,\n * multiplying it by some factor in range ]0,1[\n *\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / collateral gain derivations:\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\n *\n */\ninterface IStabilityPool {\n    // --- Events ---\n\n    event StabilityPoolCollateralBalanceUpdated(uint256 _newBalance);\n    event StabilityPoolMUSDBalanceUpdated(uint256 _newBalance);\n\n    event BorrowerOperationsAddressChanged(\n        address _newBorrowerOperationsAddress\n    );\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\n    event MUSDTokenAddressChanged(address _newMUSDTokenAddress);\n    event SortedTrovesAddressChanged(address _newSortedTrovesAddress);\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\n    event CollateralAddressChanged(address _newCollateralAddress);\n\n    event PUpdated(uint256 _P);\n    event SUpdated(uint256 _S, uint128 _epoch, uint128 _scale);\n    event EpochUpdated(uint128 _currentEpoch);\n    event ScaleUpdated(uint128 _currentScale);\n\n    event DepositSnapshotUpdated(\n        address indexed _depositor,\n        uint256 _P,\n        uint256 _S\n    );\n    event UserDepositChanged(address indexed _depositor, uint256 _newDeposit);\n\n    event CollateralGainWithdrawn(\n        address indexed _depositor,\n        uint256 _collateral,\n        uint256 _MUSDLoss\n    );\n    event CollateralSent(address _to, uint256 _amount);\n\n    // --- Functions ---\n\n    /*\n     * Called only once on init, to set addresses of other Liquity contracts\n     * Callable only by owner, renounces ownership at the end\n     */\n    function setAddresses(\n        address _borrowerOperationsAddress,\n        address _troveManagerAddress,\n        address _activePoolAddress,\n        address _musdTokenAddress,\n        address _sortedTrovesAddress,\n        address _priceFeedAddress,\n        address _collateralAddress\n    ) external;\n\n    /*\n     * Initial checks:\n     * - _amount is not zero\n     * ---\n     * - Sends depositor's accumulated gains (collateral) to depositor\n     */\n    function provideToSP(uint256 _amount) external;\n\n    /*\n     * Initial checks:\n     * - _amount is zero or there are no under collateralized troves left in the system\n     * - User has a non zero deposit\n     * ---\n     * - Sends all depositor's accumulated gains (collateral) to depositor\n     * - Decreases deposit stake, and takes new snapshot.\n     *\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\n     */\n    function withdrawFromSP(uint256 _amount) external;\n\n    /*\n     * Initial checks:\n     * - User has a non zero deposit\n     * - User has an open trove\n     * - User has some collateral gain\n     * ---\n     * - Transfers the depositor's entire collateral gain from the Stability Pool to the caller's trove\n     * - Leaves their compounded deposit in the Stability Pool\n     * - Updates snapshots for deposit\n     */\n    function withdrawCollateralGainToTrove(\n        address _upperHint,\n        address _lowerHint\n    ) external;\n\n    /*\n     * Initial checks:\n     * - Caller is TroveManager\n     * ---\n     * Cancels out the specified debt against the mUSD contained in the Stability Pool (as far as possible)\n     * and transfers the Trove's collateral from ActivePool to StabilityPool.\n     * Only called by liquidation functions in the TroveManager.\n     */\n    function offset(uint256 _debt, uint256 _coll) external;\n\n    /*\n     * Returns the total amount of collateral held by the pool, accounted in an internal variable instead of `balance`,\n     * to exclude edge cases like collateral received from a self-destruct.\n     */\n    function getCollateralBalance() external view returns (uint);\n\n    /*\n     * Returns mUSD held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\n     */\n    function getTotalMUSDDeposits() external view returns (uint);\n\n    /*\n     * Calculates the collateral gain earned by the deposit since its last snapshots were taken.\n     */\n    function getDepositorCollateralGain(\n        address _depositor\n    ) external view returns (uint);\n\n    /*\n     * Return the user's compounded deposit.\n     */\n    function getCompoundedMUSDDeposit(\n        address _depositor\n    ) external view returns (uint);\n\n    /*\n     * Fallback function\n     * Only callable by Active Pool, it just accounts for BTC received\n     * receive() external payable;\n     */\n\n    function collateralAddress() external view returns (address);\n}\n"
    },
    "contracts/interfaces/ITroveManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.24;\n\nimport \"./IStabilityPool.sol\";\nimport \"./IPCV.sol\";\n\n// Common interface for the Trove Manager.\ninterface ITroveManager {\n    enum Status {\n        nonExistent,\n        active,\n        closedByOwner,\n        closedByLiquidation,\n        closedByRedemption\n    }\n\n    struct InterestRateChange {\n        uint16 interestRate;\n        uint256 blockNumber;\n    }\n\n    // --- Events ---\n\n    event ActivePoolAddressChanged(address _activePoolAddress);\n    event BorrowerOperationsAddressChanged(\n        address _newBorrowerOperationsAddress\n    );\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\n    event GasPoolAddressChanged(address _gasPoolAddress);\n    event InterestRateManagerAddressChanged(\n        address _interestRateManagerAddress\n    );\n    event MUSDTokenAddressChanged(address _newMUSDTokenAddress);\n    event PCVAddressChanged(address _pcvAddress);\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\n\n    event Liquidation(\n        uint256 _liquidatedPrincipal,\n        uint256 _liquidatedInterest,\n        uint256 _liquidatedColl,\n        uint256 _collGasCompensation,\n        uint256 _gasCompensation\n    );\n    event Redemption(\n        uint256 _attemptedAmount,\n        uint256 _actualAmount,\n        uint256 _collateralSent,\n        uint256 _collateralFee\n    );\n    event TroveUpdated(\n        address indexed _borrower,\n        uint256 _principal,\n        uint256 _interest,\n        uint256 _coll,\n        uint256 stake,\n        uint8 operation\n    );\n    event TroveLiquidated(\n        address indexed _borrower,\n        uint256 _debt,\n        uint256 _coll,\n        uint8 operation\n    );\n    event BaseRateUpdated(uint256 _baseRate);\n    event LastFeeOpTimeUpdated(uint256 _lastFeeOpTime);\n    event TotalStakesUpdated(uint256 _newTotalStakes);\n    event SystemSnapshotsUpdated(\n        uint256 _totalStakesSnapshot,\n        uint256 _totalCollateralSnapshot\n    );\n    event LTermsUpdated(\n        uint256 _L_Collateral,\n        uint256 _L_Principal,\n        uint256 _L_Interest\n    );\n    event TroveSnapshotsUpdated(\n        uint256 _L_Collateral,\n        uint256 _L_Principal,\n        uint256 _L_Interest\n    );\n    event TroveIndexUpdated(address _borrower, uint256 _newIndex);\n\n    // --- Functions ---\n\n    function setAddresses(\n        address _activePoolAddress,\n        address _borrowerOperationsAddress,\n        address _collSurplusPoolAddress,\n        address _defaultPoolAddress,\n        address _gasPoolAddress,\n        address _interestRateManagerAddress,\n        address _musdTokenAddress,\n        address _pcvAddress,\n        address _priceFeedAddress,\n        address _sortedTrovesAddress,\n        address _stabilityPoolAddress\n    ) external;\n\n    function liquidate(address _borrower) external;\n\n    function batchLiquidateTroves(address[] calldata _troveArray) external;\n\n    function redeemCollateral(\n        uint256 _amount,\n        address _firstRedemptionHint,\n        address _upperPartialRedemptionHint,\n        address _lowerPartialRedemptionHint,\n        uint256 _partialRedemptionHintNICR,\n        uint256 _maxIterations,\n        uint256 _maxFeePercentage\n    ) external;\n\n    function updateStakeAndTotalStakes(\n        address _borrower\n    ) external returns (uint);\n\n    function updateTroveRewardSnapshots(address _borrower) external;\n\n    function addTroveOwnerToArray(\n        address _borrower\n    ) external returns (uint256 index);\n\n    function applyPendingRewards(address _borrower) external;\n\n    function closeTrove(address _borrower) external;\n\n    function removeStake(address _borrower) external;\n\n    function decayBaseRateFromBorrowing() external;\n\n    function setTroveStatus(address _borrower, Status _status) external;\n\n    function setTroveMaxBorrowingCapacity(\n        address _borrower,\n        uint256 _maxBorrowingCapacity\n    ) external;\n\n    function updateDefaultPoolInterest() external;\n\n    function updateSystemAndTroveInterest(address _borrower) external;\n\n    function increaseTroveColl(\n        address _borrower,\n        uint256 _collIncrease\n    ) external returns (uint);\n\n    function decreaseTroveColl(\n        address _borrower,\n        uint256 _collDecrease\n    ) external returns (uint);\n\n    function increaseTroveDebt(\n        address _borrower,\n        uint256 _debtIncrease\n    ) external returns (uint256);\n\n    function decreaseTroveDebt(\n        address _borrower,\n        uint256 _debtDecrease\n    ) external returns (uint256, uint256);\n\n    function setTroveInterestRate(address _borrower, uint16 _rate) external;\n\n    function setTroveLastInterestUpdateTime(\n        address _borrower,\n        uint256 _timestamp\n    ) external;\n\n    function stabilityPool() external view returns (IStabilityPool);\n\n    function pcv() external view returns (IPCV);\n\n    function getTroveOwnersCount() external view returns (uint);\n\n    function getTroveFromTroveOwnersArray(\n        uint256 _index\n    ) external view returns (address);\n\n    function getTroveInterestOwed(\n        address _borrower\n    ) external view returns (uint256);\n\n    function getTrovePrincipal(address _borrower) external view returns (uint);\n\n    function getNominalICR(address _borrower) external view returns (uint);\n\n    function getCurrentICR(\n        address _borrower,\n        uint256 _price\n    ) external view returns (uint);\n\n    function getPendingCollateral(\n        address _borrower\n    ) external view returns (uint);\n\n    function getPendingDebt(\n        address _borrower\n    ) external view returns (uint256, uint256);\n\n    function hasPendingRewards(address _borrower) external view returns (bool);\n\n    function getEntireDebtAndColl(\n        address _borrower\n    )\n        external\n        view\n        returns (\n            uint256 coll,\n            uint256 principal,\n            uint256 interest,\n            uint256 pendingCollateral,\n            uint256 pendingPrincipal,\n            uint256 pendingInterest\n        );\n\n    function getRedemptionRate() external view returns (uint);\n\n    function getRedemptionRateWithDecay() external view returns (uint);\n\n    function getRedemptionFeeWithDecay(\n        uint256 _collateralDrawn\n    ) external view returns (uint);\n\n    function getBorrowingRate() external view returns (uint);\n\n    function getBorrowingRateWithDecay() external view returns (uint);\n\n    function getBorrowingFee(uint256 _debt) external view returns (uint);\n\n    function getBorrowingFeeWithDecay(\n        uint256 _debt\n    ) external view returns (uint);\n\n    function getTroveStatus(address _borrower) external view returns (Status);\n\n    function getTroveStake(address _borrower) external view returns (uint);\n\n    function getTroveDebt(address _borrower) external view returns (uint);\n\n    function getTroveInterestRate(\n        address _borrower\n    ) external view returns (uint16);\n\n    function getTroveLastInterestUpdateTime(\n        address _borrower\n    ) external view returns (uint);\n\n    function getTroveColl(address _borrower) external view returns (uint);\n\n    function getTCR(uint256 _price) external view returns (uint);\n\n    function checkRecoveryMode(uint256 _price) external view returns (bool);\n}\n"
    },
    "contracts/PriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.24;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./interfaces/ChainlinkAggregatorV3Interface.sol\";\nimport \"./interfaces/IPriceFeed.sol\";\n\ncontract PriceFeed is IPriceFeed, Ownable {\n    /// @dev Used to convert an oracle price answer to an 18-digit precision uint\n    uint8 public constant TARGET_DIGITS = 18;\n\n    // State ------------------------------------------------------------------------------------------------------------\n    ChainlinkAggregatorV3Interface public oracle;\n\n    constructor() Ownable(msg.sender) {}\n\n    // Admin routines ---------------------------------------------------------------------------------------------------\n\n    function setOracle(address _oracle) external onlyOwner {\n        ChainlinkAggregatorV3Interface chainLinkOracle = ChainlinkAggregatorV3Interface(\n                _oracle\n            );\n\n        require(chainLinkOracle.decimals() > 0, \"Invalid Decimals from Oracle\");\n        // slither-disable-next-line unused-return\n        (, int256 price, , , ) = chainLinkOracle.latestRoundData();\n        require(price != 0, \"Oracle returns 0 for price\");\n\n        oracle = chainLinkOracle;\n        emit NewOracleRegistered(_oracle);\n        renounceOwnership();\n    }\n\n    // Public functions -------------------------------------------------------------------------------------------------\n\n    function fetchPrice() public view virtual returns (uint256) {\n        // slither-disable-next-line unused-return\n        (, int256 price, , , ) = oracle.latestRoundData();\n        return _scalePriceByDigits(uint256(price), oracle.decimals());\n    }\n\n    /**\n     * @dev Scales oracle's response up/down to 1e18 precisoin.\n     */\n    function _scalePriceByDigits(\n        uint256 _price,\n        uint8 _priceDigits\n    ) internal pure returns (uint256) {\n        unchecked {\n            if (_priceDigits > TARGET_DIGITS) {\n                return _price / (10 ** (_priceDigits - TARGET_DIGITS));\n            } else if (_priceDigits < TARGET_DIGITS) {\n                return _price * (10 ** (TARGET_DIGITS - _priceDigits));\n            }\n        }\n        return _price;\n    }\n}\n"
    },
    "contracts/tests/MockAggregator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.24;\n\nimport \"../interfaces/ChainlinkAggregatorV3Interface.sol\";\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract MockAggregator is ChainlinkAggregatorV3Interface, Ownable {\n    uint256 private _price;\n    uint8 private precision;\n\n    constructor(uint8 _decimals) Ownable(msg.sender) {\n        precision = _decimals;\n        uint256 multiplier = 10 ** uint8(precision);\n        _price = 50000 * multiplier;\n    }\n\n    // Manual external price setter.\n    function setPrice(uint256 price) external returns (bool) {\n        // slither-disable-next-line events-maths\n        _price = price;\n        return true;\n    }\n\n    function setPrecision(uint8 _precision) external returns (bool) {\n        uint256 oldMultiplier = 10 ** uint8(precision);\n        uint256 basePrice = uint256(_price / oldMultiplier);\n        uint256 multiplier = 10 ** uint8(_precision);\n        _price = basePrice * multiplier;\n        precision = _precision;\n        return true;\n    }\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        require(precision <= 77, \"Decimals too large\"); // Prevent overflow\n\n        return (0, int256(_price), 0, 0, 0);\n    }\n\n    function decimals() public view returns (uint8) {\n        return precision;\n    }\n}\n"
    },
    "contracts/token/IMUSD.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.24;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\";\n\ninterface IMUSD is IERC20Metadata, IERC20Permit {\n    // --- Events ---\n    event BorrowerOperationsAddressAdded(address _newBorrowerOperationsAddress);\n    event BalanceUpdated(address _user, uint256 _amount);\n    event StabilityPoolAddressAdded(address _newStabilityPoolAddress);\n    event TroveManagerAddressAdded(address _troveManagerAddress);\n\n    // --- Governance Functions ---\n    function cancelAddContracts() external;\n\n    function cancelAddMintList() external;\n\n    function cancelRevokeBurnList() external;\n\n    function cancelRevokeMintList() external;\n\n    function startAddContracts(\n        address _troveManagerAddress,\n        address _stabilityPoolAddress,\n        address _borrowerOperationsAddress\n    ) external;\n\n    function startAddMintList(address _account) external;\n\n    function startRevokeBurnList(address _account) external;\n\n    function startRevokeMintList(address _account) external;\n\n    function finalizeAddContracts() external;\n\n    function finalizeAddMintList() external;\n\n    function finalizeRevokeBurnList() external;\n\n    function finalizeRevokeMintList() external;\n\n    // --- External Functions ---\n    function burn(address _account, uint256 _amount) external;\n\n    function mint(address _account, uint256 _amount) external;\n\n    function burnList(address contractAddress) external view returns (bool);\n\n    function mintList(address contractAddress) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}